/*--------------------------------------------------------------------------
   Author: Thomas Nowotny
  
   Institute: Center for Computational Neuroscience and Robotics
              University of Sussex
	      Falmer, Brighton BN1 9QJ, UK 
  
   email to:  T.Nowotny@sussex.ac.uk
  
   initial version: 2010-02-07
  
--------------------------------------------------------------------------*/


//----------------------------------------------------------------------------
/*!  \page UserManual User Manual

\latexonly
\vspace{0cm}\mbox{}\vspace{0cm}
\endlatexonly

\section Contents
- \ref sIntro\n
- \subpage sectDefiningNetwork
- \subpage sectNeuronModels
- \subpage sectSynapseModels

\section sIntro Introduction

GeNN is a software library for facilitating the simulation of neuronal
network models on NVIDIA CUDA enabled GPU hardware. It was designed
with computational neuroscience models in mind rather than artificial
neural networks. The main philosophy of GeNN is two-fold:

1. GeNN relies heavily on code generation to make it very flexible and
   to allow adjusting simulation code to the model of interest and the GPU
   hardware that is detected at compile time.
2. GeNN is lightweight in that it provides code for running models of
   neuronal networks on GPU hardware but it leaves it to the user to
   write a final simulation engine. It so allows maximal flexibility to
   the user who can use any of the provided code but can fully choose,
   inspect, extend or otherwise modify the generated code. They can also
   introduce their own optimisations and in particular control the data
   flow from and to the GPU in any desired granularity.

This manual gives an overview of how to use GeNN for a novice user and
tries to lead the user to more expert use later on. With that we jump
right in.
\n

-----
\link ReleaseNotes Previous\endlink | \link UserManual Top\endlink | \link sectDefiningNetwork Next\endlink
*/


//----------------------------------------------------------------------------
/*!  \page sectDefiningNetwork Defining a network model

A network model is defined by the user by providing the function 
\code{.cc}
void modelDefinition(NNmodel &model) 
\endcode
in a separate file, such as `MyModel.cc`. In this function, the following
tasks must be completed:

1. The name of the model must be defined:
   \code{.cc}
   model.setName("MyModel");
   \endcode
2. Neuron populations (at least one) must be added (see \ref subsect11).
   The user may add as many neuron populations as they wish. If resources
   run out, there will not be a warning but GeNN will fail. However,
   before this breaking point is reached, GeNN will make all necessary
   efforts in terms of block size optimisation to accommodate the defined
   models. All populations must have a unique name.

3. Synapse populations (zero or more) can be added (see \ref subsect12). Again,
   the number of synaptic connection populations is unlimited other than
   by resources.

\section subsect11 Defining neuron populations

Neuron populations are added using the function
\code{.cc}
model.addNeuronPopulation<NeuronModel>(name, num, paramValues, varValues);
\endcode
where the arguments are:
\arg `NeuronModel`:        Template argument specifying the type of neuron model
                           These should be derived off NeuronModels::Base and can
                           either be one of the standard models or user-defined
                           (see \ref sectNeuronModels).
\arg `const string &name`: Unique name of the neuron population
\arg `unsigned int size`: number of neurons in the population
\arg `NeuronModel::ParamValues paramValues`: Parameters of this neuron type
\arg `NeuronModel::VarValues varValues`: Initial values for variables of this neuron type 

The user may add as many neuron populations as the model necessitates.
They must all have unique names. The possible values for the arguments,
predefined models and their parameters and initial values are detailed
\ref sectNeuronModels below.

\section subsect12 Defining synapse populations

Synapse populations are added with the function
\code{.cc}
model.addSynapsePopulation<WeightUpdateModel, PostsynapticModel>(name, mType, delay, preName, postName, weightParamValues, weightVarValues, postsynapticParamValues, postsynapticVarValues);
\endcode
where the arguments are
\arg `WeightUpdateModel`:   Template parameter specifying the type of weight update model.
                            These should be derived off WeightUpdateModels::Base and can
                            either be one of the standard models or user-defined
                            (see \ref sectSynapseModels).
\arg `PostsynapticModel`:   Template parameter specifying the type of postsynaptic integration model.
                            These should be derived off PostsynapticModels::Base and can
                            either be one of the standard models or user-defined
                            (see \ref sect_postsyn).
\arg `const string &name`: The name of the synapse population
\arg `unsigned int mType`: How the synaptic metrix is stored. the options
     currently are "SPARSE_GLOBALG", "SPARSE_INDIVIDUALG", "DENSE_GLOBALG", "DENSE_INDIVIDUALG" or "BITMASK_GLOBALG" (see \ref subsect34).
\arg `unsigned int delay`: Synaptic delay (in multiples of the simulation
     time step `DT`). 
\arg `const string preName`: Name of the (existing!) pre-synaptic
     neuron population.
\arg `const string postName`: Name of the (existing!) post-synaptic
     neuron population.
\arg `WeightUpdateModel::ParamValues weightParamValues`:    The parameter values (common to all synapses of 
                                                            the population) for the weight update model. 
\arg `WeightUpdateModel::VarValues weightVarValues`:    The initial values for the weight
                                                        update model's state variables
\arg `PostsynapticModel::ParamValues postsynapticParamValues`:  The parameter values (common to all 
                                                                postsynaptic neurons) for the postsynaptic model. 
\arg `PostsynapticModel::VarValues postsynapticVarValues`:  The initial values for the 
                                                            postsynaptic model's state variables

\note
If the synapse conductance definition type is "GLOBALG" then the global
value of the synapse parameters is taken from the initial value provided
in `weightVarValues`.
\n

-----
\link UserManual Previous\endlink | \link sectDefiningNetwork Top\endlink | \link sectNeuronModels Next\endlink
*/


//----------------------------------------------------------------------------
/*! 
\page sectNeuronModels Neuron models
There is a number of predefined models which can be used with the NNmodel::addNeuronGroup function:
- NeuronModels::RulkovMap
- NeuronModels::Izhikevich
- NeuronModels::IzhikevichVariable
- NeuronModels::SpikeSource
- NeuronModels::Poisson
- NeuronModels::TraubMiles
- NeuronModels::TraubMilesFast
- NeuronModels::TraubMilesAlt
- NeuronModels::TraubMilesNStep

\section sect_own Defining your own neuron type 

In order to define a new neuron type for use in a GeNN application,
it is necessary to define a new class derived from NeuronModels::Base. 
For convenience the methods this class should implement can be implemented using macros:

- DECLARE_MODEL(TYPE, NUM_PARAMS, NUM_VARS): declared the boilerplate code required for the model e.g. the correct
  specialisations of NewModels::ValueBase used to wrap the neuron model parameters and values.
- SET_SIM_CODE(SIM_CODE): where SIM_CODE contains the code for executing 
  the integration of the model for one time step. Within this code string, variables need to be
  referred to by $(NAME), where NAME is the name of the variable as
  defined in the vector varNames. The code may refer to the predefined
  primitives `DT` for the
  time step size and `$(Isyn)` for the total incoming synaptic current. It can also refer to a unique ID (within the population) using $(id).
- SET_THRESHOLD_CONDITION_CODE(THRESHOLD_CONDITION_CODE) defines the condition for true spike detection.
- SET_PARAM_NAMES() defines the names of the model parameters. 
    If defined as `NAME` here, they can then be referenced as `$(NAME)` in the code string. 
    The length of this list should match the NUM_PARAM specified in DECLARE_MODEL. 
    Parameters are assumed to be always of type double.
- SET_VARS() defines the names and type strings (e.g. "float", "double", etc) 
    of the neuron state variables. The variables defined here as `NAME` can then be used in the
    syntax `$(NAME)` in the code string. 

For example, using these macros, we can define a leaky integrator \f$\tau\frac{dV}{dt}= -V + I_{{\rm syn}}\f$ solved using Euler's method:

\code
class LeakyIntegrator : public NeuronModels::Base
{
public:
    DECLARE_MODEL(LeakyIntegrator, 1, 1);
    
    SET_SIM_CODE("$(V)+= (-$(V)+$(Isyn))*(DT/$(tau));");
    
    SET_THRESHOLD_CONDITION_CODE("$(V) >= -50.0");
    
    SET_PARAM_NAMES({"tau"});
    
    SET_VARS({{"V", "scalar"}});
};
\endcode

Additionally "dependent parameters" can be defined. Dependent parameters are a mechanism 
for enhanced efficiency when running neuron models. If parameters with model-side meaning, such as time
constants or conductances always appear in a certain combination in the model, then it is more efficient 
to pre-compute this combination and define it as a dependent parameter.

For example, because the equation defining the previous leaky integrator example has an algebraic solution, it can be more accurately solved as follows - using a derived parameter to calculate \f$\exp\left(\frac{-t}{\tau}\right)\f$:

\code
class LeakyIntegrator2 : public NeuronModels::Base
{
public:
    DECLARE_MODEL(LeakyIntegrator2, 1, 1);
    
    SET_SIM_CODE("$(V) = $(Isyn) - $(ExpTC)*($(Isyn) - $(V));");
    
    SET_THRESHOLD_CONDITION_CODE("$(V) >= -50.0");
    
    SET_PARAM_NAMES({"tau"});
    
    SET_VARS({{"V", "scalar"}});
    
    SET_DERIVED_PARAMS({
        {"ExpTC", [](const vector<double> &pars, double dt){ return std::exp(-dt / pars[0]); }}});
};
\endcode

GeNN provides two additional features that might be useful when defining more complex neuron models.
"Support code" enables a code snippet to be defined that contains supporting code that will be utilized in the other code snippets. Typically, these are functions that are needed in the sim code or threshold condition code. If possible, these should be defined as `__host__ __device__` functions so that both GPU and CPU versions of GeNN code have an appropriate support code function available. The support code is protected with a namespace so that it is exclusively available for the neuron population whose neurons define it. Support code is added to a model using the SET_SUPPORT_CODE() macro, for example:
\code
SET_SUPPORT_CODE("__device__ __host__ scalar mysin(float x){ return sin(x); }");
\endcode

The final feature is "Extra global parameters". These parameters are common to all neurons in the population and, unlike the standard neuron parameters, can be varied at runtime. This could, for example, be used to provide a global reward signal.
These parameters are defined by using the SET_EXTRA_GLOBAL_PARAMS() macro to specify a list of variable names and type strings (like the SET_VARS() macro). For example:
\code
SET_EXTRA_GLOBAL_PARAMS({{"R", "float"}});
\endcode

These variables are available to all neurons in the population. They can also be used in synaptic code snippets; in this case it need to be addressed with a `_pre` or `_post` postfix.

For example, if the model with the "R" parameter was used for the pre-synaptic neuron population, the weight update model of a synapse population could have simulation code like:
\code
SET_SIM_CODE("$(x)= $(x)+$(R_pre);");
\endcode
where we have assumed that the weight update model has a variable `x` and our synapse type will only be used in conjunction with pre-synaptic neuron populations that do have the extra global parameter `R`. If the pre-synaptic population does not have the required variable/parameter, GeNN will fail when compiling the kernels.

Once defined in this way, new neuron models classes, can be used in network descriptions by referring to their type e.g.
\code
networkModel.addNeuronPopulation<LeakyIntegrator>("Neurons", 1, 
                                                  LeakyIntegrator::ParamValues(20.0 /*tau*/),
                                                  LeakyIntegrator::VarValues(0.0/*V*/));
\endcode

\link sectDefiningNetwork Previous\endlink | \link UserManual Top\endlink | \link sectSynapseModels Next\endlink
*/

//----------------------------------------------------------------------------
/*! 
\page sectSynapseModels Weight update models

Currently 3 predefined weight update models are available: 
- WeightUpdateModels::StaticPulse
- WeightUpdateModels::StaticGraded
- WeightUpdateModels::PiecewiseSTDP

For more details about these built-in synapse models, see \cite Nowotny2010.

\section sect34 Defining a new weight update model

Like the neuron models discussed in \ref sect_own, new weight update models are created by defining a class.
Weight update models should all be derived from WeightUpdateModel::Base and, for convenience, the methods a new weight update model should implement can be implemented using macros:

- DECLARE_MODEL(TYPE, NUM_PARAMS, NUM_VARS), SET_PARAM_NAMES(), SET_VARS() and SET_EXTRA_GLOBAL_PARAMS() perform the same roles as they do in the neuron
  models discussed in \ref sect_own.
- SET_SIM_CODE(SIM_CODE): defines the simulation code that is used when a true spike is detected. The update is performed only in timesteps after a neuron in the presynaptic population has fulfilled its threshold detection condition.
Typically, spikes lead to update of synaptic variables that then lead to the activation of input into the post-synaptic neuron. Most of the time these inputs add linearly at the post-synaptic neuron. This is assumed in GeNN and the term to be added to the activation of the post-synaptic neuron should be assigned to the \$(addtoinsyn) variable. 
For example
\code
SET_SIM_CODE(
    "\$(addtoinsyn) = $(inc);\n"
    "\$(updatelinsyn)");
\endcode
where "inc" is a parameter of the weight update model that defines a constant increment of the synaptic input of a post-synaptic neuron for each pre-synaptic spike. Once \$(addtoinsyn) has been assigned, the \$(updatelinsyn) keyword should be used to indicate that the summation of synaptic inputs can now occur. This can then be followed by updates on the internal synapse variables that may have contributed to addtoinSyn. For an example, see WeightUpdateModels::StaticPulse for a simple synapse update model and WeightUpdateModels::PiecewiseSTDP for a more complicated model that uses STDP. 
- SET_EVENT_THRESHOLD_CONDITION_CODE(EVENT_THRESHOLD_CONDITION_CODE) defines a condition for a synaptic event. This typically involves the pre-synaptic variables, e.g. the membrane potential: 
\code
SET_EVENT_THRESHOLD_CONDITION_CODE("$(V_pre) > -0.02");
\endcode
Whenever this expression evaluates to true, the event code set using the SET_EVENT_CODE() macro is executed. For an example, see WeightUpdateModels::StaticGraded.

- SET_EVENT_CODE(EVENT_CODE) defines the code that is used when the event threshold condition is met (as set using the SET_EVENT_THRESHOLD_CONDITION_CODE() macro). 

- SET_LEARN_POST_CODE(LEARN_POST_CODE) defines the code which is used in the learnSynapsesPost kernel/function, which performs updates to synapses that are triggered by post-synaptic spikes. This is typically used in STDP-like models e.g. WeightUpdateModels::PiecewiseSTDP.

- SET_SYNAPSE_DYNAMICS_CODE(SYNAPSE_DYNAMICS_CODE) defines code that is run for each synapse, each timestep i.e. unlike the others it is not event driven. This can be used where synapses have internal variables and dynamics that are described in continuous time, e.g. by ODEs. However using this mechnanism is typically computationally very costly because of the large number of synapses in a typical network.
- SET_NEEDS_PRE_SPIKE_TIME(PRE_SPIKE_TIME_REQUIRED) and SET_NEEDS_POST_SPIKE_TIME(POST_SPIKE_TIME_REQUIRED) define whether the weight update needs to know the times of the spikes emitted from the pre and postsynaptic populations. For example an STDP rule would be likely to require:
\code
SET_NEEDS_PRE_SPIKE_TIME(true);
SET_NEEDS_POST_SPIKE_TIME(true);
\endcode

All code snippets can be used to manipulate any synapse variable and so implement both synaptic dynamics and learning processes.

\section subsect34 Conductance definition methods
The available options work as follows:
- \c INDIVIDUALG: When this option is chosen in the \c
addSynapsePopulation command, GeNN reserves an array of size n_pre x
n_post float for individual conductance values for each combination of
pre and postsynaptic neuron. The actual values of the conductances are
passed at runtime from the user side code, using the \c pushXXXXXToDevice
function, where XXXX is the name of the synapse population.

- \c GLOBALG: When this option is chosen, the value of the variables
  of the synapse model (including its conductance) is taken to be the
  initial value provided for the synapse model's variables. This
  option can only be sensibly combined with connectivity type
  ALLTOALL.

- \c INDIVIDUALID: When this option is chosen, GeNN expects to use the
same maximal conductance for all existing synaptic connections but
which synapses exist will be defined at runtime from the user side
code, provided as a binary array (see \ref ex_mbody).

\section subsect32 Connectivity types
Available options are \c DENSE and \c SPARSE. Various tools are provided under 
\ref userproject/tools for creating different connectivity schemes.

Different strategies are used by GeNN for different combinations of connecticity types and \ref subsect34, as explained in the table below:


|                       |  ALLTOALL                                            |  DENSE  |  SPARSE |
| ------------- |:-------------:|:-----:|:-----:|
| GLOBALG     |  Fixed values for all synapse members |    Fixed values for all synapse members   |  Fixed values for some synapse members (using sparse indexing)     |
| INDIVIDUALG |  Variable values for all synapse members | Variable values for all synapse members | Variable values for some synapse members |
| INDIVIDUALID | Fixed values for some synapse members (using a binary array). Technically possible but not meaningful.  | Fixed values for some synapse members (using a binary array) | N/A |


If \c INDIVIDUALG is used with \c ALLTOALL or \c DENSE connectivity (these are equivalent in this case), synapse variables are stored 
in an array of size npre * npost . 

If the connectivity is of SPARSE type, connectivity indices are stored in a 
struct named SparseProjection in order to minimize the memory requirements. The struct SparseProjection contains the
following members:
	1: unsigned int connN: number of connections in the population. This value is needed for allocation of arrays. 
	The indices that correspond to these values are defined in a pre-to-post basis by the following arrays:
	2: unsigned int ind, of size connN: Indices of corresponding postsynaptic neurons concatenated for each presynaptic neuron.
	3: unsigned int *indInG, of size \c model.neuronN[model.synapseSource[synInd]]+1: This array defines from which index in the synapse variable array the indices in ind would correspond to the presynaptic neuron that corresponds to the index of the indInG array, with the number of connections being the size of ind. More specifically, \c indIng[n+1]-indIng[n] would give the number of postsynaptic connections for neuron n. 
	
For example, consider a network of two presynaptic neurons connected to three postsynaptic neurons: 0th presynaptic neuron connected to 1st and 2nd postsynaptic neurons, the 1st presynaptic neuron connected to 0th and 2nd neurons. The struct SparseProjection should have these members, with indexing from 0:

	ConnN = 4

	ind= [1 2 0 2]

	indIng= [0 2 4]  


A synapse variable of a sparsely connected synapse will be kept in an array using this conductance for indexing. For example, a variable caled \c g will be kept in an array such as:
\c g=[g_Pre0-Post1 g_pre0-post2 g_pre1-post0 g_pre1-post2]
If there are no connections for a presynaptic neuron, then \c g[indIng[n]]=gp[indIng[n]+1].	 

 See tools/gen_syns_sparse_IzhModel used in Izh_sparse project to see a working example.	

\section sect_postsyn Postsynaptic integration methods

The postSynModel defines how synaptic activation translates into an input current (or other input term for models that are not current based). It also can contain equations defining dynamics that are applied to the (summed) synaptic activation, e.g. an exponential decay over time.

A postSynModel object consists of variables, parameters, derived parameters and two strings that define the code for current generation and continuous dynamics.

- string \c postSynDecay: This code defines the continuous time dynamics of the summed presynaptic inputs at the postsynaptic neuron. This usually consists of some kind of decay function. 

- string \c postSyntoCurrent: This code defines how the synaptic inputs lead to an input input current (Isyn) to the postsynaptic neuron. 

There are currently 2 built-in postsynaptic integration methods:
 
EXPDECAY: Exponential decay. Decay time constant and reversal potential parameters are needed for this postsynaptic mechanism.

This model has no variables and two parameters:

- \c tau : Decay time constant
- \c E : Reversal potential

\c tau is used by the derived parameter \c expdecay which returns expf(-dt/tau).
 
IZHIKEVICH_PS: Empty postsynaptic rule to be used with Izhikevich neurons.
<br />


-----
\link sectNeuronModels Previous\endlink | \link UserManual Top\endlink | \link Tutorial1 Next\endlink


*/

