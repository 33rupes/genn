# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.12
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    def swig_import_helper():
        import importlib
        pkg = __name__.rpartition('.')[0]
        mname = '.'.join((pkg, '_genn_wrapper')).lstrip('.')
        try:
            return importlib.import_module(mname)
        except ImportError:
            return importlib.import_module('_genn_wrapper')
    _genn_wrapper = swig_import_helper()
    del swig_import_helper
elif _swig_python_version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_genn_wrapper', [dirname(__file__)])
        except ImportError:
            import _genn_wrapper
            return _genn_wrapper
        try:
            _mod = imp.load_module('_genn_wrapper', fp, pathname, description)
        finally:
            if fp is not None:
                fp.close()
        return _mod
    _genn_wrapper = swig_import_helper()
    del swig_import_helper
else:
    import _genn_wrapper
del _swig_python_version_info

try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        if _newclass:
            object.__setattr__(self, name, value)
        else:
            self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr(self, class_type, name):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    raise AttributeError("'%s' object has no attribute '%s'" % (class_type.__name__, name))


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except __builtin__.Exception:
    class _object:
        pass
    _newclass = 0

try:
    import weakref
    weakref_proxy = weakref.proxy
except __builtin__.Exception:
    weakref_proxy = lambda x: x


from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import StlContainers
else:
    import StlContainers
del _swig_python_version_info

def initMPI_pygenn() -> "int":
    return _genn_wrapper.initMPI_pygenn()
initMPI_pygenn = _genn_wrapper.initMPI_pygenn

def is_cpu_only() -> "bool":
    return _genn_wrapper.is_cpu_only()
is_cpu_only = _genn_wrapper.is_cpu_only

def generate_model_runner_pygenn(model: 'NNmodel', path: 'std::string const &', localHostID: 'int') -> "void":
    return _genn_wrapper.generate_model_runner_pygenn(model, path, localHostID)
generate_model_runner_pygenn = _genn_wrapper.generate_model_runner_pygenn
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import NeuronModels
else:
    import NeuronModels
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import NewModels
else:
    import NewModels
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import Snippet
else:
    import Snippet
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import InitVarSnippet
else:
    import InitVarSnippet
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import PostsynapticModels
else:
    import PostsynapticModels
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import WeightUpdateModels
else:
    import WeightUpdateModels
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import CurrentSourceModels
else:
    import CurrentSourceModels
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import InitSparseConnectivitySnippet
else:
    import InitSparseConnectivitySnippet
del _swig_python_version_info
class NeuronGroup(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, NeuronGroup, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, NeuronGroup, name)
    __repr__ = _swig_repr

    def __init__(self, name: 'std::string const &', numNeurons: 'int', neuronModel: 'Base', params: 'DoubleVector', varInitialisers: 'VarInitVector', hostID: 'int', deviceID: 'int'):
        this = _genn_wrapper.new_NeuronGroup(name, numNeurons, neuronModel, params, varInitialisers, hostID, deviceID)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def check_num_delay_slots(self, requiredDelay: 'unsigned int') -> "void":
        return _genn_wrapper.NeuronGroup_check_num_delay_slots(self, requiredDelay)

    def update_pre_var_queues(self, code: 'std::string const &') -> "void":
        return _genn_wrapper.NeuronGroup_update_pre_var_queues(self, code)

    def update_post_var_queues(self, code: 'std::string const &') -> "void":
        return _genn_wrapper.NeuronGroup_update_post_var_queues(self, code)

    def set_spike_time_required(self, req: 'bool') -> "void":
        return _genn_wrapper.NeuronGroup_set_spike_time_required(self, req)

    def set_true_spike_required(self, req: 'bool') -> "void":
        return _genn_wrapper.NeuronGroup_set_true_spike_required(self, req)

    def set_spike_event_required(self, req: 'bool') -> "void":
        return _genn_wrapper.NeuronGroup_set_spike_event_required(self, req)

    def set_spike_zero_copy_enabled(self, enabled: 'bool') -> "void":
        return _genn_wrapper.NeuronGroup_set_spike_zero_copy_enabled(self, enabled)

    def set_spike_event_zero_copy_enabled(self, enabled: 'bool') -> "void":
        return _genn_wrapper.NeuronGroup_set_spike_event_zero_copy_enabled(self, enabled)

    def set_spike_time_zero_copy_enabled(self, enabled: 'bool') -> "void":
        return _genn_wrapper.NeuronGroup_set_spike_time_zero_copy_enabled(self, enabled)

    def set_var_zero_copy_enabled(self, varName: 'std::string const &', enabled: 'bool') -> "void":
        return _genn_wrapper.NeuronGroup_set_var_zero_copy_enabled(self, varName, enabled)

    def set_spike_var_mode(self, mode: 'VarMode') -> "void":
        return _genn_wrapper.NeuronGroup_set_spike_var_mode(self, mode)

    def set_spike_event_var_mode(self, mode: 'VarMode') -> "void":
        return _genn_wrapper.NeuronGroup_set_spike_event_var_mode(self, mode)

    def set_spike_time_var_mode(self, mode: 'VarMode') -> "void":
        return _genn_wrapper.NeuronGroup_set_spike_time_var_mode(self, mode)

    def set_var_mode(self, varName: 'std::string const &', mode: 'VarMode') -> "void":
        return _genn_wrapper.NeuronGroup_set_var_mode(self, varName, mode)

    def add_spk_event_condition(self, code: 'std::string const &', supportCodeNamespace: 'std::string const &') -> "void":
        return _genn_wrapper.NeuronGroup_add_spk_event_condition(self, code, supportCodeNamespace)

    def add_in_syn(self, synapseGroup: 'SynapseGroup') -> "void":
        return _genn_wrapper.NeuronGroup_add_in_syn(self, synapseGroup)

    def add_out_syn(self, synapseGroup: 'SynapseGroup') -> "void":
        return _genn_wrapper.NeuronGroup_add_out_syn(self, synapseGroup)

    def init_derived_params(self, dt: 'double') -> "void":
        return _genn_wrapper.NeuronGroup_init_derived_params(self, dt)

    def calc_sizes(self, blockSize: 'unsigned int', idStart: 'unsigned int &', paddedIDStart: 'unsigned int &') -> "void":
        return _genn_wrapper.NeuronGroup_calc_sizes(self, blockSize, idStart, paddedIDStart)

    def merge_incoming_psm(self) -> "void":
        return _genn_wrapper.NeuronGroup_merge_incoming_psm(self)

    def inject_current(self, source: 'CurrentSource') -> "void":
        return _genn_wrapper.NeuronGroup_inject_current(self, source)

    def get_name(self) -> "std::string const &":
        return _genn_wrapper.NeuronGroup_get_name(self)

    def get_num_neurons(self) -> "unsigned int":
        return _genn_wrapper.NeuronGroup_get_num_neurons(self)

    def get_padded_idrange(self) -> "std::pair< unsigned int,unsigned int > const &":
        return _genn_wrapper.NeuronGroup_get_padded_idrange(self)

    def get_idrange(self) -> "std::pair< unsigned int,unsigned int > const &":
        return _genn_wrapper.NeuronGroup_get_idrange(self)

    def get_neuron_model(self) -> "NeuronModels::Base const *":
        return _genn_wrapper.NeuronGroup_get_neuron_model(self)

    def get_params(self) -> "std::vector< double,std::allocator< double > > const &":
        return _genn_wrapper.NeuronGroup_get_params(self)

    def get_derived_params(self) -> "std::vector< double,std::allocator< double > > const &":
        return _genn_wrapper.NeuronGroup_get_derived_params(self)

    def get_var_initialisers(self) -> "std::vector< NewModels::VarInit,std::allocator< NewModels::VarInit > > const &":
        return _genn_wrapper.NeuronGroup_get_var_initialisers(self)

    def get_in_syn(self) -> "std::vector< SynapseGroup *,std::allocator< SynapseGroup * > > const &":
        return _genn_wrapper.NeuronGroup_get_in_syn(self)

    def get_merged_in_syn(self) -> "std::vector< std::pair< SynapseGroup *,std::vector< SynapseGroup *,std::allocator< SynapseGroup * > > >,std::allocator< std::pair< SynapseGroup *,std::vector< SynapseGroup *,std::allocator< SynapseGroup * > > > > > const &":
        return _genn_wrapper.NeuronGroup_get_merged_in_syn(self)

    def get_out_syn(self) -> "std::vector< SynapseGroup *,std::allocator< SynapseGroup * > > const &":
        return _genn_wrapper.NeuronGroup_get_out_syn(self)

    def get_current_sources(self) -> "std::vector< CurrentSource *,std::allocator< CurrentSource * > > const &":
        return _genn_wrapper.NeuronGroup_get_current_sources(self)

    def get_cluster_host_id(self) -> "int":
        return _genn_wrapper.NeuronGroup_get_cluster_host_id(self)

    def get_cluster_device_id(self) -> "int":
        return _genn_wrapper.NeuronGroup_get_cluster_device_id(self)

    def is_spike_time_required(self) -> "bool":
        return _genn_wrapper.NeuronGroup_is_spike_time_required(self)

    def is_true_spike_required(self) -> "bool":
        return _genn_wrapper.NeuronGroup_is_true_spike_required(self)

    def is_spike_event_required(self) -> "bool":
        return _genn_wrapper.NeuronGroup_is_spike_event_required(self)

    def is_var_queue_required(self, *args) -> "bool":
        return _genn_wrapper.NeuronGroup_is_var_queue_required(self, *args)

    def get_spike_event_condition(self) -> "std::set< std::pair< std::string,std::string > > const &":
        return _genn_wrapper.NeuronGroup_get_spike_event_condition(self)

    def get_num_delay_slots(self) -> "unsigned int":
        return _genn_wrapper.NeuronGroup_get_num_delay_slots(self)

    def is_delay_required(self) -> "bool":
        return _genn_wrapper.NeuronGroup_is_delay_required(self)

    def is_spike_zero_copy_enabled(self) -> "bool":
        return _genn_wrapper.NeuronGroup_is_spike_zero_copy_enabled(self)

    def is_spike_event_zero_copy_enabled(self) -> "bool":
        return _genn_wrapper.NeuronGroup_is_spike_event_zero_copy_enabled(self)

    def is_spike_time_zero_copy_enabled(self) -> "bool":
        return _genn_wrapper.NeuronGroup_is_spike_time_zero_copy_enabled(self)

    def is_zero_copy_enabled(self) -> "bool":
        return _genn_wrapper.NeuronGroup_is_zero_copy_enabled(self)

    def is_var_zero_copy_enabled(self, var: 'std::string const &') -> "bool":
        return _genn_wrapper.NeuronGroup_is_var_zero_copy_enabled(self, var)

    def get_spike_var_mode(self) -> "VarMode":
        return _genn_wrapper.NeuronGroup_get_spike_var_mode(self)

    def get_spike_event_var_mode(self) -> "VarMode":
        return _genn_wrapper.NeuronGroup_get_spike_event_var_mode(self)

    def get_spike_time_var_mode(self) -> "VarMode":
        return _genn_wrapper.NeuronGroup_get_spike_time_var_mode(self)

    def get_var_mode(self, *args) -> "VarMode":
        return _genn_wrapper.NeuronGroup_get_var_mode(self, *args)

    def is_param_required_by_spike_event_condition(self, pnamefull: 'std::string const &') -> "bool":
        return _genn_wrapper.NeuronGroup_is_param_required_by_spike_event_condition(self, pnamefull)

    def add_extra_global_params(self, kernelParameters: 'std::map< std::string,std::string > &') -> "void":
        return _genn_wrapper.NeuronGroup_add_extra_global_params(self, kernelParameters)

    def is_init_code_required(self) -> "bool":
        return _genn_wrapper.NeuronGroup_is_init_code_required(self)

    def is_sim_rngrequired(self) -> "bool":
        return _genn_wrapper.NeuronGroup_is_sim_rngrequired(self)

    def is_init_rngrequired(self, varInitMode: 'VarInit') -> "bool":
        return _genn_wrapper.NeuronGroup_is_init_rngrequired(self, varInitMode)

    def is_device_var_init_required(self) -> "bool":
        return _genn_wrapper.NeuronGroup_is_device_var_init_required(self)

    def is_device_init_required(self) -> "bool":
        return _genn_wrapper.NeuronGroup_is_device_init_required(self)

    def can_run_on_cpu(self) -> "bool":
        return _genn_wrapper.NeuronGroup_can_run_on_cpu(self)

    def has_output_to_host(self, targetHostID: 'int') -> "bool":
        return _genn_wrapper.NeuronGroup_has_output_to_host(self, targetHostID)

    def get_current_queue_offset(self, devPrefix: 'std::string const &') -> "std::string":
        return _genn_wrapper.NeuronGroup_get_current_queue_offset(self, devPrefix)

    def get_prev_queue_offset(self, devPrefix: 'std::string const &') -> "std::string":
        return _genn_wrapper.NeuronGroup_get_prev_queue_offset(self, devPrefix)
    __swig_destroy__ = _genn_wrapper.delete_NeuronGroup
    __del__ = lambda self: None
NeuronGroup_swigregister = _genn_wrapper.NeuronGroup_swigregister
NeuronGroup_swigregister(NeuronGroup)

class SynapseGroup(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SynapseGroup, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SynapseGroup, name)
    __repr__ = _swig_repr

    def __init__(self, name: 'std::string const', matrixType: 'SynapseMatrixType', delaySteps: 'unsigned int', wu: 'Base', wuParams: 'DoubleVector', wuVarInitialisers: 'VarInitVector', wuPreVarInitialisers: 'VarInitVector', wuPostVarInitialisers: 'VarInitVector', ps: 'Base', psParams: 'DoubleVector', psVarInitialisers: 'VarInitVector', srcNeuronGroup: 'NeuronGroup', trgNeuronGroup: 'NeuronGroup', connectivityInitialiser: 'Init'):
        this = _genn_wrapper.new_SynapseGroup(name, matrixType, delaySteps, wu, wuParams, wuVarInitialisers, wuPreVarInitialisers, wuPostVarInitialisers, ps, psParams, psVarInitialisers, srcNeuronGroup, trgNeuronGroup, connectivityInitialiser)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    SpanType_POSTSYNAPTIC = _genn_wrapper.SynapseGroup_SpanType_POSTSYNAPTIC
    SpanType_PRESYNAPTIC = _genn_wrapper.SynapseGroup_SpanType_PRESYNAPTIC

    def set_true_spike_required(self, req: 'bool') -> "void":
        return _genn_wrapper.SynapseGroup_set_true_spike_required(self, req)

    def set_spike_event_required(self, req: 'bool') -> "void":
        return _genn_wrapper.SynapseGroup_set_spike_event_required(self, req)

    def set_event_threshold_re_test_required(self, req: 'bool') -> "void":
        return _genn_wrapper.SynapseGroup_set_event_threshold_re_test_required(self, req)

    def set_psmodel_merge_target(self, targetName: 'std::string const &') -> "void":
        return _genn_wrapper.SynapseGroup_set_psmodel_merge_target(self, targetName)

    def set_wuvar_zero_copy_enabled(self, varName: 'std::string const &', enabled: 'bool') -> "void":
        return _genn_wrapper.SynapseGroup_set_wuvar_zero_copy_enabled(self, varName, enabled)

    def set_psvar_zero_copy_enabled(self, varName: 'std::string const &', enabled: 'bool') -> "void":
        return _genn_wrapper.SynapseGroup_set_psvar_zero_copy_enabled(self, varName, enabled)

    def set_wuvar_mode(self, varName: 'std::string const &', mode: 'VarMode') -> "void":
        return _genn_wrapper.SynapseGroup_set_wuvar_mode(self, varName, mode)

    def set_wupre_var_mode(self, varName: 'std::string const &', mode: 'VarMode') -> "void":
        return _genn_wrapper.SynapseGroup_set_wupre_var_mode(self, varName, mode)

    def set_wupost_var_mode(self, varName: 'std::string const &', mode: 'VarMode') -> "void":
        return _genn_wrapper.SynapseGroup_set_wupost_var_mode(self, varName, mode)

    def set_psvar_mode(self, varName: 'std::string const &', mode: 'VarMode') -> "void":
        return _genn_wrapper.SynapseGroup_set_psvar_mode(self, varName, mode)

    def set_in_syn_var_mode(self, mode: 'VarMode') -> "void":
        return _genn_wrapper.SynapseGroup_set_in_syn_var_mode(self, mode)

    def set_sparse_connectivity_var_mode(self, mode: 'VarMode') -> "void":
        return _genn_wrapper.SynapseGroup_set_sparse_connectivity_var_mode(self, mode)

    def set_dendritic_delay_var_mode(self, mode: 'VarMode') -> "void":
        return _genn_wrapper.SynapseGroup_set_dendritic_delay_var_mode(self, mode)

    def set_max_connections(self, maxConnections: 'unsigned int') -> "void":
        return _genn_wrapper.SynapseGroup_set_max_connections(self, maxConnections)

    def set_max_source_connections(self, maxPostConnections: 'unsigned int') -> "void":
        return _genn_wrapper.SynapseGroup_set_max_source_connections(self, maxPostConnections)

    def set_max_dendritic_delay_timesteps(self, maxDendriticDelay: 'unsigned int') -> "void":
        return _genn_wrapper.SynapseGroup_set_max_dendritic_delay_timesteps(self, maxDendriticDelay)

    def set_span_type(self, spanType: 'SynapseGroup::SpanType') -> "void":
        return _genn_wrapper.SynapseGroup_set_span_type(self, spanType)

    def set_back_prop_delay_steps(self, timesteps: 'unsigned int') -> "void":
        return _genn_wrapper.SynapseGroup_set_back_prop_delay_steps(self, timesteps)

    def init_derived_params(self, dt: 'double') -> "void":
        return _genn_wrapper.SynapseGroup_init_derived_params(self, dt)

    def calc_kernel_sizes(self, blockSize: 'unsigned int', paddedKernelIDStart: 'unsigned int &') -> "void":
        return _genn_wrapper.SynapseGroup_calc_kernel_sizes(self, blockSize, paddedKernelIDStart)

    def get_padded_kernel_idrange(self) -> "std::pair< unsigned int,unsigned int >":
        return _genn_wrapper.SynapseGroup_get_padded_kernel_idrange(self)

    def get_name(self) -> "std::string const &":
        return _genn_wrapper.SynapseGroup_get_name(self)

    def get_span_type(self) -> "SynapseGroup::SpanType":
        return _genn_wrapper.SynapseGroup_get_span_type(self)

    def get_delay_steps(self) -> "unsigned int":
        return _genn_wrapper.SynapseGroup_get_delay_steps(self)

    def get_back_prop_delay_steps(self) -> "unsigned int":
        return _genn_wrapper.SynapseGroup_get_back_prop_delay_steps(self)

    def get_max_connections(self) -> "unsigned int":
        return _genn_wrapper.SynapseGroup_get_max_connections(self)

    def get_max_source_connections(self) -> "unsigned int":
        return _genn_wrapper.SynapseGroup_get_max_source_connections(self)

    def get_max_dendritic_delay_timesteps(self) -> "unsigned int":
        return _genn_wrapper.SynapseGroup_get_max_dendritic_delay_timesteps(self)

    def get_matrix_type(self) -> "SynapseMatrixType":
        return _genn_wrapper.SynapseGroup_get_matrix_type(self)

    def get_in_syn_var_mode(self) -> "VarMode":
        return _genn_wrapper.SynapseGroup_get_in_syn_var_mode(self)

    def get_sparse_connectivity_var_mode(self) -> "VarMode":
        return _genn_wrapper.SynapseGroup_get_sparse_connectivity_var_mode(self)

    def get_dendritic_delay_var_mode(self) -> "VarMode":
        return _genn_wrapper.SynapseGroup_get_dendritic_delay_var_mode(self)

    def get_padded_dyn_kernel_size(self, blockSize: 'unsigned int') -> "unsigned int":
        return _genn_wrapper.SynapseGroup_get_padded_dyn_kernel_size(self, blockSize)

    def get_padded_post_learn_kernel_size(self, blockSize: 'unsigned int') -> "unsigned int":
        return _genn_wrapper.SynapseGroup_get_padded_post_learn_kernel_size(self, blockSize)

    def get_src_neuron_group(self, *args) -> "NeuronGroup const *":
        return _genn_wrapper.SynapseGroup_get_src_neuron_group(self, *args)

    def get_trg_neuron_group(self, *args) -> "NeuronGroup const *":
        return _genn_wrapper.SynapseGroup_get_trg_neuron_group(self, *args)

    def get_cluster_host_id(self) -> "int":
        return _genn_wrapper.SynapseGroup_get_cluster_host_id(self)

    def get_cluster_device_id(self) -> "int":
        return _genn_wrapper.SynapseGroup_get_cluster_device_id(self)

    def is_true_spike_required(self) -> "bool":
        return _genn_wrapper.SynapseGroup_is_true_spike_required(self)

    def is_spike_event_required(self) -> "bool":
        return _genn_wrapper.SynapseGroup_is_spike_event_required(self)

    def is_event_threshold_re_test_required(self) -> "bool":
        return _genn_wrapper.SynapseGroup_is_event_threshold_re_test_required(self)

    def get_wumodel(self) -> "WeightUpdateModels::Base const *":
        return _genn_wrapper.SynapseGroup_get_wumodel(self)

    def get_wuparams(self) -> "std::vector< double,std::allocator< double > > const &":
        return _genn_wrapper.SynapseGroup_get_wuparams(self)

    def get_wuderived_params(self) -> "std::vector< double,std::allocator< double > > const &":
        return _genn_wrapper.SynapseGroup_get_wuderived_params(self)

    def get_wuvar_initialisers(self) -> "std::vector< NewModels::VarInit,std::allocator< NewModels::VarInit > > const &":
        return _genn_wrapper.SynapseGroup_get_wuvar_initialisers(self)

    def get_wupre_var_initialisers(self) -> "std::vector< NewModels::VarInit,std::allocator< NewModels::VarInit > > const &":
        return _genn_wrapper.SynapseGroup_get_wupre_var_initialisers(self)

    def get_wupost_var_initialisers(self) -> "std::vector< NewModels::VarInit,std::allocator< NewModels::VarInit > > const &":
        return _genn_wrapper.SynapseGroup_get_wupost_var_initialisers(self)

    def get_wuconst_init_vals(self) -> "std::vector< double,std::allocator< double > > const":
        return _genn_wrapper.SynapseGroup_get_wuconst_init_vals(self)

    def get_psmodel(self) -> "PostsynapticModels::Base const *":
        return _genn_wrapper.SynapseGroup_get_psmodel(self)

    def get_psparams(self) -> "std::vector< double,std::allocator< double > > const &":
        return _genn_wrapper.SynapseGroup_get_psparams(self)

    def get_psderived_params(self) -> "std::vector< double,std::allocator< double > > const &":
        return _genn_wrapper.SynapseGroup_get_psderived_params(self)

    def get_psvar_initialisers(self) -> "std::vector< NewModels::VarInit,std::allocator< NewModels::VarInit > > const &":
        return _genn_wrapper.SynapseGroup_get_psvar_initialisers(self)

    def get_psconst_init_vals(self) -> "std::vector< double,std::allocator< double > > const":
        return _genn_wrapper.SynapseGroup_get_psconst_init_vals(self)

    def get_connectivity_initialiser(self) -> "InitSparseConnectivitySnippet::Init const &":
        return _genn_wrapper.SynapseGroup_get_connectivity_initialiser(self)

    def get_psmodel_target_name(self) -> "std::string const &":
        return _genn_wrapper.SynapseGroup_get_psmodel_target_name(self)

    def is_psmodel_merged(self) -> "bool":
        return _genn_wrapper.SynapseGroup_is_psmodel_merged(self)

    def is_zero_copy_enabled(self) -> "bool":
        return _genn_wrapper.SynapseGroup_is_zero_copy_enabled(self)

    def is_wuvar_zero_copy_enabled(self, var: 'std::string const &') -> "bool":
        return _genn_wrapper.SynapseGroup_is_wuvar_zero_copy_enabled(self, var)

    def is_psvar_zero_copy_enabled(self, var: 'std::string const &') -> "bool":
        return _genn_wrapper.SynapseGroup_is_psvar_zero_copy_enabled(self, var)

    def get_wuvar_mode(self, *args) -> "VarMode":
        return _genn_wrapper.SynapseGroup_get_wuvar_mode(self, *args)

    def get_wupre_var_mode(self, *args) -> "VarMode":
        return _genn_wrapper.SynapseGroup_get_wupre_var_mode(self, *args)

    def get_wupost_var_mode(self, *args) -> "VarMode":
        return _genn_wrapper.SynapseGroup_get_wupost_var_mode(self, *args)

    def get_psvar_mode(self, *args) -> "VarMode":
        return _genn_wrapper.SynapseGroup_get_psvar_mode(self, *args)

    def add_extra_global_connectivity_initialiser_params(self, kernelParameters: 'std::map< string,string > &') -> "void":
        return _genn_wrapper.SynapseGroup_add_extra_global_connectivity_initialiser_params(self, kernelParameters)

    def add_extra_global_neuron_params(self, kernelParameters: 'std::map< string,string > &') -> "void":
        return _genn_wrapper.SynapseGroup_add_extra_global_neuron_params(self, kernelParameters)

    def add_extra_global_synapse_params(self, kernelParameters: 'std::map< string,string > &') -> "void":
        return _genn_wrapper.SynapseGroup_add_extra_global_synapse_params(self, kernelParameters)

    def add_extra_global_post_learn_params(self, kernelParameters: 'std::map< string,string > &') -> "void":
        return _genn_wrapper.SynapseGroup_add_extra_global_post_learn_params(self, kernelParameters)

    def add_extra_global_synapse_dynamics_params(self, kernelParameters: 'std::map< string,string > &') -> "void":
        return _genn_wrapper.SynapseGroup_add_extra_global_synapse_dynamics_params(self, kernelParameters)

    def get_presynaptic_axonal_delay_slot(self, devPrefix: 'std::string const &') -> "std::string":
        return _genn_wrapper.SynapseGroup_get_presynaptic_axonal_delay_slot(self, devPrefix)

    def get_postsynaptic_back_prop_delay_slot(self, devPrefix: 'std::string const &') -> "std::string":
        return _genn_wrapper.SynapseGroup_get_postsynaptic_back_prop_delay_slot(self, devPrefix)

    def get_dendritic_delay_offset(self, *args) -> "std::string":
        return _genn_wrapper.SynapseGroup_get_dendritic_delay_offset(self, *args)

    def is_dendritic_delay_required(self) -> "bool":
        return _genn_wrapper.SynapseGroup_is_dendritic_delay_required(self)

    def is_psinit_rngrequired(self, varInitMode: 'VarInit') -> "bool":
        return _genn_wrapper.SynapseGroup_is_psinit_rngrequired(self, varInitMode)

    def is_wuinit_rngrequired(self, varInitMode: 'VarInit') -> "bool":
        return _genn_wrapper.SynapseGroup_is_wuinit_rngrequired(self, varInitMode)

    def is_psdevice_var_init_required(self) -> "bool":
        return _genn_wrapper.SynapseGroup_is_psdevice_var_init_required(self)

    def is_wudevice_var_init_required(self) -> "bool":
        return _genn_wrapper.SynapseGroup_is_wudevice_var_init_required(self)

    def is_wudevice_pre_var_init_required(self) -> "bool":
        return _genn_wrapper.SynapseGroup_is_wudevice_pre_var_init_required(self)

    def is_wudevice_post_var_init_required(self) -> "bool":
        return _genn_wrapper.SynapseGroup_is_wudevice_post_var_init_required(self)

    def is_device_sparse_connectivity_init_required(self) -> "bool":
        return _genn_wrapper.SynapseGroup_is_device_sparse_connectivity_init_required(self)

    def is_device_init_required(self) -> "bool":
        return _genn_wrapper.SynapseGroup_is_device_init_required(self)

    def is_device_sparse_init_required(self) -> "bool":
        return _genn_wrapper.SynapseGroup_is_device_sparse_init_required(self)

    def can_run_on_cpu(self) -> "bool":
        return _genn_wrapper.SynapseGroup_can_run_on_cpu(self)
    __swig_destroy__ = _genn_wrapper.delete_SynapseGroup
    __del__ = lambda self: None
SynapseGroup_swigregister = _genn_wrapper.SynapseGroup_swigregister
SynapseGroup_swigregister(SynapseGroup)

class CurrentSource(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, CurrentSource, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, CurrentSource, name)
    __repr__ = _swig_repr

    def __init__(self, name: 'std::string const &', currentSourceModel: 'Base', params: 'DoubleVector', varInitialisers: 'VarInitVector'):
        this = _genn_wrapper.new_CurrentSource(name, currentSourceModel, params, varInitialisers)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def set_var_mode(self, varName: 'std::string const &', mode: 'VarMode') -> "void":
        return _genn_wrapper.CurrentSource_set_var_mode(self, varName, mode)

    def init_derived_params(self, dt: 'double') -> "void":
        return _genn_wrapper.CurrentSource_init_derived_params(self, dt)

    def get_name(self) -> "std::string const &":
        return _genn_wrapper.CurrentSource_get_name(self)

    def get_current_source_model(self) -> "CurrentSourceModels::Base const *":
        return _genn_wrapper.CurrentSource_get_current_source_model(self)

    def get_params(self) -> "std::vector< double,std::allocator< double > > const &":
        return _genn_wrapper.CurrentSource_get_params(self)

    def get_derived_params(self) -> "std::vector< double,std::allocator< double > > const &":
        return _genn_wrapper.CurrentSource_get_derived_params(self)

    def get_var_initialisers(self) -> "std::vector< NewModels::VarInit,std::allocator< NewModels::VarInit > > const &":
        return _genn_wrapper.CurrentSource_get_var_initialisers(self)

    def get_var_mode(self, *args) -> "VarMode":
        return _genn_wrapper.CurrentSource_get_var_mode(self, *args)

    def add_extra_global_params(self, kernelParameters: 'std::map< std::string,std::string > &') -> "void":
        return _genn_wrapper.CurrentSource_add_extra_global_params(self, kernelParameters)

    def is_init_code_required(self) -> "bool":
        return _genn_wrapper.CurrentSource_is_init_code_required(self)

    def is_sim_rngrequired(self) -> "bool":
        return _genn_wrapper.CurrentSource_is_sim_rngrequired(self)

    def is_init_rngrequired(self, varInitMode: 'VarInit') -> "bool":
        return _genn_wrapper.CurrentSource_is_init_rngrequired(self, varInitMode)

    def is_device_var_init_required(self) -> "bool":
        return _genn_wrapper.CurrentSource_is_device_var_init_required(self)

    def can_run_on_cpu(self) -> "bool":
        return _genn_wrapper.CurrentSource_can_run_on_cpu(self)
    __swig_destroy__ = _genn_wrapper.delete_CurrentSource
    __del__ = lambda self: None
CurrentSource_swigregister = _genn_wrapper.CurrentSource_swigregister
CurrentSource_swigregister(CurrentSource)


def init_ge_nn() -> "void":
    return _genn_wrapper.init_ge_nn()
init_ge_nn = _genn_wrapper.init_ge_nn
NO_DELAY = _genn_wrapper.NO_DELAY
NOLEARNING = _genn_wrapper.NOLEARNING
LEARNING = _genn_wrapper.LEARNING
EXITSYN = _genn_wrapper.EXITSYN
INHIBSYN = _genn_wrapper.INHIBSYN
CPU = _genn_wrapper.CPU
GPU = _genn_wrapper.GPU
GENN_FLOAT = _genn_wrapper.GENN_FLOAT
GENN_DOUBLE = _genn_wrapper.GENN_DOUBLE
GENN_LONG_DOUBLE = _genn_wrapper.GENN_LONG_DOUBLE
TimePrecision_DEFAULT = _genn_wrapper.TimePrecision_DEFAULT
TimePrecision_FLOAT = _genn_wrapper.TimePrecision_FLOAT
TimePrecision_DOUBLE = _genn_wrapper.TimePrecision_DOUBLE
AUTODEVICE = _genn_wrapper.AUTODEVICE

def uninitialised_var() -> "NewModels::VarInit":
    return _genn_wrapper.uninitialised_var()
uninitialised_var = _genn_wrapper.uninitialised_var

def uninitialised_connectivity() -> "InitSparseConnectivitySnippet::Init":
    return _genn_wrapper.uninitialised_connectivity()
uninitialised_connectivity = _genn_wrapper.uninitialised_connectivity
class NNmodel(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, NNmodel, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, NNmodel, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _genn_wrapper.new_NNmodel()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _genn_wrapper.delete_NNmodel
    __del__ = lambda self: None

    def set_name(self, arg2: 'std::string const &') -> "void":
        return _genn_wrapper.NNmodel_set_name(self, arg2)

    def set_precision(self, arg2: 'FloatType') -> "void":
        return _genn_wrapper.NNmodel_set_precision(self, arg2)

    def set_time_precision(self, timePrecision: 'TimePrecision') -> "void":
        return _genn_wrapper.NNmodel_set_time_precision(self, timePrecision)

    def set_dt(self, arg2: 'double') -> "void":
        return _genn_wrapper.NNmodel_set_dt(self, arg2)

    def set_timing(self, arg2: 'bool') -> "void":
        return _genn_wrapper.NNmodel_set_timing(self, arg2)

    def set_seed(self, arg2: 'unsigned int') -> "void":
        return _genn_wrapper.NNmodel_set_seed(self, arg2)

    def set_rntype(self, type: 'std::string const &') -> "void":
        return _genn_wrapper.NNmodel_set_rntype(self, type)

    def scalar_expr(self, arg2: 'double const') -> "std::string":
        return _genn_wrapper.NNmodel_scalar_expr(self, arg2)

    def set_population_sums(self) -> "void":
        return _genn_wrapper.NNmodel_set_population_sums(self)

    def finalize(self) -> "void":
        return _genn_wrapper.NNmodel_finalize(self)

    def zero_copy_in_use(self) -> "bool":
        return _genn_wrapper.NNmodel_zero_copy_in_use(self)

    def get_num_pre_synapse_reset_required_groups(self) -> "unsigned int":
        return _genn_wrapper.NNmodel_get_num_pre_synapse_reset_required_groups(self)

    def is_pre_synapse_reset_required(self) -> "bool":
        return _genn_wrapper.NNmodel_is_pre_synapse_reset_required(self)

    def is_host_rngrequired(self) -> "bool":
        return _genn_wrapper.NNmodel_is_host_rngrequired(self)

    def is_device_rngrequired(self) -> "bool":
        return _genn_wrapper.NNmodel_is_device_rngrequired(self)

    def can_run_on_cpu(self) -> "bool":
        return _genn_wrapper.NNmodel_can_run_on_cpu(self)

    def get_name(self) -> "std::string const &":
        return _genn_wrapper.NNmodel_get_name(self)

    def get_precision(self) -> "std::string const &":
        return _genn_wrapper.NNmodel_get_precision(self)

    def get_time_precision(self) -> "std::string":
        return _genn_wrapper.NNmodel_get_time_precision(self)

    def get_reset_kernel(self) -> "unsigned int":
        return _genn_wrapper.NNmodel_get_reset_kernel(self)

    def get_dt(self) -> "double":
        return _genn_wrapper.NNmodel_get_dt(self)

    def get_seed(self) -> "unsigned int":
        return _genn_wrapper.NNmodel_get_seed(self)

    def get_rntype(self) -> "std::string const &":
        return _genn_wrapper.NNmodel_get_rntype(self)

    def is_finalized(self) -> "bool":
        return _genn_wrapper.NNmodel_is_finalized(self)

    def is_timing_enabled(self) -> "bool":
        return _genn_wrapper.NNmodel_is_timing_enabled(self)

    def get_generated_code_path(self, path: 'std::string const &', filename: 'std::string const &') -> "std::string":
        return _genn_wrapper.NNmodel_get_generated_code_path(self, path, filename)

    def get_init_kernel_parameters(self) -> "map< std::string,std::string > const &":
        return _genn_wrapper.NNmodel_get_init_kernel_parameters(self)

    def is_device_init_required(self, localHostID: 'int') -> "bool":
        return _genn_wrapper.NNmodel_is_device_init_required(self, localHostID)

    def is_device_sparse_init_required(self) -> "bool":
        return _genn_wrapper.NNmodel_is_device_sparse_init_required(self)

    def get_local_neuron_groups(self) -> "map< std::string,NeuronGroup > const &":
        return _genn_wrapper.NNmodel_get_local_neuron_groups(self)

    def get_remote_neuron_groups(self) -> "map< std::string,NeuronGroup > const &":
        return _genn_wrapper.NNmodel_get_remote_neuron_groups(self)

    def get_neuron_kernel_parameters(self) -> "map< std::string,std::string > const &":
        return _genn_wrapper.NNmodel_get_neuron_kernel_parameters(self)

    def get_neuron_grid_size(self) -> "unsigned int":
        return _genn_wrapper.NNmodel_get_neuron_grid_size(self)

    def get_num_local_neurons(self) -> "unsigned int":
        return _genn_wrapper.NNmodel_get_num_local_neurons(self)

    def get_num_remote_neurons(self) -> "unsigned int":
        return _genn_wrapper.NNmodel_get_num_remote_neurons(self)

    def get_num_neurons(self) -> "unsigned int":
        return _genn_wrapper.NNmodel_get_num_neurons(self)

    def find_neuron_group(self, *args) -> "NeuronGroup *":
        return _genn_wrapper.NNmodel_find_neuron_group(self, *args)

    def addNeuronPopulation(self, *args) -> "NeuronGroup *":
        return _genn_wrapper.NNmodel_addNeuronPopulation(self, *args)

    def set_neuron_cluster_index(self, neuronGroup: 'std::string const &', hostID: 'int', deviceID: 'int') -> "void":
        return _genn_wrapper.NNmodel_set_neuron_cluster_index(self, neuronGroup, hostID, deviceID)

    def activate_direct_input(self, arg2: 'std::string const &', type: 'unsigned int') -> "void":
        return _genn_wrapper.NNmodel_activate_direct_input(self, arg2, type)

    def set_const_inp(self, arg2: 'std::string const &', arg3: 'double') -> "void":
        return _genn_wrapper.NNmodel_set_const_inp(self, arg2, arg3)

    def get_local_synapse_groups(self) -> "map< std::string,SynapseGroup > const &":
        return _genn_wrapper.NNmodel_get_local_synapse_groups(self)

    def get_remote_synapse_groups(self) -> "map< std::string,SynapseGroup > const &":
        return _genn_wrapper.NNmodel_get_remote_synapse_groups(self)

    def get_synapse_post_learn_groups(self) -> "map< std::string,std::pair< unsigned int,unsigned int > > const &":
        return _genn_wrapper.NNmodel_get_synapse_post_learn_groups(self)

    def get_synapse_dynamics_groups(self) -> "map< std::string,std::pair< unsigned int,unsigned int > > const &":
        return _genn_wrapper.NNmodel_get_synapse_dynamics_groups(self)

    def get_synapse_kernel_parameters(self) -> "map< std::string,std::string > const &":
        return _genn_wrapper.NNmodel_get_synapse_kernel_parameters(self)

    def get_sim_learn_post_kernel_parameters(self) -> "map< std::string,std::string > const &":
        return _genn_wrapper.NNmodel_get_sim_learn_post_kernel_parameters(self)

    def get_synapse_dynamics_kernel_parameters(self) -> "map< std::string,std::string > const &":
        return _genn_wrapper.NNmodel_get_synapse_dynamics_kernel_parameters(self)

    def get_synapse_kernel_grid_size(self) -> "unsigned int":
        return _genn_wrapper.NNmodel_get_synapse_kernel_grid_size(self)

    def get_synapse_post_learn_grid_size(self) -> "unsigned int":
        return _genn_wrapper.NNmodel_get_synapse_post_learn_grid_size(self)

    def get_synapse_dynamics_grid_size(self) -> "unsigned int":
        return _genn_wrapper.NNmodel_get_synapse_dynamics_grid_size(self)

    def find_synapse_group(self, *args) -> "SynapseGroup *":
        return _genn_wrapper.NNmodel_find_synapse_group(self, *args)

    def is_synapse_group_dynamics_required(self, name: 'std::string const &') -> "bool":
        return _genn_wrapper.NNmodel_is_synapse_group_dynamics_required(self, name)

    def is_synapse_group_post_learning_required(self, name: 'std::string const &') -> "bool":
        return _genn_wrapper.NNmodel_is_synapse_group_post_learning_required(self, name)

    def addSynapsePopulation(self, *args) -> "SynapseGroup *":
        return _genn_wrapper.NNmodel_addSynapsePopulation(self, *args)

    def set_synapse_g(self, arg2: 'std::string const &', arg3: 'double') -> "void":
        return _genn_wrapper.NNmodel_set_synapse_g(self, arg2, arg3)

    def set_max_conn(self, arg2: 'std::string const &', arg3: 'unsigned int') -> "void":
        return _genn_wrapper.NNmodel_set_max_conn(self, arg2, arg3)

    def set_span_type_to_pre(self, arg2: 'std::string const &') -> "void":
        return _genn_wrapper.NNmodel_set_span_type_to_pre(self, arg2)

    def get_local_current_sources(self) -> "map< std::string,CurrentSource > const &":
        return _genn_wrapper.NNmodel_get_local_current_sources(self)

    def get_remote_current_sources(self) -> "map< std::string,CurrentSource > const &":
        return _genn_wrapper.NNmodel_get_remote_current_sources(self)

    def get_current_source_kernel_parameters(self) -> "map< std::string,std::string > const &":
        return _genn_wrapper.NNmodel_get_current_source_kernel_parameters(self)

    def find_current_source(self, *args) -> "CurrentSource *":
        return _genn_wrapper.NNmodel_find_current_source(self, *args)

    def add_neuron_population_RulkovMap(self, *args) -> "NeuronGroup *":
        return _genn_wrapper.NNmodel_add_neuron_population_RulkovMap(self, *args)

    def add_neuron_population_Izhikevich(self, *args) -> "NeuronGroup *":
        return _genn_wrapper.NNmodel_add_neuron_population_Izhikevich(self, *args)

    def add_neuron_population_IzhikevichVariable(self, *args) -> "NeuronGroup *":
        return _genn_wrapper.NNmodel_add_neuron_population_IzhikevichVariable(self, *args)

    def add_neuron_population_SpikeSource(self, *args) -> "NeuronGroup *":
        return _genn_wrapper.NNmodel_add_neuron_population_SpikeSource(self, *args)

    def add_neuron_population_SpikeSourceArray(self, *args) -> "NeuronGroup *":
        return _genn_wrapper.NNmodel_add_neuron_population_SpikeSourceArray(self, *args)

    def add_neuron_population_Poisson(self, *args) -> "NeuronGroup *":
        return _genn_wrapper.NNmodel_add_neuron_population_Poisson(self, *args)

    def add_neuron_population_PoissonNew(self, *args) -> "NeuronGroup *":
        return _genn_wrapper.NNmodel_add_neuron_population_PoissonNew(self, *args)

    def add_neuron_population_TraubMiles(self, *args) -> "NeuronGroup *":
        return _genn_wrapper.NNmodel_add_neuron_population_TraubMiles(self, *args)

    def add_neuron_population_TraubMilesFast(self, *args) -> "NeuronGroup *":
        return _genn_wrapper.NNmodel_add_neuron_population_TraubMilesFast(self, *args)

    def add_neuron_population_TraubMilesAlt(self, *args) -> "NeuronGroup *":
        return _genn_wrapper.NNmodel_add_neuron_population_TraubMilesAlt(self, *args)

    def add_neuron_population_TraubMilesNStep(self, *args) -> "NeuronGroup *":
        return _genn_wrapper.NNmodel_add_neuron_population_TraubMilesNStep(self, *args)

    def add_neuron_population_Custom(self, *args) -> "NeuronGroup *":
        return _genn_wrapper.NNmodel_add_neuron_population_Custom(self, *args)

    def add_synapse_population_StaticPulse_ExpCond(self, *args) -> "SynapseGroup *":
        return _genn_wrapper.NNmodel_add_synapse_population_StaticPulse_ExpCond(self, *args)

    def add_synapse_population_StaticPulseDendriticDelay_ExpCond(self, *args) -> "SynapseGroup *":
        return _genn_wrapper.NNmodel_add_synapse_population_StaticPulseDendriticDelay_ExpCond(self, *args)

    def add_synapse_population_StaticGraded_ExpCond(self, *args) -> "SynapseGroup *":
        return _genn_wrapper.NNmodel_add_synapse_population_StaticGraded_ExpCond(self, *args)

    def add_synapse_population_PiecewiseSTDP_ExpCond(self, *args) -> "SynapseGroup *":
        return _genn_wrapper.NNmodel_add_synapse_population_PiecewiseSTDP_ExpCond(self, *args)

    def add_synapse_population_Custom_ExpCond(self, *args) -> "SynapseGroup *":
        return _genn_wrapper.NNmodel_add_synapse_population_Custom_ExpCond(self, *args)

    def add_synapse_population_StaticPulse_DeltaCurr(self, *args) -> "SynapseGroup *":
        return _genn_wrapper.NNmodel_add_synapse_population_StaticPulse_DeltaCurr(self, *args)

    def add_synapse_population_StaticPulseDendriticDelay_DeltaCurr(self, *args) -> "SynapseGroup *":
        return _genn_wrapper.NNmodel_add_synapse_population_StaticPulseDendriticDelay_DeltaCurr(self, *args)

    def add_synapse_population_StaticGraded_DeltaCurr(self, *args) -> "SynapseGroup *":
        return _genn_wrapper.NNmodel_add_synapse_population_StaticGraded_DeltaCurr(self, *args)

    def add_synapse_population_PiecewiseSTDP_DeltaCurr(self, *args) -> "SynapseGroup *":
        return _genn_wrapper.NNmodel_add_synapse_population_PiecewiseSTDP_DeltaCurr(self, *args)

    def add_synapse_population_Custom_DeltaCurr(self, *args) -> "SynapseGroup *":
        return _genn_wrapper.NNmodel_add_synapse_population_Custom_DeltaCurr(self, *args)

    def add_synapse_population_StaticPulse_Custom(self, *args) -> "SynapseGroup *":
        return _genn_wrapper.NNmodel_add_synapse_population_StaticPulse_Custom(self, *args)

    def add_synapse_population_StaticPulseDendriticDelay_Custom(self, *args) -> "SynapseGroup *":
        return _genn_wrapper.NNmodel_add_synapse_population_StaticPulseDendriticDelay_Custom(self, *args)

    def add_synapse_population_StaticGraded_Custom(self, *args) -> "SynapseGroup *":
        return _genn_wrapper.NNmodel_add_synapse_population_StaticGraded_Custom(self, *args)

    def add_synapse_population_PiecewiseSTDP_Custom(self, *args) -> "SynapseGroup *":
        return _genn_wrapper.NNmodel_add_synapse_population_PiecewiseSTDP_Custom(self, *args)

    def add_synapse_population_Custom_Custom(self, *args) -> "SynapseGroup *":
        return _genn_wrapper.NNmodel_add_synapse_population_Custom_Custom(self, *args)

    def add_current_source_DC(self, *args) -> "CurrentSource *":
        return _genn_wrapper.NNmodel_add_current_source_DC(self, *args)

    def add_current_source_GaussianNoise(self, *args) -> "CurrentSource *":
        return _genn_wrapper.NNmodel_add_current_source_GaussianNoise(self, *args)

    def add_current_source_Custom(self, *args) -> "CurrentSource *":
        return _genn_wrapper.NNmodel_add_current_source_Custom(self, *args)
NNmodel_swigregister = _genn_wrapper.NNmodel_swigregister
NNmodel_swigregister(NNmodel)

VarLocation_HOST = _genn_wrapper.VarLocation_HOST
VarLocation_DEVICE = _genn_wrapper.VarLocation_DEVICE
VarLocation_ZERO_COPY = _genn_wrapper.VarLocation_ZERO_COPY
VarInit_HOST = _genn_wrapper.VarInit_HOST
VarInit_DEVICE = _genn_wrapper.VarInit_DEVICE
VarMode_LOC_DEVICE_INIT_DEVICE = _genn_wrapper.VarMode_LOC_DEVICE_INIT_DEVICE
VarMode_LOC_HOST_DEVICE_INIT_HOST = _genn_wrapper.VarMode_LOC_HOST_DEVICE_INIT_HOST
VarMode_LOC_HOST_DEVICE_INIT_DEVICE = _genn_wrapper.VarMode_LOC_HOST_DEVICE_INIT_DEVICE
VarMode_LOC_ZERO_COPY_INIT_HOST = _genn_wrapper.VarMode_LOC_ZERO_COPY_INIT_HOST
VarMode_LOC_ZERO_COPY_INIT_DEVICE = _genn_wrapper.VarMode_LOC_ZERO_COPY_INIT_DEVICE
SynapseMatrixConnectivity_SPARSE = _genn_wrapper.SynapseMatrixConnectivity_SPARSE
SynapseMatrixConnectivity_DENSE = _genn_wrapper.SynapseMatrixConnectivity_DENSE
SynapseMatrixConnectivity_BITMASK = _genn_wrapper.SynapseMatrixConnectivity_BITMASK
SynapseMatrixConnectivity_RAGGED = _genn_wrapper.SynapseMatrixConnectivity_RAGGED
SynapseMatrixConnectivity_YALE = _genn_wrapper.SynapseMatrixConnectivity_YALE
SynapseMatrixWeight_GLOBAL = _genn_wrapper.SynapseMatrixWeight_GLOBAL
SynapseMatrixWeight_INDIVIDUAL = _genn_wrapper.SynapseMatrixWeight_INDIVIDUAL
SynapseMatrixWeight_INDIVIDUAL_PSM = _genn_wrapper.SynapseMatrixWeight_INDIVIDUAL_PSM
SynapseMatrixType_SPARSE_GLOBALG = _genn_wrapper.SynapseMatrixType_SPARSE_GLOBALG
SynapseMatrixType_SPARSE_GLOBALG_INDIVIDUAL_PSM = _genn_wrapper.SynapseMatrixType_SPARSE_GLOBALG_INDIVIDUAL_PSM
SynapseMatrixType_SPARSE_INDIVIDUALG = _genn_wrapper.SynapseMatrixType_SPARSE_INDIVIDUALG
SynapseMatrixType_DENSE_GLOBALG = _genn_wrapper.SynapseMatrixType_DENSE_GLOBALG
SynapseMatrixType_DENSE_GLOBALG_INDIVIDUAL_PSM = _genn_wrapper.SynapseMatrixType_DENSE_GLOBALG_INDIVIDUAL_PSM
SynapseMatrixType_DENSE_INDIVIDUALG = _genn_wrapper.SynapseMatrixType_DENSE_INDIVIDUALG
SynapseMatrixType_BITMASK_GLOBALG = _genn_wrapper.SynapseMatrixType_BITMASK_GLOBALG
SynapseMatrixType_BITMASK_GLOBALG_INDIVIDUAL_PSM = _genn_wrapper.SynapseMatrixType_BITMASK_GLOBALG_INDIVIDUAL_PSM
SynapseMatrixType_RAGGED_GLOBALG = _genn_wrapper.SynapseMatrixType_RAGGED_GLOBALG
SynapseMatrixType_RAGGED_GLOBALG_INDIVIDUAL_PSM = _genn_wrapper.SynapseMatrixType_RAGGED_GLOBALG_INDIVIDUAL_PSM
SynapseMatrixType_RAGGED_INDIVIDUALG = _genn_wrapper.SynapseMatrixType_RAGGED_INDIVIDUALG

def set_default_var_mode(varMode: 'VarMode const &') -> "void":
    return _genn_wrapper.set_default_var_mode(varMode)
set_default_var_mode = _genn_wrapper.set_default_var_mode

def set_default_sparse_connectivity_mode(varMode: 'VarMode const &') -> "void":
    return _genn_wrapper.set_default_sparse_connectivity_mode(varMode)
set_default_sparse_connectivity_mode = _genn_wrapper.set_default_sparse_connectivity_mode
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import GeNNPreferences
else:
    import GeNNPreferences
del _swig_python_version_info
# This file is compatible with both classic and new-style classes.

cvar = _genn_wrapper.cvar
calcSynapseDynamics = cvar.calcSynapseDynamics
calcSynapses = cvar.calcSynapses
learnSynapsesPost = cvar.learnSynapsesPost
calcNeurons = cvar.calcNeurons

