# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.12
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    def swig_import_helper():
        import importlib
        pkg = __name__.rpartition('.')[0]
        mname = '.'.join((pkg, '_InitSparseConnectivitySnippet')).lstrip('.')
        try:
            return importlib.import_module(mname)
        except ImportError:
            return importlib.import_module('_InitSparseConnectivitySnippet')
    _InitSparseConnectivitySnippet = swig_import_helper()
    del swig_import_helper
elif _swig_python_version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_InitSparseConnectivitySnippet', [dirname(__file__)])
        except ImportError:
            import _InitSparseConnectivitySnippet
            return _InitSparseConnectivitySnippet
        try:
            _mod = imp.load_module('_InitSparseConnectivitySnippet', fp, pathname, description)
        finally:
            if fp is not None:
                fp.close()
        return _mod
    _InitSparseConnectivitySnippet = swig_import_helper()
    del swig_import_helper
else:
    import _InitSparseConnectivitySnippet
del _swig_python_version_info

try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        if _newclass:
            object.__setattr__(self, name, value)
        else:
            self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr(self, class_type, name):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    raise AttributeError("'%s' object has no attribute '%s'" % (class_type.__name__, name))


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except __builtin__.Exception:
    class _object:
        pass
    _newclass = 0

try:
    import weakref
    weakref_proxy = weakref.proxy
except __builtin__.Exception:
    weakref_proxy = lambda x: x


from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import Snippet
else:
    import Snippet
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import StlContainers
else:
    import StlContainers
del _swig_python_version_info
class Base(Snippet.Base):
    __swig_setmethods__ = {}
    for _s in [Snippet.Base]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Base, name, value)
    __swig_getmethods__ = {}
    for _s in [Snippet.Base]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, Base, name)
    __repr__ = _swig_repr

    def get_row_build_code(self) -> "std::string":
        return _InitSparseConnectivitySnippet.Base_get_row_build_code(self)

    def get_row_build_state_vars(self) -> "Snippet::Base::NameTypeValVec":
        return _InitSparseConnectivitySnippet.Base_get_row_build_state_vars(self)

    def get_calc_max_row_length_func(self) -> "InitSparseConnectivitySnippet::Base::CalcMaxLengthFunc":
        return _InitSparseConnectivitySnippet.Base_get_calc_max_row_length_func(self)

    def get_calc_max_col_length_func(self) -> "InitSparseConnectivitySnippet::Base::CalcMaxLengthFunc":
        return _InitSparseConnectivitySnippet.Base_get_calc_max_col_length_func(self)

    def get_extra_global_params(self) -> "Snippet::Base::StringPairVec":
        return _InitSparseConnectivitySnippet.Base_get_extra_global_params(self)

    def __init__(self):
        if self.__class__ == Base:
            _self = None
        else:
            _self = self
        this = _InitSparseConnectivitySnippet.new_Base(_self, )
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _InitSparseConnectivitySnippet.delete_Base
    __del__ = lambda self: None
    def __disown__(self):
        self.this.disown()
        _InitSparseConnectivitySnippet.disown_Base(self)
        return weakref_proxy(self)
Base_swigregister = _InitSparseConnectivitySnippet.Base_swigregister
Base_swigregister(Base)

class Init(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Init, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Init, name)
    __repr__ = _swig_repr

    def __init__(self, snippet: 'Base', params: 'DoubleVector'):
        this = _InitSparseConnectivitySnippet.new_Init(snippet, params)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _InitSparseConnectivitySnippet.delete_Init
    __del__ = lambda self: None
Init_swigregister = _InitSparseConnectivitySnippet.Init_swigregister
Init_swigregister(Init)

class Uninitialised(Base):
    __swig_setmethods__ = {}
    for _s in [Base]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Uninitialised, name, value)
    __swig_getmethods__ = {}
    for _s in [Base]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, Uninitialised, name)
    __repr__ = _swig_repr
    if _newclass:
        get_instance = staticmethod(_InitSparseConnectivitySnippet.Uninitialised_get_instance)
    else:
        get_instance = _InitSparseConnectivitySnippet.Uninitialised_get_instance
    if _newclass:
        make_param_values = staticmethod(_InitSparseConnectivitySnippet.Uninitialised_make_param_values)
    else:
        make_param_values = _InitSparseConnectivitySnippet.Uninitialised_make_param_values

    def __init__(self):
        this = _InitSparseConnectivitySnippet.new_Uninitialised()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _InitSparseConnectivitySnippet.delete_Uninitialised
    __del__ = lambda self: None
Uninitialised_swigregister = _InitSparseConnectivitySnippet.Uninitialised_swigregister
Uninitialised_swigregister(Uninitialised)

def Uninitialised_get_instance() -> "InitSparseConnectivitySnippet::Uninitialised const *":
    return _InitSparseConnectivitySnippet.Uninitialised_get_instance()
Uninitialised_get_instance = _InitSparseConnectivitySnippet.Uninitialised_get_instance

def Uninitialised_make_param_values(arg2: 'DoubleVector') -> "InitSparseConnectivitySnippet::Uninitialised::ParamValues *":
    return _InitSparseConnectivitySnippet.Uninitialised_make_param_values(arg2)
Uninitialised_make_param_values = _InitSparseConnectivitySnippet.Uninitialised_make_param_values

class OneToOne(Base):
    __swig_setmethods__ = {}
    for _s in [Base]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, OneToOne, name, value)
    __swig_getmethods__ = {}
    for _s in [Base]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, OneToOne, name)
    __repr__ = _swig_repr
    if _newclass:
        get_instance = staticmethod(_InitSparseConnectivitySnippet.OneToOne_get_instance)
    else:
        get_instance = _InitSparseConnectivitySnippet.OneToOne_get_instance

    def get_row_build_code(self) -> "std::string":
        return _InitSparseConnectivitySnippet.OneToOne_get_row_build_code(self)

    def get_calc_max_row_length_func(self) -> "InitSparseConnectivitySnippet::Base::CalcMaxLengthFunc":
        return _InitSparseConnectivitySnippet.OneToOne_get_calc_max_row_length_func(self)

    def get_calc_max_col_length_func(self) -> "InitSparseConnectivitySnippet::Base::CalcMaxLengthFunc":
        return _InitSparseConnectivitySnippet.OneToOne_get_calc_max_col_length_func(self)
    if _newclass:
        make_param_values = staticmethod(_InitSparseConnectivitySnippet.OneToOne_make_param_values)
    else:
        make_param_values = _InitSparseConnectivitySnippet.OneToOne_make_param_values

    def __init__(self):
        this = _InitSparseConnectivitySnippet.new_OneToOne()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _InitSparseConnectivitySnippet.delete_OneToOne
    __del__ = lambda self: None
OneToOne_swigregister = _InitSparseConnectivitySnippet.OneToOne_swigregister
OneToOne_swigregister(OneToOne)

def OneToOne_get_instance() -> "InitSparseConnectivitySnippet::OneToOne const *":
    return _InitSparseConnectivitySnippet.OneToOne_get_instance()
OneToOne_get_instance = _InitSparseConnectivitySnippet.OneToOne_get_instance

def OneToOne_make_param_values(arg2: 'DoubleVector') -> "InitSparseConnectivitySnippet::OneToOne::ParamValues *":
    return _InitSparseConnectivitySnippet.OneToOne_make_param_values(arg2)
OneToOne_make_param_values = _InitSparseConnectivitySnippet.OneToOne_make_param_values

class FixedProbabilityBase(Base):
    __swig_setmethods__ = {}
    for _s in [Base]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, FixedProbabilityBase, name, value)
    __swig_getmethods__ = {}
    for _s in [Base]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, FixedProbabilityBase, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def get_row_build_code(self) -> "std::string":
        return _InitSparseConnectivitySnippet.FixedProbabilityBase_get_row_build_code(self)

    def get_row_build_state_vars(self) -> "Snippet::Base::NameTypeValVec":
        return _InitSparseConnectivitySnippet.FixedProbabilityBase_get_row_build_state_vars(self)

    def get_param_names(self) -> "Snippet::Base::StringVec":
        return _InitSparseConnectivitySnippet.FixedProbabilityBase_get_param_names(self)

    def get_derived_params(self) -> "Snippet::Base::DerivedParamVec":
        return _InitSparseConnectivitySnippet.FixedProbabilityBase_get_derived_params(self)

    def get_calc_max_row_length_func(self) -> "InitSparseConnectivitySnippet::Base::CalcMaxLengthFunc":
        return _InitSparseConnectivitySnippet.FixedProbabilityBase_get_calc_max_row_length_func(self)

    def get_calc_max_col_length_func(self) -> "InitSparseConnectivitySnippet::Base::CalcMaxLengthFunc":
        return _InitSparseConnectivitySnippet.FixedProbabilityBase_get_calc_max_col_length_func(self)
    __swig_destroy__ = _InitSparseConnectivitySnippet.delete_FixedProbabilityBase
    __del__ = lambda self: None
FixedProbabilityBase_swigregister = _InitSparseConnectivitySnippet.FixedProbabilityBase_swigregister
FixedProbabilityBase_swigregister(FixedProbabilityBase)

class FixedProbability(FixedProbabilityBase):
    __swig_setmethods__ = {}
    for _s in [FixedProbabilityBase]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, FixedProbability, name, value)
    __swig_getmethods__ = {}
    for _s in [FixedProbabilityBase]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, FixedProbability, name)
    __repr__ = _swig_repr
    if _newclass:
        get_instance = staticmethod(_InitSparseConnectivitySnippet.FixedProbability_get_instance)
    else:
        get_instance = _InitSparseConnectivitySnippet.FixedProbability_get_instance

    def get_row_build_code(self) -> "std::string":
        return _InitSparseConnectivitySnippet.FixedProbability_get_row_build_code(self)
    if _newclass:
        make_param_values = staticmethod(_InitSparseConnectivitySnippet.FixedProbability_make_param_values)
    else:
        make_param_values = _InitSparseConnectivitySnippet.FixedProbability_make_param_values

    def __init__(self):
        this = _InitSparseConnectivitySnippet.new_FixedProbability()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _InitSparseConnectivitySnippet.delete_FixedProbability
    __del__ = lambda self: None
FixedProbability_swigregister = _InitSparseConnectivitySnippet.FixedProbability_swigregister
FixedProbability_swigregister(FixedProbability)

def FixedProbability_get_instance() -> "InitSparseConnectivitySnippet::FixedProbability const *":
    return _InitSparseConnectivitySnippet.FixedProbability_get_instance()
FixedProbability_get_instance = _InitSparseConnectivitySnippet.FixedProbability_get_instance

def FixedProbability_make_param_values(vals: 'DoubleVector') -> "InitSparseConnectivitySnippet::FixedProbability::ParamValues *":
    return _InitSparseConnectivitySnippet.FixedProbability_make_param_values(vals)
FixedProbability_make_param_values = _InitSparseConnectivitySnippet.FixedProbability_make_param_values

class FixedProbabilityNoAutapse(FixedProbabilityBase):
    __swig_setmethods__ = {}
    for _s in [FixedProbabilityBase]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, FixedProbabilityNoAutapse, name, value)
    __swig_getmethods__ = {}
    for _s in [FixedProbabilityBase]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, FixedProbabilityNoAutapse, name)
    __repr__ = _swig_repr
    if _newclass:
        get_instance = staticmethod(_InitSparseConnectivitySnippet.FixedProbabilityNoAutapse_get_instance)
    else:
        get_instance = _InitSparseConnectivitySnippet.FixedProbabilityNoAutapse_get_instance

    def get_row_build_code(self) -> "std::string":
        return _InitSparseConnectivitySnippet.FixedProbabilityNoAutapse_get_row_build_code(self)
    if _newclass:
        make_param_values = staticmethod(_InitSparseConnectivitySnippet.FixedProbabilityNoAutapse_make_param_values)
    else:
        make_param_values = _InitSparseConnectivitySnippet.FixedProbabilityNoAutapse_make_param_values

    def __init__(self):
        this = _InitSparseConnectivitySnippet.new_FixedProbabilityNoAutapse()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _InitSparseConnectivitySnippet.delete_FixedProbabilityNoAutapse
    __del__ = lambda self: None
FixedProbabilityNoAutapse_swigregister = _InitSparseConnectivitySnippet.FixedProbabilityNoAutapse_swigregister
FixedProbabilityNoAutapse_swigregister(FixedProbabilityNoAutapse)

def FixedProbabilityNoAutapse_get_instance() -> "InitSparseConnectivitySnippet::FixedProbabilityNoAutapse const *":
    return _InitSparseConnectivitySnippet.FixedProbabilityNoAutapse_get_instance()
FixedProbabilityNoAutapse_get_instance = _InitSparseConnectivitySnippet.FixedProbabilityNoAutapse_get_instance

def FixedProbabilityNoAutapse_make_param_values(vals: 'DoubleVector') -> "InitSparseConnectivitySnippet::FixedProbabilityNoAutapse::ParamValues *":
    return _InitSparseConnectivitySnippet.FixedProbabilityNoAutapse_make_param_values(vals)
FixedProbabilityNoAutapse_make_param_values = _InitSparseConnectivitySnippet.FixedProbabilityNoAutapse_make_param_values

class Custom(Base):
    __swig_setmethods__ = {}
    for _s in [Base]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Custom, name, value)
    __swig_getmethods__ = {}
    for _s in [Base]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, Custom, name)
    __repr__ = _swig_repr
    if _newclass:
        get_instance = staticmethod(_InitSparseConnectivitySnippet.Custom_get_instance)
    else:
        get_instance = _InitSparseConnectivitySnippet.Custom_get_instance
    if _newclass:
        make_param_values = staticmethod(_InitSparseConnectivitySnippet.Custom_make_param_values)
    else:
        make_param_values = _InitSparseConnectivitySnippet.Custom_make_param_values

    def __init__(self):
        if self.__class__ == Custom:
            _self = None
        else:
            _self = self
        this = _InitSparseConnectivitySnippet.new_Custom(_self, )
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _InitSparseConnectivitySnippet.delete_Custom
    __del__ = lambda self: None
    def __disown__(self):
        self.this.disown()
        _InitSparseConnectivitySnippet.disown_Custom(self)
        return weakref_proxy(self)
Custom_swigregister = _InitSparseConnectivitySnippet.Custom_swigregister
Custom_swigregister(Custom)

def Custom_get_instance() -> "InitSparseConnectivitySnippet::Custom const *":
    return _InitSparseConnectivitySnippet.Custom_get_instance()
Custom_get_instance = _InitSparseConnectivitySnippet.Custom_get_instance

def Custom_make_param_values(vals: 'DoubleVector') -> "CustomValues::ParamValues *":
    return _InitSparseConnectivitySnippet.Custom_make_param_values(vals)
Custom_make_param_values = _InitSparseConnectivitySnippet.Custom_make_param_values

class CalcMaxLengthFunc(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, CalcMaxLengthFunc, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, CalcMaxLengthFunc, name)
    __repr__ = _swig_repr

    def __call__(self, arg0: 'unsigned int', arg1: 'unsigned int', pars: 'DoubleVector') -> "unsigned int":
        return _InitSparseConnectivitySnippet.CalcMaxLengthFunc___call__(self, arg0, arg1, pars)
    __swig_destroy__ = _InitSparseConnectivitySnippet.delete_CalcMaxLengthFunc
    __del__ = lambda self: None

    def __init__(self):
        if self.__class__ == CalcMaxLengthFunc:
            _self = None
        else:
            _self = self
        this = _InitSparseConnectivitySnippet.new_CalcMaxLengthFunc(_self, )
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    def __disown__(self):
        self.this.disown()
        _InitSparseConnectivitySnippet.disown_CalcMaxLengthFunc(self)
        return weakref_proxy(self)
CalcMaxLengthFunc_swigregister = _InitSparseConnectivitySnippet.CalcMaxLengthFunc_swigregister
CalcMaxLengthFunc_swigregister(CalcMaxLengthFunc)


def make_cmlf(cmlf: 'CalcMaxLengthFunc') -> "std::function< unsigned int (unsigned int,unsigned int,std::vector< double,std::allocator< double > > const &,double) >":
    return _InitSparseConnectivitySnippet.make_cmlf(cmlf)
make_cmlf = _InitSparseConnectivitySnippet.make_cmlf
# This file is compatible with both classic and new-style classes.


