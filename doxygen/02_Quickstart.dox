/*--------------------------------------------------------------------------
   Author: Thomas Nowotny
  
   Institute: Center for Computational Neuroscience and Robotics
              University of Sussex
	      Falmer, Brighton BN1 9QJ, UK 
  
   email to:  T.Nowotny@sussex.ac.uk
  
   initial version: 2010-02-07
  
--------------------------------------------------------------------------*/

//----------------------------------------------------------------------------
/*! \page Quickstart Quickstart 

GeNN is based on the idea of code generation for the involved GPU or
CPU simulation code for neuronal network models but leaves a lot of
freedom how to use the generated code in the final
application. To facilitate the use of GeNN on the background of this
philosophy, it comes with a number of complete examples containing both
the model description code that is used by GeNN for code generation
and the "user side code" to run the generated model and safe the
results. Running these complete examples should be achievable in a few
minutes. The necessary steps are described below.

\section unix_quick Running an Example Model in Unix
In order to get a quick start and run a provided model, open a
shell and navigate to the `userproject/tools` directory:
\code
cd $GENN_PATH/userproject/tools
\endcode
Then compile the additional tools for creating and running example projects:
\code
make
\endcode
Some of the example models such as the \ref ex_mbody use an `generate_run` executable which automates the building and simulation of the model. 
To build this executable for the \ref ex_mbody example, navigate to the `userproject/MBody1_project` directory:
\code
cd ../MBody1_project
\endcode
Then type
\code
make
\endcode
to generate an executable that you can invoke with
\code
./generate_run test1
\endcode
or, if you don't have an NVIDIA GPU and are running GeNN in CPU_ONLY mode, you can instead invoke this executable with
\code
./generate_run --cpu-only test1
\endcode
both invocations will build and simulate a model of the locust olfactory
system with default parameters of 100 projection neurons, 1000 Kenyon cells, 20 lateral horn
interneurons and 100 output neurons in the mushroom body lobes.
\note If the model isn't build in CPU_ONLY mode it will be simulated on an automatically chosen GPU.

The generate_run tool generates input patterns and writes them to file, compiles and runs the model using these files as inputs and finally output the
resulting spiking activity. For more information of the options passed to this command see the \ref ex_mbody section.
the results of the simulation can be plotted with
\code
python plot.py test1
\endcode

The MBody1 example is already a highly integrated example that
showcases many of the features of GeNN and how to program the
user-side code for a GeNN application. More details in the
\link UserManual User Manual \endlink.

\section windows_quick Running an Example Model in Windows 

All interaction with GeNN programs are command-line based and hence
are executed within a `cmd` window. Open a Visual Studio `cmd` window
via Start: All Programs: Visual Studio: Tools: Native Tools Command Prompt,
and navigate to the `userproject\tools` directory.
\code
cd %GENN_PATH%\userproject\tools
\endcode
Then compile the additional tools for creating and running example projects:
\code
nmake /f WINmakefile
\endcode
Some of the example models such as the \ref ex_mbody use an `generate_run` executable which automates the building and simulation of the model. 
To build this executable for the \ref ex_mbody example, navigate to the `userproject\MBody1_project` directory:
\code
cd ..\MBody1_project
\endcode
Then type 
\code
nmake /f WINmakefile
\endcode
to generate an executable that you can invoke with
\code
generate_run 1 100 1000 20 100 0.0025 test1 MBody1
\endcode
or, if you don't have an NVIDIA GPU and are running GeNN in CPU_ONLY mode, you can instead invoke this executable with
\code
generate_run 0 100 1000 20 100 0.0025 test1 MBody1 CPU_ONLY=1
\endcode
both invocations will build and simulate a model of the locust olfactory
system with 100 projection neurons, 1000 Kenyon cells, 20 lateral horn
interneurons and 100 output neurons in the mushroom body lobes.
\note If the model isn't build in CPU_ONLY mode it will be simulated on an automatically chosen GPU.

The generate_run tool generates connectivity matrices for the model
`MBody1` and writes them to file, compiles and runs the model using these files as inputs and finally output the
resulting spiking activity. For more information of the options passed to this command see the \ref ex_mbody section.

The MBody1 example is already a highly integrated example that
showcases many of the features of GeNN and how to program the
user-side code for a GeNN application. More details in the
\link UserManual User Manual \endlink.

\section how_to How to use GeNN for New Projects

Creating and running projects in GeNN involves a few steps ranging
from defining the fundamentals of the model, inputs to the model,
details of the model like specific connectivity matrices or initial
values, running the model, and analyzing or saving the data.

GeNN code is generally created by passing the C++ model file (see \link
ownmodel below\endlink) directly to the genn-buildmodel script. Another
way to use GeNN is to create or modify a script or executable such as
`userproject/MBody1_project/generate_run.cc` that wraps around the other
programs that are used for each of the steps listed above.
In more detail, the GeNN workflow consists of: 

1. Either use external programs to generate connectivity and input files to be loaded into the user side code at runtime
   or generate these matrices directly inside the user side code.

2. Generating the model simulation code using `genn-buildmodel.sh`
   (On Linux or Mac) or `genn-buildmodel.bat` (on Windows). For example, 
   inside the `generate_run` engine used by the MBody1_project, the following command is executed on Linux: 
   \code
   genn-buildmodel.sh MBody1.cc
   \endcode
   or, if you don't have an NVIDIA GPU and are running GeNN in CPU_ONLY mode, the following command is executed:
   \code
   genn-buildmodel.sh -c MBody1.cc
   \endcode
   The `genn-buildmodel` script compiles the GeNN code generator
   in conjunction with the user-provided model description `model/MBody1.cc`.
   It then executes the GeNN code generator to generate the complete model
   simulation code for the model.
3. Provide a build script to compile the generated model simulation and the user side code into a simulator executable (in the case of the MBody1 example this consists the file ``MBody1Sim.cc``).
    On Linux or Mac a suitable GNU makefile can be created by running:
    \code
    genn-create-user-project.sh MBody1 MBody1Sim.cc
    \endcode
    And on Windows an MSBuild project can be created by running:
    \code
    genn-create-user-project.bat MBody1 MBody1Sim.cc
    \endcode
4. Compile the simulator executable by invoking GNU make on Linux or Mac:
   \code
   make clean all
   \endcode
   or MSbuild on Windows:
   \code
   msbuild MBody1.sln /t:MBody1 /p:Configuration=Release
   \endcode
    
5. Finally, run the resulting stand-alone simulator executable. In the
   MBody1 example, this is called `MBody1` on Linux and `MBody1.exe` on Windows.

\section ownmodel Defining a New Model in GeNN
According to the work flow outlined above, there are several steps to be
completed to define a neuronal network model.

1. The neuronal network of interest is defined in a model definition file,
   e.g. `Example1.cc`.  

2. Within the the model definition file `Example1.cc`, the following tasks
   need to be completed:

   a) The GeNN file `modelSpec.h` needs to be included,
      \code
      #include "modelSpec.h"
      \endcode

   b) The values for initial variables and parameters for neuron and synapse
      populations need to be defined, e.g.
      \code
      NeuronModels::PoissonNew::ParamValues poissonParams(
        10.0);      // 0 - firing rate
      \endcode
      would define the (homogeneous) parameters for a population of Poisson
      neurons.
      \note
      The number of required parameters and their meaning is defined by the
      neuron or synapse type. Refer to the \link UserManual User Manual
      \endlink for details. We recommend, however, to use comments like
      in the above example to achieve maximal clarity of each parameter's
      meaning.

      If heterogeneous parameter values are required for a particular
      population of neurons (or synapses), they need to be defined as "variables"
      rather than parameters.  See the \link UserManual User Manual
      \endlink for how to define new neuron (or synapse) types and the
      \ref sect_new_var_init section for more information on 
      initialising these variables to hetererogenous values.

   c) The actual network needs to be defined in the form of a function
      `modelDefinition`, i.e. 
      \code{.cc}
      void modelDefinition(NNmodel &model); 
      \endcode  
      \note
      The name `modelDefinition` and its parameter of type `NNmodel&`
      are fixed and cannot be changed if GeNN is to recognize it as a
      model definition.

   d) Inside modelDefinition(), The time step `DT` needs to be defined, e.g.
      \code{.cc}
      model.setDT(0.1);
      \endcode
      \note
      All provided examples and pre-defined model elements in GeNN work with
      units of mV, ms, nF and muS. However, the choice of units is entirely
      left to the user if custom model elements are used.

   `MBody1.cc` shows a typical example of a model definition function. In
   its core it contains calls to NNmodel::addNeuronPopulation and
   NNmodel::addSynapsePopulation to build up the network. For a full range
   of options for defining a network, refer to the \link UserManual User
   Manual\endlink.
	
3. The programmer defines their own "user-side" modeling code similar to
   the code in `userproject/MBody1_project/model/MBody1Sim.cc`. In this code,

   a) They manually define the connectivity matrices between neuron groups. 
      Refer to the \ref subsect34 section for the required format of
      connectivity matrices for dense or sparse connectivities.

   b) They define input patterns (e.g. for Poisson neurons like in the
      MBody1 example) or individual initial values for neuron and / or
      synapse variables.
      \note
      The initial values given in the `modelDefinition` are automatically
      applied homogeneously to every individual neuron or synapse in each
      of the neuron or synapse groups. 

   c) They use `stepTime();` to run one time step on either the CPU or GPU depending on the options passed to genn-buildmodel.
    
   d) They use functions like `copyStateFromDevice()` etc to transfer the
      results from GPU calculations to the main memory of the host computer
      for further processing.

   e) They analyze the results. In the most simple case this could just be
      writing the relevant data to output files.

<br />

-----
\link Installation Previous\endlink | \link Quickstart Top\endlink | \link Examples  Next\endlink

*/
//----------------------------------------------------------------------------
