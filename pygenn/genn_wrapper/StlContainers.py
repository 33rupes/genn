# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.12
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    def swig_import_helper():
        import importlib
        pkg = __name__.rpartition('.')[0]
        mname = '.'.join((pkg, '_StlContainers')).lstrip('.')
        try:
            return importlib.import_module(mname)
        except ImportError:
            return importlib.import_module('_StlContainers')
    _StlContainers = swig_import_helper()
    del swig_import_helper
elif _swig_python_version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_StlContainers', [dirname(__file__)])
        except ImportError:
            import _StlContainers
            return _StlContainers
        try:
            _mod = imp.load_module('_StlContainers', fp, pathname, description)
        finally:
            if fp is not None:
                fp.close()
        return _mod
    _StlContainers = swig_import_helper()
    del swig_import_helper
else:
    import _StlContainers
del _swig_python_version_info

try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        if _newclass:
            object.__setattr__(self, name, value)
        else:
            self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr(self, class_type, name):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    raise AttributeError("'%s' object has no attribute '%s'" % (class_type.__name__, name))


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except __builtin__.Exception:
    class _object:
        pass
    _newclass = 0

class SwigPyIterator(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SwigPyIterator, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SwigPyIterator, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _StlContainers.delete_SwigPyIterator
    __del__ = lambda self: None

    def value(self) -> "PyObject *":
        return _StlContainers.SwigPyIterator_value(self)

    def incr(self, n: 'size_t'=1) -> "swig::SwigPyIterator *":
        return _StlContainers.SwigPyIterator_incr(self, n)

    def decr(self, n: 'size_t'=1) -> "swig::SwigPyIterator *":
        return _StlContainers.SwigPyIterator_decr(self, n)

    def distance(self, x: 'SwigPyIterator') -> "ptrdiff_t":
        return _StlContainers.SwigPyIterator_distance(self, x)

    def equal(self, x: 'SwigPyIterator') -> "bool":
        return _StlContainers.SwigPyIterator_equal(self, x)

    def copy(self) -> "swig::SwigPyIterator *":
        return _StlContainers.SwigPyIterator_copy(self)

    def next(self) -> "PyObject *":
        return _StlContainers.SwigPyIterator_next(self)

    def __next__(self) -> "PyObject *":
        return _StlContainers.SwigPyIterator___next__(self)

    def previous(self) -> "PyObject *":
        return _StlContainers.SwigPyIterator_previous(self)

    def advance(self, n: 'ptrdiff_t') -> "swig::SwigPyIterator *":
        return _StlContainers.SwigPyIterator_advance(self, n)

    def __eq__(self, x: 'SwigPyIterator') -> "bool":
        return _StlContainers.SwigPyIterator___eq__(self, x)

    def __ne__(self, x: 'SwigPyIterator') -> "bool":
        return _StlContainers.SwigPyIterator___ne__(self, x)

    def __iadd__(self, n: 'ptrdiff_t') -> "swig::SwigPyIterator &":
        return _StlContainers.SwigPyIterator___iadd__(self, n)

    def __isub__(self, n: 'ptrdiff_t') -> "swig::SwigPyIterator &":
        return _StlContainers.SwigPyIterator___isub__(self, n)

    def __add__(self, n: 'ptrdiff_t') -> "swig::SwigPyIterator *":
        return _StlContainers.SwigPyIterator___add__(self, n)

    def __sub__(self, *args) -> "ptrdiff_t":
        return _StlContainers.SwigPyIterator___sub__(self, *args)
    def __iter__(self):
        return self
SwigPyIterator_swigregister = _StlContainers.SwigPyIterator_swigregister
SwigPyIterator_swigregister(SwigPyIterator)

class STD_DPFunc(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, STD_DPFunc, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, STD_DPFunc, name)
    __repr__ = _swig_repr

    def __init__(self, arg2: 'std::function< double (std::vector< double,std::allocator< double > > const &,double) > const &'):
        this = _StlContainers.new_STD_DPFunc(arg2)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def __call__(self, arg2: 'DoubleVector', arg3: 'double') -> "double":
        return _StlContainers.STD_DPFunc___call__(self, arg2, arg3)
    __swig_destroy__ = _StlContainers.delete_STD_DPFunc
    __del__ = lambda self: None
STD_DPFunc_swigregister = _StlContainers.STD_DPFunc_swigregister
STD_DPFunc_swigregister(STD_DPFunc)

class StringPair(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, StringPair, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, StringPair, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _StlContainers.new_StringPair(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_setmethods__["first"] = _StlContainers.StringPair_first_set
    __swig_getmethods__["first"] = _StlContainers.StringPair_first_get
    if _newclass:
        first = _swig_property(_StlContainers.StringPair_first_get, _StlContainers.StringPair_first_set)
    __swig_setmethods__["second"] = _StlContainers.StringPair_second_set
    __swig_getmethods__["second"] = _StlContainers.StringPair_second_get
    if _newclass:
        second = _swig_property(_StlContainers.StringPair_second_get, _StlContainers.StringPair_second_set)
    def __len__(self):
        return 2
    def __repr__(self):
        return str((self.first, self.second))
    def __getitem__(self, index): 
        if not (index % 2):
            return self.first
        else:
            return self.second
    def __setitem__(self, index, val):
        if not (index % 2):
            self.first = val
        else:
            self.second = val
    __swig_destroy__ = _StlContainers.delete_StringPair
    __del__ = lambda self: None
StringPair_swigregister = _StlContainers.StringPair_swigregister
StringPair_swigregister(StringPair)

class StringDoublePair(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, StringDoublePair, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, StringDoublePair, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _StlContainers.new_StringDoublePair(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_setmethods__["first"] = _StlContainers.StringDoublePair_first_set
    __swig_getmethods__["first"] = _StlContainers.StringDoublePair_first_get
    if _newclass:
        first = _swig_property(_StlContainers.StringDoublePair_first_get, _StlContainers.StringDoublePair_first_set)
    __swig_setmethods__["second"] = _StlContainers.StringDoublePair_second_set
    __swig_getmethods__["second"] = _StlContainers.StringDoublePair_second_get
    if _newclass:
        second = _swig_property(_StlContainers.StringDoublePair_second_get, _StlContainers.StringDoublePair_second_set)
    def __len__(self):
        return 2
    def __repr__(self):
        return str((self.first, self.second))
    def __getitem__(self, index): 
        if not (index % 2):
            return self.first
        else:
            return self.second
    def __setitem__(self, index, val):
        if not (index % 2):
            self.first = val
        else:
            self.second = val
    __swig_destroy__ = _StlContainers.delete_StringDoublePair
    __del__ = lambda self: None
StringDoublePair_swigregister = _StlContainers.StringDoublePair_swigregister
StringDoublePair_swigregister(StringDoublePair)

class StringStringDoublePairPair(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, StringStringDoublePairPair, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, StringStringDoublePairPair, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _StlContainers.new_StringStringDoublePairPair(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_setmethods__["first"] = _StlContainers.StringStringDoublePairPair_first_set
    __swig_getmethods__["first"] = _StlContainers.StringStringDoublePairPair_first_get
    if _newclass:
        first = _swig_property(_StlContainers.StringStringDoublePairPair_first_get, _StlContainers.StringStringDoublePairPair_first_set)
    __swig_setmethods__["second"] = _StlContainers.StringStringDoublePairPair_second_set
    __swig_getmethods__["second"] = _StlContainers.StringStringDoublePairPair_second_get
    if _newclass:
        second = _swig_property(_StlContainers.StringStringDoublePairPair_second_get, _StlContainers.StringStringDoublePairPair_second_set)
    def __len__(self):
        return 2
    def __repr__(self):
        return str((self.first, self.second))
    def __getitem__(self, index): 
        if not (index % 2):
            return self.first
        else:
            return self.second
    def __setitem__(self, index, val):
        if not (index % 2):
            self.first = val
        else:
            self.second = val
    __swig_destroy__ = _StlContainers.delete_StringStringDoublePairPair
    __del__ = lambda self: None
StringStringDoublePairPair_swigregister = _StlContainers.StringStringDoublePairPair_swigregister
StringStringDoublePairPair_swigregister(StringStringDoublePairPair)

class StringDPFPair(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, StringDPFPair, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, StringDPFPair, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _StlContainers.new_StringDPFPair(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_setmethods__["first"] = _StlContainers.StringDPFPair_first_set
    __swig_getmethods__["first"] = _StlContainers.StringDPFPair_first_get
    if _newclass:
        first = _swig_property(_StlContainers.StringDPFPair_first_get, _StlContainers.StringDPFPair_first_set)
    __swig_setmethods__["second"] = _StlContainers.StringDPFPair_second_set
    __swig_getmethods__["second"] = _StlContainers.StringDPFPair_second_get
    if _newclass:
        second = _swig_property(_StlContainers.StringDPFPair_second_get, _StlContainers.StringDPFPair_second_set)
    def __len__(self):
        return 2
    def __repr__(self):
        return str((self.first, self.second))
    def __getitem__(self, index): 
        if not (index % 2):
            return self.first
        else:
            return self.second
    def __setitem__(self, index, val):
        if not (index % 2):
            self.first = val
        else:
            self.second = val
    __swig_destroy__ = _StlContainers.delete_StringDPFPair
    __del__ = lambda self: None
StringDPFPair_swigregister = _StlContainers.StringDPFPair_swigregister
StringDPFPair_swigregister(StringDPFPair)

class StringVector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, StringVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, StringVector, name)
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _StlContainers.StringVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _StlContainers.StringVector___nonzero__(self)

    def __bool__(self) -> "bool":
        return _StlContainers.StringVector___bool__(self)

    def __len__(self) -> "std::vector< std::string >::size_type":
        return _StlContainers.StringVector___len__(self)

    def __getslice__(self, i: 'std::vector< std::string >::difference_type', j: 'std::vector< std::string >::difference_type') -> "std::vector< std::string,std::allocator< std::string > > *":
        return _StlContainers.StringVector___getslice__(self, i, j)

    def __setslice__(self, *args) -> "void":
        return _StlContainers.StringVector___setslice__(self, *args)

    def __delslice__(self, i: 'std::vector< std::string >::difference_type', j: 'std::vector< std::string >::difference_type') -> "void":
        return _StlContainers.StringVector___delslice__(self, i, j)

    def __delitem__(self, *args) -> "void":
        return _StlContainers.StringVector___delitem__(self, *args)

    def __getitem__(self, *args) -> "std::vector< std::string >::value_type const &":
        return _StlContainers.StringVector___getitem__(self, *args)

    def __setitem__(self, *args) -> "void":
        return _StlContainers.StringVector___setitem__(self, *args)

    def pop(self) -> "std::vector< std::string >::value_type":
        return _StlContainers.StringVector_pop(self)

    def append(self, x: 'std::vector< std::string >::value_type const &') -> "void":
        return _StlContainers.StringVector_append(self, x)

    def empty(self) -> "bool":
        return _StlContainers.StringVector_empty(self)

    def size(self) -> "std::vector< std::string >::size_type":
        return _StlContainers.StringVector_size(self)

    def swap(self, v: 'StringVector') -> "void":
        return _StlContainers.StringVector_swap(self, v)

    def begin(self) -> "std::vector< std::string >::iterator":
        return _StlContainers.StringVector_begin(self)

    def end(self) -> "std::vector< std::string >::iterator":
        return _StlContainers.StringVector_end(self)

    def rbegin(self) -> "std::vector< std::string >::reverse_iterator":
        return _StlContainers.StringVector_rbegin(self)

    def rend(self) -> "std::vector< std::string >::reverse_iterator":
        return _StlContainers.StringVector_rend(self)

    def clear(self) -> "void":
        return _StlContainers.StringVector_clear(self)

    def get_allocator(self) -> "std::vector< std::string >::allocator_type":
        return _StlContainers.StringVector_get_allocator(self)

    def pop_back(self) -> "void":
        return _StlContainers.StringVector_pop_back(self)

    def erase(self, *args) -> "std::vector< std::string >::iterator":
        return _StlContainers.StringVector_erase(self, *args)

    def __init__(self, *args):
        this = _StlContainers.new_StringVector(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def push_back(self, x: 'std::vector< std::string >::value_type const &') -> "void":
        return _StlContainers.StringVector_push_back(self, x)

    def front(self) -> "std::vector< std::string >::value_type const &":
        return _StlContainers.StringVector_front(self)

    def back(self) -> "std::vector< std::string >::value_type const &":
        return _StlContainers.StringVector_back(self)

    def assign(self, n: 'std::vector< std::string >::size_type', x: 'std::vector< std::string >::value_type const &') -> "void":
        return _StlContainers.StringVector_assign(self, n, x)

    def resize(self, *args) -> "void":
        return _StlContainers.StringVector_resize(self, *args)

    def insert(self, *args) -> "void":
        return _StlContainers.StringVector_insert(self, *args)

    def reserve(self, n: 'std::vector< std::string >::size_type') -> "void":
        return _StlContainers.StringVector_reserve(self, n)

    def capacity(self) -> "std::vector< std::string >::size_type":
        return _StlContainers.StringVector_capacity(self)
    __swig_destroy__ = _StlContainers.delete_StringVector
    __del__ = lambda self: None
StringVector_swigregister = _StlContainers.StringVector_swigregister
StringVector_swigregister(StringVector)

class StringPairVector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, StringPairVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, StringPairVector, name)
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _StlContainers.StringPairVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _StlContainers.StringPairVector___nonzero__(self)

    def __bool__(self) -> "bool":
        return _StlContainers.StringPairVector___bool__(self)

    def __len__(self) -> "std::vector< std::pair< std::string,std::string > >::size_type":
        return _StlContainers.StringPairVector___len__(self)

    def __getslice__(self, i: 'std::vector< std::pair< std::string,std::string > >::difference_type', j: 'std::vector< std::pair< std::string,std::string > >::difference_type') -> "std::vector< std::pair< std::string,std::string >,std::allocator< std::pair< std::string,std::string > > > *":
        return _StlContainers.StringPairVector___getslice__(self, i, j)

    def __setslice__(self, *args) -> "void":
        return _StlContainers.StringPairVector___setslice__(self, *args)

    def __delslice__(self, i: 'std::vector< std::pair< std::string,std::string > >::difference_type', j: 'std::vector< std::pair< std::string,std::string > >::difference_type') -> "void":
        return _StlContainers.StringPairVector___delslice__(self, i, j)

    def __delitem__(self, *args) -> "void":
        return _StlContainers.StringPairVector___delitem__(self, *args)

    def __getitem__(self, *args) -> "std::vector< std::pair< std::string,std::string > >::value_type const &":
        return _StlContainers.StringPairVector___getitem__(self, *args)

    def __setitem__(self, *args) -> "void":
        return _StlContainers.StringPairVector___setitem__(self, *args)

    def pop(self) -> "std::vector< std::pair< std::string,std::string > >::value_type":
        return _StlContainers.StringPairVector_pop(self)

    def append(self, x: 'StringPair') -> "void":
        return _StlContainers.StringPairVector_append(self, x)

    def empty(self) -> "bool":
        return _StlContainers.StringPairVector_empty(self)

    def size(self) -> "std::vector< std::pair< std::string,std::string > >::size_type":
        return _StlContainers.StringPairVector_size(self)

    def swap(self, v: 'StringPairVector') -> "void":
        return _StlContainers.StringPairVector_swap(self, v)

    def begin(self) -> "std::vector< std::pair< std::string,std::string > >::iterator":
        return _StlContainers.StringPairVector_begin(self)

    def end(self) -> "std::vector< std::pair< std::string,std::string > >::iterator":
        return _StlContainers.StringPairVector_end(self)

    def rbegin(self) -> "std::vector< std::pair< std::string,std::string > >::reverse_iterator":
        return _StlContainers.StringPairVector_rbegin(self)

    def rend(self) -> "std::vector< std::pair< std::string,std::string > >::reverse_iterator":
        return _StlContainers.StringPairVector_rend(self)

    def clear(self) -> "void":
        return _StlContainers.StringPairVector_clear(self)

    def get_allocator(self) -> "std::vector< std::pair< std::string,std::string > >::allocator_type":
        return _StlContainers.StringPairVector_get_allocator(self)

    def pop_back(self) -> "void":
        return _StlContainers.StringPairVector_pop_back(self)

    def erase(self, *args) -> "std::vector< std::pair< std::string,std::string > >::iterator":
        return _StlContainers.StringPairVector_erase(self, *args)

    def __init__(self, *args):
        this = _StlContainers.new_StringPairVector(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def push_back(self, x: 'StringPair') -> "void":
        return _StlContainers.StringPairVector_push_back(self, x)

    def front(self) -> "std::vector< std::pair< std::string,std::string > >::value_type const &":
        return _StlContainers.StringPairVector_front(self)

    def back(self) -> "std::vector< std::pair< std::string,std::string > >::value_type const &":
        return _StlContainers.StringPairVector_back(self)

    def assign(self, n: 'std::vector< std::pair< std::string,std::string > >::size_type', x: 'StringPair') -> "void":
        return _StlContainers.StringPairVector_assign(self, n, x)

    def resize(self, *args) -> "void":
        return _StlContainers.StringPairVector_resize(self, *args)

    def insert(self, *args) -> "void":
        return _StlContainers.StringPairVector_insert(self, *args)

    def reserve(self, n: 'std::vector< std::pair< std::string,std::string > >::size_type') -> "void":
        return _StlContainers.StringPairVector_reserve(self, n)

    def capacity(self) -> "std::vector< std::pair< std::string,std::string > >::size_type":
        return _StlContainers.StringPairVector_capacity(self)
    __swig_destroy__ = _StlContainers.delete_StringPairVector
    __del__ = lambda self: None
StringPairVector_swigregister = _StlContainers.StringPairVector_swigregister
StringPairVector_swigregister(StringPairVector)

class StringStringDoublePairPairVector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, StringStringDoublePairPairVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, StringStringDoublePairPairVector, name)
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _StlContainers.StringStringDoublePairPairVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _StlContainers.StringStringDoublePairPairVector___nonzero__(self)

    def __bool__(self) -> "bool":
        return _StlContainers.StringStringDoublePairPairVector___bool__(self)

    def __len__(self) -> "std::vector< std::pair< std::string,std::pair< std::string,double > > >::size_type":
        return _StlContainers.StringStringDoublePairPairVector___len__(self)

    def __getslice__(self, i: 'std::vector< std::pair< std::string,std::pair< std::string,double > > >::difference_type', j: 'std::vector< std::pair< std::string,std::pair< std::string,double > > >::difference_type') -> "std::vector< std::pair< std::string,std::pair< std::string,double > >,std::allocator< std::pair< std::string,std::pair< std::string,double > > > > *":
        return _StlContainers.StringStringDoublePairPairVector___getslice__(self, i, j)

    def __setslice__(self, *args) -> "void":
        return _StlContainers.StringStringDoublePairPairVector___setslice__(self, *args)

    def __delslice__(self, i: 'std::vector< std::pair< std::string,std::pair< std::string,double > > >::difference_type', j: 'std::vector< std::pair< std::string,std::pair< std::string,double > > >::difference_type') -> "void":
        return _StlContainers.StringStringDoublePairPairVector___delslice__(self, i, j)

    def __delitem__(self, *args) -> "void":
        return _StlContainers.StringStringDoublePairPairVector___delitem__(self, *args)

    def __getitem__(self, *args) -> "std::vector< std::pair< std::string,std::pair< std::string,double > > >::value_type const &":
        return _StlContainers.StringStringDoublePairPairVector___getitem__(self, *args)

    def __setitem__(self, *args) -> "void":
        return _StlContainers.StringStringDoublePairPairVector___setitem__(self, *args)

    def pop(self) -> "std::vector< std::pair< std::string,std::pair< std::string,double > > >::value_type":
        return _StlContainers.StringStringDoublePairPairVector_pop(self)

    def append(self, x: 'StringStringDoublePairPair') -> "void":
        return _StlContainers.StringStringDoublePairPairVector_append(self, x)

    def empty(self) -> "bool":
        return _StlContainers.StringStringDoublePairPairVector_empty(self)

    def size(self) -> "std::vector< std::pair< std::string,std::pair< std::string,double > > >::size_type":
        return _StlContainers.StringStringDoublePairPairVector_size(self)

    def swap(self, v: 'StringStringDoublePairPairVector') -> "void":
        return _StlContainers.StringStringDoublePairPairVector_swap(self, v)

    def begin(self) -> "std::vector< std::pair< std::string,std::pair< std::string,double > > >::iterator":
        return _StlContainers.StringStringDoublePairPairVector_begin(self)

    def end(self) -> "std::vector< std::pair< std::string,std::pair< std::string,double > > >::iterator":
        return _StlContainers.StringStringDoublePairPairVector_end(self)

    def rbegin(self) -> "std::vector< std::pair< std::string,std::pair< std::string,double > > >::reverse_iterator":
        return _StlContainers.StringStringDoublePairPairVector_rbegin(self)

    def rend(self) -> "std::vector< std::pair< std::string,std::pair< std::string,double > > >::reverse_iterator":
        return _StlContainers.StringStringDoublePairPairVector_rend(self)

    def clear(self) -> "void":
        return _StlContainers.StringStringDoublePairPairVector_clear(self)

    def get_allocator(self) -> "std::vector< std::pair< std::string,std::pair< std::string,double > > >::allocator_type":
        return _StlContainers.StringStringDoublePairPairVector_get_allocator(self)

    def pop_back(self) -> "void":
        return _StlContainers.StringStringDoublePairPairVector_pop_back(self)

    def erase(self, *args) -> "std::vector< std::pair< std::string,std::pair< std::string,double > > >::iterator":
        return _StlContainers.StringStringDoublePairPairVector_erase(self, *args)

    def __init__(self, *args):
        this = _StlContainers.new_StringStringDoublePairPairVector(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def push_back(self, x: 'StringStringDoublePairPair') -> "void":
        return _StlContainers.StringStringDoublePairPairVector_push_back(self, x)

    def front(self) -> "std::vector< std::pair< std::string,std::pair< std::string,double > > >::value_type const &":
        return _StlContainers.StringStringDoublePairPairVector_front(self)

    def back(self) -> "std::vector< std::pair< std::string,std::pair< std::string,double > > >::value_type const &":
        return _StlContainers.StringStringDoublePairPairVector_back(self)

    def assign(self, n: 'std::vector< std::pair< std::string,std::pair< std::string,double > > >::size_type', x: 'StringStringDoublePairPair') -> "void":
        return _StlContainers.StringStringDoublePairPairVector_assign(self, n, x)

    def resize(self, *args) -> "void":
        return _StlContainers.StringStringDoublePairPairVector_resize(self, *args)

    def insert(self, *args) -> "void":
        return _StlContainers.StringStringDoublePairPairVector_insert(self, *args)

    def reserve(self, n: 'std::vector< std::pair< std::string,std::pair< std::string,double > > >::size_type') -> "void":
        return _StlContainers.StringStringDoublePairPairVector_reserve(self, n)

    def capacity(self) -> "std::vector< std::pair< std::string,std::pair< std::string,double > > >::size_type":
        return _StlContainers.StringStringDoublePairPairVector_capacity(self)
    __swig_destroy__ = _StlContainers.delete_StringStringDoublePairPairVector
    __del__ = lambda self: None
StringStringDoublePairPairVector_swigregister = _StlContainers.StringStringDoublePairPairVector_swigregister
StringStringDoublePairPairVector_swigregister(StringStringDoublePairPairVector)

class StringDPFPairVector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, StringDPFPairVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, StringDPFPairVector, name)
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _StlContainers.StringDPFPairVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _StlContainers.StringDPFPairVector___nonzero__(self)

    def __bool__(self) -> "bool":
        return _StlContainers.StringDPFPairVector___bool__(self)

    def __len__(self) -> "std::vector< std::pair< std::string,std::function< double (std::vector< double > const &,double) > > >::size_type":
        return _StlContainers.StringDPFPairVector___len__(self)

    def __getslice__(self, i: 'std::vector< std::pair< std::string,std::function< double (std::vector< double > const &,double) > > >::difference_type', j: 'std::vector< std::pair< std::string,std::function< double (std::vector< double > const &,double) > > >::difference_type') -> "std::vector< std::pair< std::string,std::function< double (std::vector< double,std::allocator< double > > const &,double) > >,std::allocator< std::pair< std::string,std::function< double (std::vector< double,std::allocator< double > > const &,double) > > > > *":
        return _StlContainers.StringDPFPairVector___getslice__(self, i, j)

    def __setslice__(self, *args) -> "void":
        return _StlContainers.StringDPFPairVector___setslice__(self, *args)

    def __delslice__(self, i: 'std::vector< std::pair< std::string,std::function< double (std::vector< double > const &,double) > > >::difference_type', j: 'std::vector< std::pair< std::string,std::function< double (std::vector< double > const &,double) > > >::difference_type') -> "void":
        return _StlContainers.StringDPFPairVector___delslice__(self, i, j)

    def __delitem__(self, *args) -> "void":
        return _StlContainers.StringDPFPairVector___delitem__(self, *args)

    def __getitem__(self, *args) -> "std::vector< std::pair< std::string,std::function< double (std::vector< double > const &,double) > > >::value_type const &":
        return _StlContainers.StringDPFPairVector___getitem__(self, *args)

    def __setitem__(self, *args) -> "void":
        return _StlContainers.StringDPFPairVector___setitem__(self, *args)

    def pop(self) -> "std::vector< std::pair< std::string,std::function< double (std::vector< double > const &,double) > > >::value_type":
        return _StlContainers.StringDPFPairVector_pop(self)

    def append(self, x: 'StringDPFPair') -> "void":
        return _StlContainers.StringDPFPairVector_append(self, x)

    def empty(self) -> "bool":
        return _StlContainers.StringDPFPairVector_empty(self)

    def size(self) -> "std::vector< std::pair< std::string,std::function< double (std::vector< double > const &,double) > > >::size_type":
        return _StlContainers.StringDPFPairVector_size(self)

    def swap(self, v: 'StringDPFPairVector') -> "void":
        return _StlContainers.StringDPFPairVector_swap(self, v)

    def begin(self) -> "std::vector< std::pair< std::string,std::function< double (std::vector< double > const &,double) > > >::iterator":
        return _StlContainers.StringDPFPairVector_begin(self)

    def end(self) -> "std::vector< std::pair< std::string,std::function< double (std::vector< double > const &,double) > > >::iterator":
        return _StlContainers.StringDPFPairVector_end(self)

    def rbegin(self) -> "std::vector< std::pair< std::string,std::function< double (std::vector< double > const &,double) > > >::reverse_iterator":
        return _StlContainers.StringDPFPairVector_rbegin(self)

    def rend(self) -> "std::vector< std::pair< std::string,std::function< double (std::vector< double > const &,double) > > >::reverse_iterator":
        return _StlContainers.StringDPFPairVector_rend(self)

    def clear(self) -> "void":
        return _StlContainers.StringDPFPairVector_clear(self)

    def get_allocator(self) -> "std::vector< std::pair< std::string,std::function< double (std::vector< double > const &,double) > > >::allocator_type":
        return _StlContainers.StringDPFPairVector_get_allocator(self)

    def pop_back(self) -> "void":
        return _StlContainers.StringDPFPairVector_pop_back(self)

    def erase(self, *args) -> "std::vector< std::pair< std::string,std::function< double (std::vector< double > const &,double) > > >::iterator":
        return _StlContainers.StringDPFPairVector_erase(self, *args)

    def __init__(self, *args):
        this = _StlContainers.new_StringDPFPairVector(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def push_back(self, x: 'StringDPFPair') -> "void":
        return _StlContainers.StringDPFPairVector_push_back(self, x)

    def front(self) -> "std::vector< std::pair< std::string,std::function< double (std::vector< double > const &,double) > > >::value_type const &":
        return _StlContainers.StringDPFPairVector_front(self)

    def back(self) -> "std::vector< std::pair< std::string,std::function< double (std::vector< double > const &,double) > > >::value_type const &":
        return _StlContainers.StringDPFPairVector_back(self)

    def assign(self, n: 'std::vector< std::pair< std::string,std::function< double (std::vector< double > const &,double) > > >::size_type', x: 'StringDPFPair') -> "void":
        return _StlContainers.StringDPFPairVector_assign(self, n, x)

    def resize(self, *args) -> "void":
        return _StlContainers.StringDPFPairVector_resize(self, *args)

    def insert(self, *args) -> "void":
        return _StlContainers.StringDPFPairVector_insert(self, *args)

    def reserve(self, n: 'std::vector< std::pair< std::string,std::function< double (std::vector< double > const &,double) > > >::size_type') -> "void":
        return _StlContainers.StringDPFPairVector_reserve(self, n)

    def capacity(self) -> "std::vector< std::pair< std::string,std::function< double (std::vector< double > const &,double) > > >::size_type":
        return _StlContainers.StringDPFPairVector_capacity(self)
    __swig_destroy__ = _StlContainers.delete_StringDPFPairVector
    __del__ = lambda self: None
StringDPFPairVector_swigregister = _StlContainers.StringDPFPairVector_swigregister
StringDPFPairVector_swigregister(StringDPFPairVector)

class SignedCharVector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SignedCharVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SignedCharVector, name)
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _StlContainers.SignedCharVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _StlContainers.SignedCharVector___nonzero__(self)

    def __bool__(self) -> "bool":
        return _StlContainers.SignedCharVector___bool__(self)

    def __len__(self) -> "std::vector< signed char >::size_type":
        return _StlContainers.SignedCharVector___len__(self)

    def __getslice__(self, i: 'std::vector< signed char >::difference_type', j: 'std::vector< signed char >::difference_type') -> "std::vector< signed char,std::allocator< signed char > > *":
        return _StlContainers.SignedCharVector___getslice__(self, i, j)

    def __setslice__(self, *args) -> "void":
        return _StlContainers.SignedCharVector___setslice__(self, *args)

    def __delslice__(self, i: 'std::vector< signed char >::difference_type', j: 'std::vector< signed char >::difference_type') -> "void":
        return _StlContainers.SignedCharVector___delslice__(self, i, j)

    def __delitem__(self, *args) -> "void":
        return _StlContainers.SignedCharVector___delitem__(self, *args)

    def __getitem__(self, *args) -> "std::vector< signed char >::value_type const &":
        return _StlContainers.SignedCharVector___getitem__(self, *args)

    def __setitem__(self, *args) -> "void":
        return _StlContainers.SignedCharVector___setitem__(self, *args)

    def pop(self) -> "std::vector< signed char >::value_type":
        return _StlContainers.SignedCharVector_pop(self)

    def append(self, x: 'std::vector< signed char >::value_type const &') -> "void":
        return _StlContainers.SignedCharVector_append(self, x)

    def empty(self) -> "bool":
        return _StlContainers.SignedCharVector_empty(self)

    def size(self) -> "std::vector< signed char >::size_type":
        return _StlContainers.SignedCharVector_size(self)

    def swap(self, v: 'SignedCharVector') -> "void":
        return _StlContainers.SignedCharVector_swap(self, v)

    def begin(self) -> "std::vector< signed char >::iterator":
        return _StlContainers.SignedCharVector_begin(self)

    def end(self) -> "std::vector< signed char >::iterator":
        return _StlContainers.SignedCharVector_end(self)

    def rbegin(self) -> "std::vector< signed char >::reverse_iterator":
        return _StlContainers.SignedCharVector_rbegin(self)

    def rend(self) -> "std::vector< signed char >::reverse_iterator":
        return _StlContainers.SignedCharVector_rend(self)

    def clear(self) -> "void":
        return _StlContainers.SignedCharVector_clear(self)

    def get_allocator(self) -> "std::vector< signed char >::allocator_type":
        return _StlContainers.SignedCharVector_get_allocator(self)

    def pop_back(self) -> "void":
        return _StlContainers.SignedCharVector_pop_back(self)

    def erase(self, *args) -> "std::vector< signed char >::iterator":
        return _StlContainers.SignedCharVector_erase(self, *args)

    def __init__(self, *args):
        this = _StlContainers.new_SignedCharVector(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def push_back(self, x: 'std::vector< signed char >::value_type const &') -> "void":
        return _StlContainers.SignedCharVector_push_back(self, x)

    def front(self) -> "std::vector< signed char >::value_type const &":
        return _StlContainers.SignedCharVector_front(self)

    def back(self) -> "std::vector< signed char >::value_type const &":
        return _StlContainers.SignedCharVector_back(self)

    def assign(self, n: 'std::vector< signed char >::size_type', x: 'std::vector< signed char >::value_type const &') -> "void":
        return _StlContainers.SignedCharVector_assign(self, n, x)

    def resize(self, *args) -> "void":
        return _StlContainers.SignedCharVector_resize(self, *args)

    def insert(self, *args) -> "void":
        return _StlContainers.SignedCharVector_insert(self, *args)

    def reserve(self, n: 'std::vector< signed char >::size_type') -> "void":
        return _StlContainers.SignedCharVector_reserve(self, n)

    def capacity(self) -> "std::vector< signed char >::size_type":
        return _StlContainers.SignedCharVector_capacity(self)
    __swig_destroy__ = _StlContainers.delete_SignedCharVector
    __del__ = lambda self: None
SignedCharVector_swigregister = _StlContainers.SignedCharVector_swigregister
SignedCharVector_swigregister(SignedCharVector)

class UnsignedCharVector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, UnsignedCharVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, UnsignedCharVector, name)
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _StlContainers.UnsignedCharVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _StlContainers.UnsignedCharVector___nonzero__(self)

    def __bool__(self) -> "bool":
        return _StlContainers.UnsignedCharVector___bool__(self)

    def __len__(self) -> "std::vector< unsigned char >::size_type":
        return _StlContainers.UnsignedCharVector___len__(self)

    def __getslice__(self, i: 'std::vector< unsigned char >::difference_type', j: 'std::vector< unsigned char >::difference_type') -> "std::vector< unsigned char,std::allocator< unsigned char > > *":
        return _StlContainers.UnsignedCharVector___getslice__(self, i, j)

    def __setslice__(self, *args) -> "void":
        return _StlContainers.UnsignedCharVector___setslice__(self, *args)

    def __delslice__(self, i: 'std::vector< unsigned char >::difference_type', j: 'std::vector< unsigned char >::difference_type') -> "void":
        return _StlContainers.UnsignedCharVector___delslice__(self, i, j)

    def __delitem__(self, *args) -> "void":
        return _StlContainers.UnsignedCharVector___delitem__(self, *args)

    def __getitem__(self, *args) -> "std::vector< unsigned char >::value_type const &":
        return _StlContainers.UnsignedCharVector___getitem__(self, *args)

    def __setitem__(self, *args) -> "void":
        return _StlContainers.UnsignedCharVector___setitem__(self, *args)

    def pop(self) -> "std::vector< unsigned char >::value_type":
        return _StlContainers.UnsignedCharVector_pop(self)

    def append(self, x: 'std::vector< unsigned char >::value_type const &') -> "void":
        return _StlContainers.UnsignedCharVector_append(self, x)

    def empty(self) -> "bool":
        return _StlContainers.UnsignedCharVector_empty(self)

    def size(self) -> "std::vector< unsigned char >::size_type":
        return _StlContainers.UnsignedCharVector_size(self)

    def swap(self, v: 'UnsignedCharVector') -> "void":
        return _StlContainers.UnsignedCharVector_swap(self, v)

    def begin(self) -> "std::vector< unsigned char >::iterator":
        return _StlContainers.UnsignedCharVector_begin(self)

    def end(self) -> "std::vector< unsigned char >::iterator":
        return _StlContainers.UnsignedCharVector_end(self)

    def rbegin(self) -> "std::vector< unsigned char >::reverse_iterator":
        return _StlContainers.UnsignedCharVector_rbegin(self)

    def rend(self) -> "std::vector< unsigned char >::reverse_iterator":
        return _StlContainers.UnsignedCharVector_rend(self)

    def clear(self) -> "void":
        return _StlContainers.UnsignedCharVector_clear(self)

    def get_allocator(self) -> "std::vector< unsigned char >::allocator_type":
        return _StlContainers.UnsignedCharVector_get_allocator(self)

    def pop_back(self) -> "void":
        return _StlContainers.UnsignedCharVector_pop_back(self)

    def erase(self, *args) -> "std::vector< unsigned char >::iterator":
        return _StlContainers.UnsignedCharVector_erase(self, *args)

    def __init__(self, *args):
        this = _StlContainers.new_UnsignedCharVector(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def push_back(self, x: 'std::vector< unsigned char >::value_type const &') -> "void":
        return _StlContainers.UnsignedCharVector_push_back(self, x)

    def front(self) -> "std::vector< unsigned char >::value_type const &":
        return _StlContainers.UnsignedCharVector_front(self)

    def back(self) -> "std::vector< unsigned char >::value_type const &":
        return _StlContainers.UnsignedCharVector_back(self)

    def assign(self, n: 'std::vector< unsigned char >::size_type', x: 'std::vector< unsigned char >::value_type const &') -> "void":
        return _StlContainers.UnsignedCharVector_assign(self, n, x)

    def resize(self, *args) -> "void":
        return _StlContainers.UnsignedCharVector_resize(self, *args)

    def insert(self, *args) -> "void":
        return _StlContainers.UnsignedCharVector_insert(self, *args)

    def reserve(self, n: 'std::vector< unsigned char >::size_type') -> "void":
        return _StlContainers.UnsignedCharVector_reserve(self, n)

    def capacity(self) -> "std::vector< unsigned char >::size_type":
        return _StlContainers.UnsignedCharVector_capacity(self)
    __swig_destroy__ = _StlContainers.delete_UnsignedCharVector
    __del__ = lambda self: None
UnsignedCharVector_swigregister = _StlContainers.UnsignedCharVector_swigregister
UnsignedCharVector_swigregister(UnsignedCharVector)

class ShortVector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ShortVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ShortVector, name)
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _StlContainers.ShortVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _StlContainers.ShortVector___nonzero__(self)

    def __bool__(self) -> "bool":
        return _StlContainers.ShortVector___bool__(self)

    def __len__(self) -> "std::vector< short >::size_type":
        return _StlContainers.ShortVector___len__(self)

    def __getslice__(self, i: 'std::vector< short >::difference_type', j: 'std::vector< short >::difference_type') -> "std::vector< short,std::allocator< short > > *":
        return _StlContainers.ShortVector___getslice__(self, i, j)

    def __setslice__(self, *args) -> "void":
        return _StlContainers.ShortVector___setslice__(self, *args)

    def __delslice__(self, i: 'std::vector< short >::difference_type', j: 'std::vector< short >::difference_type') -> "void":
        return _StlContainers.ShortVector___delslice__(self, i, j)

    def __delitem__(self, *args) -> "void":
        return _StlContainers.ShortVector___delitem__(self, *args)

    def __getitem__(self, *args) -> "std::vector< short >::value_type const &":
        return _StlContainers.ShortVector___getitem__(self, *args)

    def __setitem__(self, *args) -> "void":
        return _StlContainers.ShortVector___setitem__(self, *args)

    def pop(self) -> "std::vector< short >::value_type":
        return _StlContainers.ShortVector_pop(self)

    def append(self, x: 'std::vector< short >::value_type const &') -> "void":
        return _StlContainers.ShortVector_append(self, x)

    def empty(self) -> "bool":
        return _StlContainers.ShortVector_empty(self)

    def size(self) -> "std::vector< short >::size_type":
        return _StlContainers.ShortVector_size(self)

    def swap(self, v: 'ShortVector') -> "void":
        return _StlContainers.ShortVector_swap(self, v)

    def begin(self) -> "std::vector< short >::iterator":
        return _StlContainers.ShortVector_begin(self)

    def end(self) -> "std::vector< short >::iterator":
        return _StlContainers.ShortVector_end(self)

    def rbegin(self) -> "std::vector< short >::reverse_iterator":
        return _StlContainers.ShortVector_rbegin(self)

    def rend(self) -> "std::vector< short >::reverse_iterator":
        return _StlContainers.ShortVector_rend(self)

    def clear(self) -> "void":
        return _StlContainers.ShortVector_clear(self)

    def get_allocator(self) -> "std::vector< short >::allocator_type":
        return _StlContainers.ShortVector_get_allocator(self)

    def pop_back(self) -> "void":
        return _StlContainers.ShortVector_pop_back(self)

    def erase(self, *args) -> "std::vector< short >::iterator":
        return _StlContainers.ShortVector_erase(self, *args)

    def __init__(self, *args):
        this = _StlContainers.new_ShortVector(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def push_back(self, x: 'std::vector< short >::value_type const &') -> "void":
        return _StlContainers.ShortVector_push_back(self, x)

    def front(self) -> "std::vector< short >::value_type const &":
        return _StlContainers.ShortVector_front(self)

    def back(self) -> "std::vector< short >::value_type const &":
        return _StlContainers.ShortVector_back(self)

    def assign(self, n: 'std::vector< short >::size_type', x: 'std::vector< short >::value_type const &') -> "void":
        return _StlContainers.ShortVector_assign(self, n, x)

    def resize(self, *args) -> "void":
        return _StlContainers.ShortVector_resize(self, *args)

    def insert(self, *args) -> "void":
        return _StlContainers.ShortVector_insert(self, *args)

    def reserve(self, n: 'std::vector< short >::size_type') -> "void":
        return _StlContainers.ShortVector_reserve(self, n)

    def capacity(self) -> "std::vector< short >::size_type":
        return _StlContainers.ShortVector_capacity(self)
    __swig_destroy__ = _StlContainers.delete_ShortVector
    __del__ = lambda self: None
ShortVector_swigregister = _StlContainers.ShortVector_swigregister
ShortVector_swigregister(ShortVector)

class UnsignedShortVector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, UnsignedShortVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, UnsignedShortVector, name)
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _StlContainers.UnsignedShortVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _StlContainers.UnsignedShortVector___nonzero__(self)

    def __bool__(self) -> "bool":
        return _StlContainers.UnsignedShortVector___bool__(self)

    def __len__(self) -> "std::vector< unsigned short >::size_type":
        return _StlContainers.UnsignedShortVector___len__(self)

    def __getslice__(self, i: 'std::vector< unsigned short >::difference_type', j: 'std::vector< unsigned short >::difference_type') -> "std::vector< unsigned short,std::allocator< unsigned short > > *":
        return _StlContainers.UnsignedShortVector___getslice__(self, i, j)

    def __setslice__(self, *args) -> "void":
        return _StlContainers.UnsignedShortVector___setslice__(self, *args)

    def __delslice__(self, i: 'std::vector< unsigned short >::difference_type', j: 'std::vector< unsigned short >::difference_type') -> "void":
        return _StlContainers.UnsignedShortVector___delslice__(self, i, j)

    def __delitem__(self, *args) -> "void":
        return _StlContainers.UnsignedShortVector___delitem__(self, *args)

    def __getitem__(self, *args) -> "std::vector< unsigned short >::value_type const &":
        return _StlContainers.UnsignedShortVector___getitem__(self, *args)

    def __setitem__(self, *args) -> "void":
        return _StlContainers.UnsignedShortVector___setitem__(self, *args)

    def pop(self) -> "std::vector< unsigned short >::value_type":
        return _StlContainers.UnsignedShortVector_pop(self)

    def append(self, x: 'std::vector< unsigned short >::value_type const &') -> "void":
        return _StlContainers.UnsignedShortVector_append(self, x)

    def empty(self) -> "bool":
        return _StlContainers.UnsignedShortVector_empty(self)

    def size(self) -> "std::vector< unsigned short >::size_type":
        return _StlContainers.UnsignedShortVector_size(self)

    def swap(self, v: 'UnsignedShortVector') -> "void":
        return _StlContainers.UnsignedShortVector_swap(self, v)

    def begin(self) -> "std::vector< unsigned short >::iterator":
        return _StlContainers.UnsignedShortVector_begin(self)

    def end(self) -> "std::vector< unsigned short >::iterator":
        return _StlContainers.UnsignedShortVector_end(self)

    def rbegin(self) -> "std::vector< unsigned short >::reverse_iterator":
        return _StlContainers.UnsignedShortVector_rbegin(self)

    def rend(self) -> "std::vector< unsigned short >::reverse_iterator":
        return _StlContainers.UnsignedShortVector_rend(self)

    def clear(self) -> "void":
        return _StlContainers.UnsignedShortVector_clear(self)

    def get_allocator(self) -> "std::vector< unsigned short >::allocator_type":
        return _StlContainers.UnsignedShortVector_get_allocator(self)

    def pop_back(self) -> "void":
        return _StlContainers.UnsignedShortVector_pop_back(self)

    def erase(self, *args) -> "std::vector< unsigned short >::iterator":
        return _StlContainers.UnsignedShortVector_erase(self, *args)

    def __init__(self, *args):
        this = _StlContainers.new_UnsignedShortVector(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def push_back(self, x: 'std::vector< unsigned short >::value_type const &') -> "void":
        return _StlContainers.UnsignedShortVector_push_back(self, x)

    def front(self) -> "std::vector< unsigned short >::value_type const &":
        return _StlContainers.UnsignedShortVector_front(self)

    def back(self) -> "std::vector< unsigned short >::value_type const &":
        return _StlContainers.UnsignedShortVector_back(self)

    def assign(self, n: 'std::vector< unsigned short >::size_type', x: 'std::vector< unsigned short >::value_type const &') -> "void":
        return _StlContainers.UnsignedShortVector_assign(self, n, x)

    def resize(self, *args) -> "void":
        return _StlContainers.UnsignedShortVector_resize(self, *args)

    def insert(self, *args) -> "void":
        return _StlContainers.UnsignedShortVector_insert(self, *args)

    def reserve(self, n: 'std::vector< unsigned short >::size_type') -> "void":
        return _StlContainers.UnsignedShortVector_reserve(self, n)

    def capacity(self) -> "std::vector< unsigned short >::size_type":
        return _StlContainers.UnsignedShortVector_capacity(self)
    __swig_destroy__ = _StlContainers.delete_UnsignedShortVector
    __del__ = lambda self: None
UnsignedShortVector_swigregister = _StlContainers.UnsignedShortVector_swigregister
UnsignedShortVector_swigregister(UnsignedShortVector)

class IntVector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, IntVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, IntVector, name)
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _StlContainers.IntVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _StlContainers.IntVector___nonzero__(self)

    def __bool__(self) -> "bool":
        return _StlContainers.IntVector___bool__(self)

    def __len__(self) -> "std::vector< int >::size_type":
        return _StlContainers.IntVector___len__(self)

    def __getslice__(self, i: 'std::vector< int >::difference_type', j: 'std::vector< int >::difference_type') -> "std::vector< int,std::allocator< int > > *":
        return _StlContainers.IntVector___getslice__(self, i, j)

    def __setslice__(self, *args) -> "void":
        return _StlContainers.IntVector___setslice__(self, *args)

    def __delslice__(self, i: 'std::vector< int >::difference_type', j: 'std::vector< int >::difference_type') -> "void":
        return _StlContainers.IntVector___delslice__(self, i, j)

    def __delitem__(self, *args) -> "void":
        return _StlContainers.IntVector___delitem__(self, *args)

    def __getitem__(self, *args) -> "std::vector< int >::value_type const &":
        return _StlContainers.IntVector___getitem__(self, *args)

    def __setitem__(self, *args) -> "void":
        return _StlContainers.IntVector___setitem__(self, *args)

    def pop(self) -> "std::vector< int >::value_type":
        return _StlContainers.IntVector_pop(self)

    def append(self, x: 'std::vector< int >::value_type const &') -> "void":
        return _StlContainers.IntVector_append(self, x)

    def empty(self) -> "bool":
        return _StlContainers.IntVector_empty(self)

    def size(self) -> "std::vector< int >::size_type":
        return _StlContainers.IntVector_size(self)

    def swap(self, v: 'IntVector') -> "void":
        return _StlContainers.IntVector_swap(self, v)

    def begin(self) -> "std::vector< int >::iterator":
        return _StlContainers.IntVector_begin(self)

    def end(self) -> "std::vector< int >::iterator":
        return _StlContainers.IntVector_end(self)

    def rbegin(self) -> "std::vector< int >::reverse_iterator":
        return _StlContainers.IntVector_rbegin(self)

    def rend(self) -> "std::vector< int >::reverse_iterator":
        return _StlContainers.IntVector_rend(self)

    def clear(self) -> "void":
        return _StlContainers.IntVector_clear(self)

    def get_allocator(self) -> "std::vector< int >::allocator_type":
        return _StlContainers.IntVector_get_allocator(self)

    def pop_back(self) -> "void":
        return _StlContainers.IntVector_pop_back(self)

    def erase(self, *args) -> "std::vector< int >::iterator":
        return _StlContainers.IntVector_erase(self, *args)

    def __init__(self, *args):
        this = _StlContainers.new_IntVector(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def push_back(self, x: 'std::vector< int >::value_type const &') -> "void":
        return _StlContainers.IntVector_push_back(self, x)

    def front(self) -> "std::vector< int >::value_type const &":
        return _StlContainers.IntVector_front(self)

    def back(self) -> "std::vector< int >::value_type const &":
        return _StlContainers.IntVector_back(self)

    def assign(self, n: 'std::vector< int >::size_type', x: 'std::vector< int >::value_type const &') -> "void":
        return _StlContainers.IntVector_assign(self, n, x)

    def resize(self, *args) -> "void":
        return _StlContainers.IntVector_resize(self, *args)

    def insert(self, *args) -> "void":
        return _StlContainers.IntVector_insert(self, *args)

    def reserve(self, n: 'std::vector< int >::size_type') -> "void":
        return _StlContainers.IntVector_reserve(self, n)

    def capacity(self) -> "std::vector< int >::size_type":
        return _StlContainers.IntVector_capacity(self)
    __swig_destroy__ = _StlContainers.delete_IntVector
    __del__ = lambda self: None
IntVector_swigregister = _StlContainers.IntVector_swigregister
IntVector_swigregister(IntVector)

class UnsignedIntVector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, UnsignedIntVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, UnsignedIntVector, name)
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _StlContainers.UnsignedIntVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _StlContainers.UnsignedIntVector___nonzero__(self)

    def __bool__(self) -> "bool":
        return _StlContainers.UnsignedIntVector___bool__(self)

    def __len__(self) -> "std::vector< unsigned int >::size_type":
        return _StlContainers.UnsignedIntVector___len__(self)

    def __getslice__(self, i: 'std::vector< unsigned int >::difference_type', j: 'std::vector< unsigned int >::difference_type') -> "std::vector< unsigned int,std::allocator< unsigned int > > *":
        return _StlContainers.UnsignedIntVector___getslice__(self, i, j)

    def __setslice__(self, *args) -> "void":
        return _StlContainers.UnsignedIntVector___setslice__(self, *args)

    def __delslice__(self, i: 'std::vector< unsigned int >::difference_type', j: 'std::vector< unsigned int >::difference_type') -> "void":
        return _StlContainers.UnsignedIntVector___delslice__(self, i, j)

    def __delitem__(self, *args) -> "void":
        return _StlContainers.UnsignedIntVector___delitem__(self, *args)

    def __getitem__(self, *args) -> "std::vector< unsigned int >::value_type const &":
        return _StlContainers.UnsignedIntVector___getitem__(self, *args)

    def __setitem__(self, *args) -> "void":
        return _StlContainers.UnsignedIntVector___setitem__(self, *args)

    def pop(self) -> "std::vector< unsigned int >::value_type":
        return _StlContainers.UnsignedIntVector_pop(self)

    def append(self, x: 'std::vector< unsigned int >::value_type const &') -> "void":
        return _StlContainers.UnsignedIntVector_append(self, x)

    def empty(self) -> "bool":
        return _StlContainers.UnsignedIntVector_empty(self)

    def size(self) -> "std::vector< unsigned int >::size_type":
        return _StlContainers.UnsignedIntVector_size(self)

    def swap(self, v: 'UnsignedIntVector') -> "void":
        return _StlContainers.UnsignedIntVector_swap(self, v)

    def begin(self) -> "std::vector< unsigned int >::iterator":
        return _StlContainers.UnsignedIntVector_begin(self)

    def end(self) -> "std::vector< unsigned int >::iterator":
        return _StlContainers.UnsignedIntVector_end(self)

    def rbegin(self) -> "std::vector< unsigned int >::reverse_iterator":
        return _StlContainers.UnsignedIntVector_rbegin(self)

    def rend(self) -> "std::vector< unsigned int >::reverse_iterator":
        return _StlContainers.UnsignedIntVector_rend(self)

    def clear(self) -> "void":
        return _StlContainers.UnsignedIntVector_clear(self)

    def get_allocator(self) -> "std::vector< unsigned int >::allocator_type":
        return _StlContainers.UnsignedIntVector_get_allocator(self)

    def pop_back(self) -> "void":
        return _StlContainers.UnsignedIntVector_pop_back(self)

    def erase(self, *args) -> "std::vector< unsigned int >::iterator":
        return _StlContainers.UnsignedIntVector_erase(self, *args)

    def __init__(self, *args):
        this = _StlContainers.new_UnsignedIntVector(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def push_back(self, x: 'std::vector< unsigned int >::value_type const &') -> "void":
        return _StlContainers.UnsignedIntVector_push_back(self, x)

    def front(self) -> "std::vector< unsigned int >::value_type const &":
        return _StlContainers.UnsignedIntVector_front(self)

    def back(self) -> "std::vector< unsigned int >::value_type const &":
        return _StlContainers.UnsignedIntVector_back(self)

    def assign(self, n: 'std::vector< unsigned int >::size_type', x: 'std::vector< unsigned int >::value_type const &') -> "void":
        return _StlContainers.UnsignedIntVector_assign(self, n, x)

    def resize(self, *args) -> "void":
        return _StlContainers.UnsignedIntVector_resize(self, *args)

    def insert(self, *args) -> "void":
        return _StlContainers.UnsignedIntVector_insert(self, *args)

    def reserve(self, n: 'std::vector< unsigned int >::size_type') -> "void":
        return _StlContainers.UnsignedIntVector_reserve(self, n)

    def capacity(self) -> "std::vector< unsigned int >::size_type":
        return _StlContainers.UnsignedIntVector_capacity(self)
    __swig_destroy__ = _StlContainers.delete_UnsignedIntVector
    __del__ = lambda self: None
UnsignedIntVector_swigregister = _StlContainers.UnsignedIntVector_swigregister
UnsignedIntVector_swigregister(UnsignedIntVector)

class LongVector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, LongVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, LongVector, name)
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _StlContainers.LongVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _StlContainers.LongVector___nonzero__(self)

    def __bool__(self) -> "bool":
        return _StlContainers.LongVector___bool__(self)

    def __len__(self) -> "std::vector< long >::size_type":
        return _StlContainers.LongVector___len__(self)

    def __getslice__(self, i: 'std::vector< long >::difference_type', j: 'std::vector< long >::difference_type') -> "std::vector< long,std::allocator< long > > *":
        return _StlContainers.LongVector___getslice__(self, i, j)

    def __setslice__(self, *args) -> "void":
        return _StlContainers.LongVector___setslice__(self, *args)

    def __delslice__(self, i: 'std::vector< long >::difference_type', j: 'std::vector< long >::difference_type') -> "void":
        return _StlContainers.LongVector___delslice__(self, i, j)

    def __delitem__(self, *args) -> "void":
        return _StlContainers.LongVector___delitem__(self, *args)

    def __getitem__(self, *args) -> "std::vector< long >::value_type const &":
        return _StlContainers.LongVector___getitem__(self, *args)

    def __setitem__(self, *args) -> "void":
        return _StlContainers.LongVector___setitem__(self, *args)

    def pop(self) -> "std::vector< long >::value_type":
        return _StlContainers.LongVector_pop(self)

    def append(self, x: 'std::vector< long >::value_type const &') -> "void":
        return _StlContainers.LongVector_append(self, x)

    def empty(self) -> "bool":
        return _StlContainers.LongVector_empty(self)

    def size(self) -> "std::vector< long >::size_type":
        return _StlContainers.LongVector_size(self)

    def swap(self, v: 'LongVector') -> "void":
        return _StlContainers.LongVector_swap(self, v)

    def begin(self) -> "std::vector< long >::iterator":
        return _StlContainers.LongVector_begin(self)

    def end(self) -> "std::vector< long >::iterator":
        return _StlContainers.LongVector_end(self)

    def rbegin(self) -> "std::vector< long >::reverse_iterator":
        return _StlContainers.LongVector_rbegin(self)

    def rend(self) -> "std::vector< long >::reverse_iterator":
        return _StlContainers.LongVector_rend(self)

    def clear(self) -> "void":
        return _StlContainers.LongVector_clear(self)

    def get_allocator(self) -> "std::vector< long >::allocator_type":
        return _StlContainers.LongVector_get_allocator(self)

    def pop_back(self) -> "void":
        return _StlContainers.LongVector_pop_back(self)

    def erase(self, *args) -> "std::vector< long >::iterator":
        return _StlContainers.LongVector_erase(self, *args)

    def __init__(self, *args):
        this = _StlContainers.new_LongVector(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def push_back(self, x: 'std::vector< long >::value_type const &') -> "void":
        return _StlContainers.LongVector_push_back(self, x)

    def front(self) -> "std::vector< long >::value_type const &":
        return _StlContainers.LongVector_front(self)

    def back(self) -> "std::vector< long >::value_type const &":
        return _StlContainers.LongVector_back(self)

    def assign(self, n: 'std::vector< long >::size_type', x: 'std::vector< long >::value_type const &') -> "void":
        return _StlContainers.LongVector_assign(self, n, x)

    def resize(self, *args) -> "void":
        return _StlContainers.LongVector_resize(self, *args)

    def insert(self, *args) -> "void":
        return _StlContainers.LongVector_insert(self, *args)

    def reserve(self, n: 'std::vector< long >::size_type') -> "void":
        return _StlContainers.LongVector_reserve(self, n)

    def capacity(self) -> "std::vector< long >::size_type":
        return _StlContainers.LongVector_capacity(self)
    __swig_destroy__ = _StlContainers.delete_LongVector
    __del__ = lambda self: None
LongVector_swigregister = _StlContainers.LongVector_swigregister
LongVector_swigregister(LongVector)

class UnsignedLongVector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, UnsignedLongVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, UnsignedLongVector, name)
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _StlContainers.UnsignedLongVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _StlContainers.UnsignedLongVector___nonzero__(self)

    def __bool__(self) -> "bool":
        return _StlContainers.UnsignedLongVector___bool__(self)

    def __len__(self) -> "std::vector< unsigned long >::size_type":
        return _StlContainers.UnsignedLongVector___len__(self)

    def __getslice__(self, i: 'std::vector< unsigned long >::difference_type', j: 'std::vector< unsigned long >::difference_type') -> "std::vector< unsigned long,std::allocator< unsigned long > > *":
        return _StlContainers.UnsignedLongVector___getslice__(self, i, j)

    def __setslice__(self, *args) -> "void":
        return _StlContainers.UnsignedLongVector___setslice__(self, *args)

    def __delslice__(self, i: 'std::vector< unsigned long >::difference_type', j: 'std::vector< unsigned long >::difference_type') -> "void":
        return _StlContainers.UnsignedLongVector___delslice__(self, i, j)

    def __delitem__(self, *args) -> "void":
        return _StlContainers.UnsignedLongVector___delitem__(self, *args)

    def __getitem__(self, *args) -> "std::vector< unsigned long >::value_type const &":
        return _StlContainers.UnsignedLongVector___getitem__(self, *args)

    def __setitem__(self, *args) -> "void":
        return _StlContainers.UnsignedLongVector___setitem__(self, *args)

    def pop(self) -> "std::vector< unsigned long >::value_type":
        return _StlContainers.UnsignedLongVector_pop(self)

    def append(self, x: 'std::vector< unsigned long >::value_type const &') -> "void":
        return _StlContainers.UnsignedLongVector_append(self, x)

    def empty(self) -> "bool":
        return _StlContainers.UnsignedLongVector_empty(self)

    def size(self) -> "std::vector< unsigned long >::size_type":
        return _StlContainers.UnsignedLongVector_size(self)

    def swap(self, v: 'UnsignedLongVector') -> "void":
        return _StlContainers.UnsignedLongVector_swap(self, v)

    def begin(self) -> "std::vector< unsigned long >::iterator":
        return _StlContainers.UnsignedLongVector_begin(self)

    def end(self) -> "std::vector< unsigned long >::iterator":
        return _StlContainers.UnsignedLongVector_end(self)

    def rbegin(self) -> "std::vector< unsigned long >::reverse_iterator":
        return _StlContainers.UnsignedLongVector_rbegin(self)

    def rend(self) -> "std::vector< unsigned long >::reverse_iterator":
        return _StlContainers.UnsignedLongVector_rend(self)

    def clear(self) -> "void":
        return _StlContainers.UnsignedLongVector_clear(self)

    def get_allocator(self) -> "std::vector< unsigned long >::allocator_type":
        return _StlContainers.UnsignedLongVector_get_allocator(self)

    def pop_back(self) -> "void":
        return _StlContainers.UnsignedLongVector_pop_back(self)

    def erase(self, *args) -> "std::vector< unsigned long >::iterator":
        return _StlContainers.UnsignedLongVector_erase(self, *args)

    def __init__(self, *args):
        this = _StlContainers.new_UnsignedLongVector(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def push_back(self, x: 'std::vector< unsigned long >::value_type const &') -> "void":
        return _StlContainers.UnsignedLongVector_push_back(self, x)

    def front(self) -> "std::vector< unsigned long >::value_type const &":
        return _StlContainers.UnsignedLongVector_front(self)

    def back(self) -> "std::vector< unsigned long >::value_type const &":
        return _StlContainers.UnsignedLongVector_back(self)

    def assign(self, n: 'std::vector< unsigned long >::size_type', x: 'std::vector< unsigned long >::value_type const &') -> "void":
        return _StlContainers.UnsignedLongVector_assign(self, n, x)

    def resize(self, *args) -> "void":
        return _StlContainers.UnsignedLongVector_resize(self, *args)

    def insert(self, *args) -> "void":
        return _StlContainers.UnsignedLongVector_insert(self, *args)

    def reserve(self, n: 'std::vector< unsigned long >::size_type') -> "void":
        return _StlContainers.UnsignedLongVector_reserve(self, n)

    def capacity(self) -> "std::vector< unsigned long >::size_type":
        return _StlContainers.UnsignedLongVector_capacity(self)
    __swig_destroy__ = _StlContainers.delete_UnsignedLongVector
    __del__ = lambda self: None
UnsignedLongVector_swigregister = _StlContainers.UnsignedLongVector_swigregister
UnsignedLongVector_swigregister(UnsignedLongVector)

class LongLongVector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, LongLongVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, LongLongVector, name)
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _StlContainers.LongLongVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _StlContainers.LongLongVector___nonzero__(self)

    def __bool__(self) -> "bool":
        return _StlContainers.LongLongVector___bool__(self)

    def __len__(self) -> "std::vector< long long >::size_type":
        return _StlContainers.LongLongVector___len__(self)

    def __getslice__(self, i: 'std::vector< long long >::difference_type', j: 'std::vector< long long >::difference_type') -> "std::vector< long long,std::allocator< long long > > *":
        return _StlContainers.LongLongVector___getslice__(self, i, j)

    def __setslice__(self, *args) -> "void":
        return _StlContainers.LongLongVector___setslice__(self, *args)

    def __delslice__(self, i: 'std::vector< long long >::difference_type', j: 'std::vector< long long >::difference_type') -> "void":
        return _StlContainers.LongLongVector___delslice__(self, i, j)

    def __delitem__(self, *args) -> "void":
        return _StlContainers.LongLongVector___delitem__(self, *args)

    def __getitem__(self, *args) -> "std::vector< long long >::value_type const &":
        return _StlContainers.LongLongVector___getitem__(self, *args)

    def __setitem__(self, *args) -> "void":
        return _StlContainers.LongLongVector___setitem__(self, *args)

    def pop(self) -> "std::vector< long long >::value_type":
        return _StlContainers.LongLongVector_pop(self)

    def append(self, x: 'std::vector< long long >::value_type const &') -> "void":
        return _StlContainers.LongLongVector_append(self, x)

    def empty(self) -> "bool":
        return _StlContainers.LongLongVector_empty(self)

    def size(self) -> "std::vector< long long >::size_type":
        return _StlContainers.LongLongVector_size(self)

    def swap(self, v: 'LongLongVector') -> "void":
        return _StlContainers.LongLongVector_swap(self, v)

    def begin(self) -> "std::vector< long long >::iterator":
        return _StlContainers.LongLongVector_begin(self)

    def end(self) -> "std::vector< long long >::iterator":
        return _StlContainers.LongLongVector_end(self)

    def rbegin(self) -> "std::vector< long long >::reverse_iterator":
        return _StlContainers.LongLongVector_rbegin(self)

    def rend(self) -> "std::vector< long long >::reverse_iterator":
        return _StlContainers.LongLongVector_rend(self)

    def clear(self) -> "void":
        return _StlContainers.LongLongVector_clear(self)

    def get_allocator(self) -> "std::vector< long long >::allocator_type":
        return _StlContainers.LongLongVector_get_allocator(self)

    def pop_back(self) -> "void":
        return _StlContainers.LongLongVector_pop_back(self)

    def erase(self, *args) -> "std::vector< long long >::iterator":
        return _StlContainers.LongLongVector_erase(self, *args)

    def __init__(self, *args):
        this = _StlContainers.new_LongLongVector(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def push_back(self, x: 'std::vector< long long >::value_type const &') -> "void":
        return _StlContainers.LongLongVector_push_back(self, x)

    def front(self) -> "std::vector< long long >::value_type const &":
        return _StlContainers.LongLongVector_front(self)

    def back(self) -> "std::vector< long long >::value_type const &":
        return _StlContainers.LongLongVector_back(self)

    def assign(self, n: 'std::vector< long long >::size_type', x: 'std::vector< long long >::value_type const &') -> "void":
        return _StlContainers.LongLongVector_assign(self, n, x)

    def resize(self, *args) -> "void":
        return _StlContainers.LongLongVector_resize(self, *args)

    def insert(self, *args) -> "void":
        return _StlContainers.LongLongVector_insert(self, *args)

    def reserve(self, n: 'std::vector< long long >::size_type') -> "void":
        return _StlContainers.LongLongVector_reserve(self, n)

    def capacity(self) -> "std::vector< long long >::size_type":
        return _StlContainers.LongLongVector_capacity(self)
    __swig_destroy__ = _StlContainers.delete_LongLongVector
    __del__ = lambda self: None
LongLongVector_swigregister = _StlContainers.LongLongVector_swigregister
LongLongVector_swigregister(LongLongVector)

class UnsignedLongLongVector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, UnsignedLongLongVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, UnsignedLongLongVector, name)
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _StlContainers.UnsignedLongLongVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _StlContainers.UnsignedLongLongVector___nonzero__(self)

    def __bool__(self) -> "bool":
        return _StlContainers.UnsignedLongLongVector___bool__(self)

    def __len__(self) -> "std::vector< unsigned long long >::size_type":
        return _StlContainers.UnsignedLongLongVector___len__(self)

    def __getslice__(self, i: 'std::vector< unsigned long long >::difference_type', j: 'std::vector< unsigned long long >::difference_type') -> "std::vector< unsigned long long,std::allocator< unsigned long long > > *":
        return _StlContainers.UnsignedLongLongVector___getslice__(self, i, j)

    def __setslice__(self, *args) -> "void":
        return _StlContainers.UnsignedLongLongVector___setslice__(self, *args)

    def __delslice__(self, i: 'std::vector< unsigned long long >::difference_type', j: 'std::vector< unsigned long long >::difference_type') -> "void":
        return _StlContainers.UnsignedLongLongVector___delslice__(self, i, j)

    def __delitem__(self, *args) -> "void":
        return _StlContainers.UnsignedLongLongVector___delitem__(self, *args)

    def __getitem__(self, *args) -> "std::vector< unsigned long long >::value_type const &":
        return _StlContainers.UnsignedLongLongVector___getitem__(self, *args)

    def __setitem__(self, *args) -> "void":
        return _StlContainers.UnsignedLongLongVector___setitem__(self, *args)

    def pop(self) -> "std::vector< unsigned long long >::value_type":
        return _StlContainers.UnsignedLongLongVector_pop(self)

    def append(self, x: 'std::vector< unsigned long long >::value_type const &') -> "void":
        return _StlContainers.UnsignedLongLongVector_append(self, x)

    def empty(self) -> "bool":
        return _StlContainers.UnsignedLongLongVector_empty(self)

    def size(self) -> "std::vector< unsigned long long >::size_type":
        return _StlContainers.UnsignedLongLongVector_size(self)

    def swap(self, v: 'UnsignedLongLongVector') -> "void":
        return _StlContainers.UnsignedLongLongVector_swap(self, v)

    def begin(self) -> "std::vector< unsigned long long >::iterator":
        return _StlContainers.UnsignedLongLongVector_begin(self)

    def end(self) -> "std::vector< unsigned long long >::iterator":
        return _StlContainers.UnsignedLongLongVector_end(self)

    def rbegin(self) -> "std::vector< unsigned long long >::reverse_iterator":
        return _StlContainers.UnsignedLongLongVector_rbegin(self)

    def rend(self) -> "std::vector< unsigned long long >::reverse_iterator":
        return _StlContainers.UnsignedLongLongVector_rend(self)

    def clear(self) -> "void":
        return _StlContainers.UnsignedLongLongVector_clear(self)

    def get_allocator(self) -> "std::vector< unsigned long long >::allocator_type":
        return _StlContainers.UnsignedLongLongVector_get_allocator(self)

    def pop_back(self) -> "void":
        return _StlContainers.UnsignedLongLongVector_pop_back(self)

    def erase(self, *args) -> "std::vector< unsigned long long >::iterator":
        return _StlContainers.UnsignedLongLongVector_erase(self, *args)

    def __init__(self, *args):
        this = _StlContainers.new_UnsignedLongLongVector(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def push_back(self, x: 'std::vector< unsigned long long >::value_type const &') -> "void":
        return _StlContainers.UnsignedLongLongVector_push_back(self, x)

    def front(self) -> "std::vector< unsigned long long >::value_type const &":
        return _StlContainers.UnsignedLongLongVector_front(self)

    def back(self) -> "std::vector< unsigned long long >::value_type const &":
        return _StlContainers.UnsignedLongLongVector_back(self)

    def assign(self, n: 'std::vector< unsigned long long >::size_type', x: 'std::vector< unsigned long long >::value_type const &') -> "void":
        return _StlContainers.UnsignedLongLongVector_assign(self, n, x)

    def resize(self, *args) -> "void":
        return _StlContainers.UnsignedLongLongVector_resize(self, *args)

    def insert(self, *args) -> "void":
        return _StlContainers.UnsignedLongLongVector_insert(self, *args)

    def reserve(self, n: 'std::vector< unsigned long long >::size_type') -> "void":
        return _StlContainers.UnsignedLongLongVector_reserve(self, n)

    def capacity(self) -> "std::vector< unsigned long long >::size_type":
        return _StlContainers.UnsignedLongLongVector_capacity(self)
    __swig_destroy__ = _StlContainers.delete_UnsignedLongLongVector
    __del__ = lambda self: None
UnsignedLongLongVector_swigregister = _StlContainers.UnsignedLongLongVector_swigregister
UnsignedLongLongVector_swigregister(UnsignedLongLongVector)

class FloatVector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, FloatVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, FloatVector, name)
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _StlContainers.FloatVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _StlContainers.FloatVector___nonzero__(self)

    def __bool__(self) -> "bool":
        return _StlContainers.FloatVector___bool__(self)

    def __len__(self) -> "std::vector< float >::size_type":
        return _StlContainers.FloatVector___len__(self)

    def __getslice__(self, i: 'std::vector< float >::difference_type', j: 'std::vector< float >::difference_type') -> "std::vector< float,std::allocator< float > > *":
        return _StlContainers.FloatVector___getslice__(self, i, j)

    def __setslice__(self, *args) -> "void":
        return _StlContainers.FloatVector___setslice__(self, *args)

    def __delslice__(self, i: 'std::vector< float >::difference_type', j: 'std::vector< float >::difference_type') -> "void":
        return _StlContainers.FloatVector___delslice__(self, i, j)

    def __delitem__(self, *args) -> "void":
        return _StlContainers.FloatVector___delitem__(self, *args)

    def __getitem__(self, *args) -> "std::vector< float >::value_type const &":
        return _StlContainers.FloatVector___getitem__(self, *args)

    def __setitem__(self, *args) -> "void":
        return _StlContainers.FloatVector___setitem__(self, *args)

    def pop(self) -> "std::vector< float >::value_type":
        return _StlContainers.FloatVector_pop(self)

    def append(self, x: 'std::vector< float >::value_type const &') -> "void":
        return _StlContainers.FloatVector_append(self, x)

    def empty(self) -> "bool":
        return _StlContainers.FloatVector_empty(self)

    def size(self) -> "std::vector< float >::size_type":
        return _StlContainers.FloatVector_size(self)

    def swap(self, v: 'FloatVector') -> "void":
        return _StlContainers.FloatVector_swap(self, v)

    def begin(self) -> "std::vector< float >::iterator":
        return _StlContainers.FloatVector_begin(self)

    def end(self) -> "std::vector< float >::iterator":
        return _StlContainers.FloatVector_end(self)

    def rbegin(self) -> "std::vector< float >::reverse_iterator":
        return _StlContainers.FloatVector_rbegin(self)

    def rend(self) -> "std::vector< float >::reverse_iterator":
        return _StlContainers.FloatVector_rend(self)

    def clear(self) -> "void":
        return _StlContainers.FloatVector_clear(self)

    def get_allocator(self) -> "std::vector< float >::allocator_type":
        return _StlContainers.FloatVector_get_allocator(self)

    def pop_back(self) -> "void":
        return _StlContainers.FloatVector_pop_back(self)

    def erase(self, *args) -> "std::vector< float >::iterator":
        return _StlContainers.FloatVector_erase(self, *args)

    def __init__(self, *args):
        this = _StlContainers.new_FloatVector(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def push_back(self, x: 'std::vector< float >::value_type const &') -> "void":
        return _StlContainers.FloatVector_push_back(self, x)

    def front(self) -> "std::vector< float >::value_type const &":
        return _StlContainers.FloatVector_front(self)

    def back(self) -> "std::vector< float >::value_type const &":
        return _StlContainers.FloatVector_back(self)

    def assign(self, n: 'std::vector< float >::size_type', x: 'std::vector< float >::value_type const &') -> "void":
        return _StlContainers.FloatVector_assign(self, n, x)

    def resize(self, *args) -> "void":
        return _StlContainers.FloatVector_resize(self, *args)

    def insert(self, *args) -> "void":
        return _StlContainers.FloatVector_insert(self, *args)

    def reserve(self, n: 'std::vector< float >::size_type') -> "void":
        return _StlContainers.FloatVector_reserve(self, n)

    def capacity(self) -> "std::vector< float >::size_type":
        return _StlContainers.FloatVector_capacity(self)
    __swig_destroy__ = _StlContainers.delete_FloatVector
    __del__ = lambda self: None
FloatVector_swigregister = _StlContainers.FloatVector_swigregister
FloatVector_swigregister(FloatVector)

class DoubleVector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, DoubleVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, DoubleVector, name)
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _StlContainers.DoubleVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _StlContainers.DoubleVector___nonzero__(self)

    def __bool__(self) -> "bool":
        return _StlContainers.DoubleVector___bool__(self)

    def __len__(self) -> "std::vector< double >::size_type":
        return _StlContainers.DoubleVector___len__(self)

    def __getslice__(self, i: 'std::vector< double >::difference_type', j: 'std::vector< double >::difference_type') -> "std::vector< double,std::allocator< double > > *":
        return _StlContainers.DoubleVector___getslice__(self, i, j)

    def __setslice__(self, *args) -> "void":
        return _StlContainers.DoubleVector___setslice__(self, *args)

    def __delslice__(self, i: 'std::vector< double >::difference_type', j: 'std::vector< double >::difference_type') -> "void":
        return _StlContainers.DoubleVector___delslice__(self, i, j)

    def __delitem__(self, *args) -> "void":
        return _StlContainers.DoubleVector___delitem__(self, *args)

    def __getitem__(self, *args) -> "std::vector< double >::value_type const &":
        return _StlContainers.DoubleVector___getitem__(self, *args)

    def __setitem__(self, *args) -> "void":
        return _StlContainers.DoubleVector___setitem__(self, *args)

    def pop(self) -> "std::vector< double >::value_type":
        return _StlContainers.DoubleVector_pop(self)

    def append(self, x: 'std::vector< double >::value_type const &') -> "void":
        return _StlContainers.DoubleVector_append(self, x)

    def empty(self) -> "bool":
        return _StlContainers.DoubleVector_empty(self)

    def size(self) -> "std::vector< double >::size_type":
        return _StlContainers.DoubleVector_size(self)

    def swap(self, v: 'DoubleVector') -> "void":
        return _StlContainers.DoubleVector_swap(self, v)

    def begin(self) -> "std::vector< double >::iterator":
        return _StlContainers.DoubleVector_begin(self)

    def end(self) -> "std::vector< double >::iterator":
        return _StlContainers.DoubleVector_end(self)

    def rbegin(self) -> "std::vector< double >::reverse_iterator":
        return _StlContainers.DoubleVector_rbegin(self)

    def rend(self) -> "std::vector< double >::reverse_iterator":
        return _StlContainers.DoubleVector_rend(self)

    def clear(self) -> "void":
        return _StlContainers.DoubleVector_clear(self)

    def get_allocator(self) -> "std::vector< double >::allocator_type":
        return _StlContainers.DoubleVector_get_allocator(self)

    def pop_back(self) -> "void":
        return _StlContainers.DoubleVector_pop_back(self)

    def erase(self, *args) -> "std::vector< double >::iterator":
        return _StlContainers.DoubleVector_erase(self, *args)

    def __init__(self, *args):
        this = _StlContainers.new_DoubleVector(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def push_back(self, x: 'std::vector< double >::value_type const &') -> "void":
        return _StlContainers.DoubleVector_push_back(self, x)

    def front(self) -> "std::vector< double >::value_type const &":
        return _StlContainers.DoubleVector_front(self)

    def back(self) -> "std::vector< double >::value_type const &":
        return _StlContainers.DoubleVector_back(self)

    def assign(self, n: 'std::vector< double >::size_type', x: 'std::vector< double >::value_type const &') -> "void":
        return _StlContainers.DoubleVector_assign(self, n, x)

    def resize(self, *args) -> "void":
        return _StlContainers.DoubleVector_resize(self, *args)

    def insert(self, *args) -> "void":
        return _StlContainers.DoubleVector_insert(self, *args)

    def reserve(self, n: 'std::vector< double >::size_type') -> "void":
        return _StlContainers.DoubleVector_reserve(self, n)

    def capacity(self) -> "std::vector< double >::size_type":
        return _StlContainers.DoubleVector_capacity(self)
    __swig_destroy__ = _StlContainers.delete_DoubleVector
    __del__ = lambda self: None
DoubleVector_swigregister = _StlContainers.DoubleVector_swigregister
DoubleVector_swigregister(DoubleVector)

class LongDoubleVector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, LongDoubleVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, LongDoubleVector, name)
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _StlContainers.LongDoubleVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _StlContainers.LongDoubleVector___nonzero__(self)

    def __bool__(self) -> "bool":
        return _StlContainers.LongDoubleVector___bool__(self)

    def __len__(self) -> "std::vector< long double >::size_type":
        return _StlContainers.LongDoubleVector___len__(self)

    def __getslice__(self, i: 'std::vector< long double >::difference_type', j: 'std::vector< long double >::difference_type') -> "std::vector< long double,std::allocator< long double > > *":
        return _StlContainers.LongDoubleVector___getslice__(self, i, j)

    def __setslice__(self, *args) -> "void":
        return _StlContainers.LongDoubleVector___setslice__(self, *args)

    def __delslice__(self, i: 'std::vector< long double >::difference_type', j: 'std::vector< long double >::difference_type') -> "void":
        return _StlContainers.LongDoubleVector___delslice__(self, i, j)

    def __delitem__(self, *args) -> "void":
        return _StlContainers.LongDoubleVector___delitem__(self, *args)

    def __getitem__(self, *args) -> "std::vector< long double >::value_type const &":
        return _StlContainers.LongDoubleVector___getitem__(self, *args)

    def __setitem__(self, *args) -> "void":
        return _StlContainers.LongDoubleVector___setitem__(self, *args)

    def pop(self) -> "std::vector< long double >::value_type":
        return _StlContainers.LongDoubleVector_pop(self)

    def append(self, x: 'std::vector< long double >::value_type const &') -> "void":
        return _StlContainers.LongDoubleVector_append(self, x)

    def empty(self) -> "bool":
        return _StlContainers.LongDoubleVector_empty(self)

    def size(self) -> "std::vector< long double >::size_type":
        return _StlContainers.LongDoubleVector_size(self)

    def swap(self, v: 'LongDoubleVector') -> "void":
        return _StlContainers.LongDoubleVector_swap(self, v)

    def begin(self) -> "std::vector< long double >::iterator":
        return _StlContainers.LongDoubleVector_begin(self)

    def end(self) -> "std::vector< long double >::iterator":
        return _StlContainers.LongDoubleVector_end(self)

    def rbegin(self) -> "std::vector< long double >::reverse_iterator":
        return _StlContainers.LongDoubleVector_rbegin(self)

    def rend(self) -> "std::vector< long double >::reverse_iterator":
        return _StlContainers.LongDoubleVector_rend(self)

    def clear(self) -> "void":
        return _StlContainers.LongDoubleVector_clear(self)

    def get_allocator(self) -> "std::vector< long double >::allocator_type":
        return _StlContainers.LongDoubleVector_get_allocator(self)

    def pop_back(self) -> "void":
        return _StlContainers.LongDoubleVector_pop_back(self)

    def erase(self, *args) -> "std::vector< long double >::iterator":
        return _StlContainers.LongDoubleVector_erase(self, *args)

    def __init__(self, *args):
        this = _StlContainers.new_LongDoubleVector(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def push_back(self, x: 'std::vector< long double >::value_type const &') -> "void":
        return _StlContainers.LongDoubleVector_push_back(self, x)

    def front(self) -> "std::vector< long double >::value_type const &":
        return _StlContainers.LongDoubleVector_front(self)

    def back(self) -> "std::vector< long double >::value_type const &":
        return _StlContainers.LongDoubleVector_back(self)

    def assign(self, n: 'std::vector< long double >::size_type', x: 'std::vector< long double >::value_type const &') -> "void":
        return _StlContainers.LongDoubleVector_assign(self, n, x)

    def resize(self, *args) -> "void":
        return _StlContainers.LongDoubleVector_resize(self, *args)

    def insert(self, *args) -> "void":
        return _StlContainers.LongDoubleVector_insert(self, *args)

    def reserve(self, n: 'std::vector< long double >::size_type') -> "void":
        return _StlContainers.LongDoubleVector_reserve(self, n)

    def capacity(self) -> "std::vector< long double >::size_type":
        return _StlContainers.LongDoubleVector_capacity(self)
    __swig_destroy__ = _StlContainers.delete_LongDoubleVector
    __del__ = lambda self: None
LongDoubleVector_swigregister = _StlContainers.LongDoubleVector_swigregister
LongDoubleVector_swigregister(LongDoubleVector)

# This file is compatible with both classic and new-style classes.


