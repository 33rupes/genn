#include <functional>
#include <numeric>

// Google test includes
#include "gtest/gtest.h"

// Autogenerated simulation code includess
#include "post_vars_in_synapse_dynamics_sparse_CODE/definitions.h"

// **NOTE** base-class for simulation tests must be
// included after auto-generated globals are includes
#include "../../utils/simulation_test_post_vars_sparse.h"

TEST_P(SimulationTestPostVarsSparse, AcceptableError)
{
  initpost_vars_in_synapse_dynamics_sparse();

  float err = 0.0f;
  float x[10][10];
  for (int i = 0; i < (int)(20.0f / DT); i++)
  {
    t = i * DT;

    // for each delay
    for (int d = 0; d < 10; d++)
    {
        // for all pre-synaptic neurons
        for (int j = 0; j < 10; j++)
        {
            if (t > 0.0001+DT)
            {
                x[d][j] = t-2*DT+10*((j+1)%10);
            }
            else if(i == 0)
            {
                x[d][j] = 0.0f;
            }
        }

        // Add error for this time step to total
        err += std::inner_product(&x[d][0], &x[d][10],
                                  GetTheW(d),
                                  0.0,
                                  std::plus<float>(),
                                  [](float a, float b){ return abs(a - b); });
    }

    // Step simulation
    Step();
  }

  // Check total error is less than some tolerance
  EXPECT_LT(err, 5e-3);
}

#ifndef CPU_ONLY
auto simulatorBackends = ::testing::Values(true, false);
#else
auto simulatorBackends = ::testing::Values(false);
#endif

INSTANTIATE_TEST_CASE_P(SynapseDynamics,
                        SimulationTestPostVarsSparse,
                        simulatorBackends);