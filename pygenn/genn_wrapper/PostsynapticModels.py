# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.12
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    def swig_import_helper():
        import importlib
        pkg = __name__.rpartition('.')[0]
        mname = '.'.join((pkg, '_PostsynapticModels')).lstrip('.')
        try:
            return importlib.import_module(mname)
        except ImportError:
            return importlib.import_module('_PostsynapticModels')
    _PostsynapticModels = swig_import_helper()
    del swig_import_helper
elif _swig_python_version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_PostsynapticModels', [dirname(__file__)])
        except ImportError:
            import _PostsynapticModels
            return _PostsynapticModels
        try:
            _mod = imp.load_module('_PostsynapticModels', fp, pathname, description)
        finally:
            if fp is not None:
                fp.close()
        return _mod
    _PostsynapticModels = swig_import_helper()
    del swig_import_helper
else:
    import _PostsynapticModels
del _swig_python_version_info

try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        if _newclass:
            object.__setattr__(self, name, value)
        else:
            self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr(self, class_type, name):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    raise AttributeError("'%s' object has no attribute '%s'" % (class_type.__name__, name))


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except __builtin__.Exception:
    class _object:
        pass
    _newclass = 0

try:
    import weakref
    weakref_proxy = weakref.proxy
except __builtin__.Exception:
    weakref_proxy = lambda x: x


from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import NewModels
else:
    import NewModels
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import Snippet
else:
    import Snippet
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import StlContainers
else:
    import StlContainers
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import InitVarSnippet
else:
    import InitVarSnippet
del _swig_python_version_info
class Base(NewModels.Base):
    __swig_setmethods__ = {}
    for _s in [NewModels.Base]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Base, name, value)
    __swig_getmethods__ = {}
    for _s in [NewModels.Base]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, Base, name)
    __repr__ = _swig_repr

    def get_decay_code(self) -> "std::string":
        return _PostsynapticModels.Base_get_decay_code(self)

    def get_apply_input_code(self) -> "std::string":
        return _PostsynapticModels.Base_get_apply_input_code(self)

    def get_support_code(self) -> "std::string":
        return _PostsynapticModels.Base_get_support_code(self)

    def get_extra_global_params(self) -> "NewModels::Base::StringPairVec":
        return _PostsynapticModels.Base_get_extra_global_params(self)

    def __init__(self):
        if self.__class__ == Base:
            _self = None
        else:
            _self = self
        this = _PostsynapticModels.new_Base(_self, )
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _PostsynapticModels.delete_Base
    __del__ = lambda self: None
    def __disown__(self):
        self.this.disown()
        _PostsynapticModels.disown_Base(self)
        return weakref_proxy(self)
Base_swigregister = _PostsynapticModels.Base_swigregister
Base_swigregister(Base)

class ExpCond(Base):
    __swig_setmethods__ = {}
    for _s in [Base]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ExpCond, name, value)
    __swig_getmethods__ = {}
    for _s in [Base]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, ExpCond, name)
    __repr__ = _swig_repr
    if _newclass:
        get_instance = staticmethod(_PostsynapticModels.ExpCond_get_instance)
    else:
        get_instance = _PostsynapticModels.ExpCond_get_instance

    def get_decay_code(self) -> "std::string":
        return _PostsynapticModels.ExpCond_get_decay_code(self)

    def get_apply_input_code(self) -> "std::string":
        return _PostsynapticModels.ExpCond_get_apply_input_code(self)

    def get_param_names(self) -> "Snippet::Base::StringVec":
        return _PostsynapticModels.ExpCond_get_param_names(self)

    def get_derived_params(self) -> "Snippet::Base::DerivedParamVec":
        return _PostsynapticModels.ExpCond_get_derived_params(self)
    if _newclass:
        make_param_values = staticmethod(_PostsynapticModels.ExpCond_make_param_values)
    else:
        make_param_values = _PostsynapticModels.ExpCond_make_param_values
    if _newclass:
        make_var_values = staticmethod(_PostsynapticModels.ExpCond_make_var_values)
    else:
        make_var_values = _PostsynapticModels.ExpCond_make_var_values

    def __init__(self):
        this = _PostsynapticModels.new_ExpCond()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _PostsynapticModels.delete_ExpCond
    __del__ = lambda self: None
ExpCond_swigregister = _PostsynapticModels.ExpCond_swigregister
ExpCond_swigregister(ExpCond)

def ExpCond_get_instance() -> "PostsynapticModels::ExpCond const *":
    return _PostsynapticModels.ExpCond_get_instance()
ExpCond_get_instance = _PostsynapticModels.ExpCond_get_instance

def ExpCond_make_param_values(vals: 'DoubleVector') -> "PostsynapticModels::ExpCond::ParamValues *":
    return _PostsynapticModels.ExpCond_make_param_values(vals)
ExpCond_make_param_values = _PostsynapticModels.ExpCond_make_param_values

def ExpCond_make_var_values(arg2: 'VarInitVector') -> "PostsynapticModels::ExpCond::VarValues *":
    return _PostsynapticModels.ExpCond_make_var_values(arg2)
ExpCond_make_var_values = _PostsynapticModels.ExpCond_make_var_values

class DeltaCurr(Base):
    __swig_setmethods__ = {}
    for _s in [Base]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, DeltaCurr, name, value)
    __swig_getmethods__ = {}
    for _s in [Base]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, DeltaCurr, name)
    __repr__ = _swig_repr
    if _newclass:
        get_instance = staticmethod(_PostsynapticModels.DeltaCurr_get_instance)
    else:
        get_instance = _PostsynapticModels.DeltaCurr_get_instance

    def get_apply_input_code(self) -> "std::string":
        return _PostsynapticModels.DeltaCurr_get_apply_input_code(self)
    if _newclass:
        make_param_values = staticmethod(_PostsynapticModels.DeltaCurr_make_param_values)
    else:
        make_param_values = _PostsynapticModels.DeltaCurr_make_param_values
    if _newclass:
        make_var_values = staticmethod(_PostsynapticModels.DeltaCurr_make_var_values)
    else:
        make_var_values = _PostsynapticModels.DeltaCurr_make_var_values

    def __init__(self):
        this = _PostsynapticModels.new_DeltaCurr()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _PostsynapticModels.delete_DeltaCurr
    __del__ = lambda self: None
DeltaCurr_swigregister = _PostsynapticModels.DeltaCurr_swigregister
DeltaCurr_swigregister(DeltaCurr)

def DeltaCurr_get_instance() -> "PostsynapticModels::DeltaCurr const *":
    return _PostsynapticModels.DeltaCurr_get_instance()
DeltaCurr_get_instance = _PostsynapticModels.DeltaCurr_get_instance

def DeltaCurr_make_param_values(arg2: 'DoubleVector') -> "PostsynapticModels::DeltaCurr::ParamValues *":
    return _PostsynapticModels.DeltaCurr_make_param_values(arg2)
DeltaCurr_make_param_values = _PostsynapticModels.DeltaCurr_make_param_values

def DeltaCurr_make_var_values(arg2: 'VarInitVector') -> "PostsynapticModels::DeltaCurr::VarValues *":
    return _PostsynapticModels.DeltaCurr_make_var_values(arg2)
DeltaCurr_make_var_values = _PostsynapticModels.DeltaCurr_make_var_values

class Custom(Base):
    __swig_setmethods__ = {}
    for _s in [Base]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Custom, name, value)
    __swig_getmethods__ = {}
    for _s in [Base]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, Custom, name)
    __repr__ = _swig_repr
    if _newclass:
        get_instance = staticmethod(_PostsynapticModels.Custom_get_instance)
    else:
        get_instance = _PostsynapticModels.Custom_get_instance
    if _newclass:
        make_param_values = staticmethod(_PostsynapticModels.Custom_make_param_values)
    else:
        make_param_values = _PostsynapticModels.Custom_make_param_values
    if _newclass:
        make_var_values = staticmethod(_PostsynapticModels.Custom_make_var_values)
    else:
        make_var_values = _PostsynapticModels.Custom_make_var_values

    def __init__(self):
        if self.__class__ == Custom:
            _self = None
        else:
            _self = self
        this = _PostsynapticModels.new_Custom(_self, )
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _PostsynapticModels.delete_Custom
    __del__ = lambda self: None
    def __disown__(self):
        self.this.disown()
        _PostsynapticModels.disown_Custom(self)
        return weakref_proxy(self)
Custom_swigregister = _PostsynapticModels.Custom_swigregister
Custom_swigregister(Custom)

def Custom_get_instance() -> "PostsynapticModels::Custom const *":
    return _PostsynapticModels.Custom_get_instance()
Custom_get_instance = _PostsynapticModels.Custom_get_instance

def Custom_make_param_values(vals: 'DoubleVector') -> "CustomValues::ParamValues *":
    return _PostsynapticModels.Custom_make_param_values(vals)
Custom_make_param_values = _PostsynapticModels.Custom_make_param_values

def Custom_make_var_values(vals: 'VarInitVector') -> "CustomValues::VarValues *":
    return _PostsynapticModels.Custom_make_var_values(vals)
Custom_make_var_values = _PostsynapticModels.Custom_make_var_values

# This file is compatible with both classic and new-style classes.


