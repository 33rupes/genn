# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.12
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    def swig_import_helper():
        import importlib
        pkg = __name__.rpartition('.')[0]
        mname = '.'.join((pkg, '_NewModels')).lstrip('.')
        try:
            return importlib.import_module(mname)
        except ImportError:
            return importlib.import_module('_NewModels')
    _NewModels = swig_import_helper()
    del swig_import_helper
elif _swig_python_version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_NewModels', [dirname(__file__)])
        except ImportError:
            import _NewModels
            return _NewModels
        try:
            _mod = imp.load_module('_NewModels', fp, pathname, description)
        finally:
            if fp is not None:
                fp.close()
        return _mod
    _NewModels = swig_import_helper()
    del swig_import_helper
else:
    import _NewModels
del _swig_python_version_info

try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        if _newclass:
            object.__setattr__(self, name, value)
        else:
            self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr(self, class_type, name):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    raise AttributeError("'%s' object has no attribute '%s'" % (class_type.__name__, name))


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except __builtin__.Exception:
    class _object:
        pass
    _newclass = 0

try:
    import weakref
    weakref_proxy = weakref.proxy
except __builtin__.Exception:
    weakref_proxy = lambda x: x


class SwigPyIterator(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SwigPyIterator, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SwigPyIterator, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _NewModels.delete_SwigPyIterator
    __del__ = lambda self: None

    def value(self) -> "PyObject *":
        return _NewModels.SwigPyIterator_value(self)

    def incr(self, n: 'size_t'=1) -> "swig::SwigPyIterator *":
        return _NewModels.SwigPyIterator_incr(self, n)

    def decr(self, n: 'size_t'=1) -> "swig::SwigPyIterator *":
        return _NewModels.SwigPyIterator_decr(self, n)

    def distance(self, x: 'SwigPyIterator') -> "ptrdiff_t":
        return _NewModels.SwigPyIterator_distance(self, x)

    def equal(self, x: 'SwigPyIterator') -> "bool":
        return _NewModels.SwigPyIterator_equal(self, x)

    def copy(self) -> "swig::SwigPyIterator *":
        return _NewModels.SwigPyIterator_copy(self)

    def next(self) -> "PyObject *":
        return _NewModels.SwigPyIterator_next(self)

    def __next__(self) -> "PyObject *":
        return _NewModels.SwigPyIterator___next__(self)

    def previous(self) -> "PyObject *":
        return _NewModels.SwigPyIterator_previous(self)

    def advance(self, n: 'ptrdiff_t') -> "swig::SwigPyIterator *":
        return _NewModels.SwigPyIterator_advance(self, n)

    def __eq__(self, x: 'SwigPyIterator') -> "bool":
        return _NewModels.SwigPyIterator___eq__(self, x)

    def __ne__(self, x: 'SwigPyIterator') -> "bool":
        return _NewModels.SwigPyIterator___ne__(self, x)

    def __iadd__(self, n: 'ptrdiff_t') -> "swig::SwigPyIterator &":
        return _NewModels.SwigPyIterator___iadd__(self, n)

    def __isub__(self, n: 'ptrdiff_t') -> "swig::SwigPyIterator &":
        return _NewModels.SwigPyIterator___isub__(self, n)

    def __add__(self, n: 'ptrdiff_t') -> "swig::SwigPyIterator *":
        return _NewModels.SwigPyIterator___add__(self, n)

    def __sub__(self, *args) -> "ptrdiff_t":
        return _NewModels.SwigPyIterator___sub__(self, *args)
    def __iter__(self):
        return self
SwigPyIterator_swigregister = _NewModels.SwigPyIterator_swigregister
SwigPyIterator_swigregister(SwigPyIterator)

from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import Snippet
else:
    import Snippet
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import StlContainers
else:
    import StlContainers
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import InitVarSnippet
else:
    import InitVarSnippet
del _swig_python_version_info
class VarInit(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, VarInit, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, VarInit, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _NewModels.new_VarInit(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _NewModels.delete_VarInit
    __del__ = lambda self: None
VarInit_swigregister = _NewModels.VarInit_swigregister
VarInit_swigregister(VarInit)

class Base(Snippet.Base):
    __swig_setmethods__ = {}
    for _s in [Snippet.Base]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Base, name, value)
    __swig_getmethods__ = {}
    for _s in [Snippet.Base]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, Base, name)
    __repr__ = _swig_repr

    def get_vars(self) -> "Snippet::Base::StringPairVec":
        return _NewModels.Base_get_vars(self)

    def get_var_index(self, varName: 'std::string const &') -> "size_t":
        return _NewModels.Base_get_var_index(self, varName)

    def __init__(self):
        if self.__class__ == Base:
            _self = None
        else:
            _self = self
        this = _NewModels.new_Base(_self, )
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _NewModels.delete_Base
    __del__ = lambda self: None
    def __disown__(self):
        self.this.disown()
        _NewModels.disown_Base(self)
        return weakref_proxy(self)
Base_swigregister = _NewModels.Base_swigregister
Base_swigregister(Base)

class VarValues(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, VarValues, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, VarValues, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _NewModels.new_VarValues()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def get_initialisers(self) -> "std::vector< NewModels::VarInit,std::allocator< NewModels::VarInit > > const &":
        return _NewModels.VarValues_get_initialisers(self)
    __swig_destroy__ = _NewModels.delete_VarValues
    __del__ = lambda self: None
VarValues_swigregister = _NewModels.VarValues_swigregister
VarValues_swigregister(VarValues)

def CustomVarValues(*args):
    val = _NewModels.new_CustomVarValues(*args)
    return val

class ParamValues(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ParamValues, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ParamValues, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _NewModels.new_ParamValues(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def get_values(self) -> "std::vector< double,std::allocator< double > > const &":
        return _NewModels.ParamValues_get_values(self)
    __swig_destroy__ = _NewModels.delete_ParamValues
    __del__ = lambda self: None
ParamValues_swigregister = _NewModels.ParamValues_swigregister
ParamValues_swigregister(ParamValues)

class VarInitVector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, VarInitVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, VarInitVector, name)
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _NewModels.VarInitVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _NewModels.VarInitVector___nonzero__(self)

    def __bool__(self) -> "bool":
        return _NewModels.VarInitVector___bool__(self)

    def __len__(self) -> "std::vector< NewModels::VarInit >::size_type":
        return _NewModels.VarInitVector___len__(self)

    def __getslice__(self, i: 'std::vector< NewModels::VarInit >::difference_type', j: 'std::vector< NewModels::VarInit >::difference_type') -> "std::vector< NewModels::VarInit,std::allocator< NewModels::VarInit > > *":
        return _NewModels.VarInitVector___getslice__(self, i, j)

    def __setslice__(self, *args) -> "void":
        return _NewModels.VarInitVector___setslice__(self, *args)

    def __delslice__(self, i: 'std::vector< NewModels::VarInit >::difference_type', j: 'std::vector< NewModels::VarInit >::difference_type') -> "void":
        return _NewModels.VarInitVector___delslice__(self, i, j)

    def __delitem__(self, *args) -> "void":
        return _NewModels.VarInitVector___delitem__(self, *args)

    def __getitem__(self, *args) -> "std::vector< NewModels::VarInit >::value_type const &":
        return _NewModels.VarInitVector___getitem__(self, *args)

    def __setitem__(self, *args) -> "void":
        return _NewModels.VarInitVector___setitem__(self, *args)

    def pop(self) -> "std::vector< NewModels::VarInit >::value_type":
        return _NewModels.VarInitVector_pop(self)

    def append(self, x: 'VarInit') -> "void":
        return _NewModels.VarInitVector_append(self, x)

    def empty(self) -> "bool":
        return _NewModels.VarInitVector_empty(self)

    def size(self) -> "std::vector< NewModels::VarInit >::size_type":
        return _NewModels.VarInitVector_size(self)

    def swap(self, v: 'VarInitVector') -> "void":
        return _NewModels.VarInitVector_swap(self, v)

    def begin(self) -> "std::vector< NewModels::VarInit >::iterator":
        return _NewModels.VarInitVector_begin(self)

    def end(self) -> "std::vector< NewModels::VarInit >::iterator":
        return _NewModels.VarInitVector_end(self)

    def rbegin(self) -> "std::vector< NewModels::VarInit >::reverse_iterator":
        return _NewModels.VarInitVector_rbegin(self)

    def rend(self) -> "std::vector< NewModels::VarInit >::reverse_iterator":
        return _NewModels.VarInitVector_rend(self)

    def clear(self) -> "void":
        return _NewModels.VarInitVector_clear(self)

    def get_allocator(self) -> "std::vector< NewModels::VarInit >::allocator_type":
        return _NewModels.VarInitVector_get_allocator(self)

    def pop_back(self) -> "void":
        return _NewModels.VarInitVector_pop_back(self)

    def erase(self, *args) -> "std::vector< NewModels::VarInit >::iterator":
        return _NewModels.VarInitVector_erase(self, *args)

    def __init__(self, *args):
        this = _NewModels.new_VarInitVector(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def push_back(self, x: 'VarInit') -> "void":
        return _NewModels.VarInitVector_push_back(self, x)

    def front(self) -> "std::vector< NewModels::VarInit >::value_type const &":
        return _NewModels.VarInitVector_front(self)

    def back(self) -> "std::vector< NewModels::VarInit >::value_type const &":
        return _NewModels.VarInitVector_back(self)

    def assign(self, n: 'std::vector< NewModels::VarInit >::size_type', x: 'VarInit') -> "void":
        return _NewModels.VarInitVector_assign(self, n, x)

    def insert(self, *args) -> "void":
        return _NewModels.VarInitVector_insert(self, *args)

    def reserve(self, n: 'std::vector< NewModels::VarInit >::size_type') -> "void":
        return _NewModels.VarInitVector_reserve(self, n)

    def capacity(self) -> "std::vector< NewModels::VarInit >::size_type":
        return _NewModels.VarInitVector_capacity(self)
    __swig_destroy__ = _NewModels.delete_VarInitVector
    __del__ = lambda self: None
VarInitVector_swigregister = _NewModels.VarInitVector_swigregister
VarInitVector_swigregister(VarInitVector)

# This file is compatible with both classic and new-style classes.


