/*--------------------------------------------------------------------------
   Author: Thomas Nowotny
  
   Institute: Center for Computational Neuroscience and Robotics
              University of Sussex
	      Falmer, Brighton BN1 9QJ, UK 
  
   email to:  T.Nowotny@sussex.ac.uk
  
   initial version: 2010-02-07
  
--------------------------------------------------------------------------*/

//----------------------------------------------------------------------------
/*! \mainpage 

GeNN is a software package to enable neuronal network simulations on
NVIDIA GPUs by code generation. Models are defined in a simple C-style
API and the code for running them on either GPU or CPU hardware is
generated by GeNN. GeNN can also be used through external
interfaces. Currently there are prototype interfaces for SpineCreator
and SpineML and for [Brian2](http://http://brian2.readthedocs.org/en/2.0beta/index.html).

This documentation is under construction. If you cannot find what you are looking for, please contact the project developers.


\section Installation_sec Installation

You can download GeNN either as a zip file of a stable release or a
snapshot of the most recent stable version or the unstable development
version using the Git version control system.

\subsection subsect_DS1 Downloading a release
Point your browser to \a https://github.com/genn-team/genn/releases
and download a release from the list by clicking the relevant source
code button. Note that GeNN is only distributed in the form of source
code due to its code generation design. Binary distributions would not
make sense in this framework and are not provided. 
After downloading continue to install GeNN as described in the \ref install_sec section below.

\subsection subsect_DS2 Obtaining a Git snapshot

If it is not yet installed on your system, download and install Git
(\a http://git-scm.com/). Then clone the GeNN repository from Github
\code
git clone https://github.com/genn-team/genn.git
\endcode
The github url of GeNN in the command above can be copied from the
HTTPS clone URL displayed on the GeNN Github page (\a https://github.com/genn-team/genn).

This will clone the entire repository, including all open branches.
By default git will check out the master branch which contains the
source version upon which the latest release is based. If you want the
most recent (but unstable) development version (which may or may not be fully functional at any
given time), checkout the development branch
\code
git checkout development
\endcode
There are other branches in the repository that are used for specific
development purposes and are opened and closed without warning.

Alternatively to using git you can also download the full content of
GeNN sources clicking on the "Download ZIP" button on the bottom right
of the GeNN Github page (\a https://github.com/genn-team/genn).

\section install_sec Installation

Installation of GeNN:

(i) If you have downloaded a zip file, unpack GeNN.zip in a convenient
location. Otherwise enter the directory where you downloaded the Git
repository.

(ii) Define the environment variable "GENN_PATH" to point to the main
     GeNN directory, e.g. if you extracted/downloaded GeNN to
     /usr/local/GeNN, then you can add "export
     GENN_PATH=/usr/local/GeNN" to your login script (e.g. `.profile`
     or `.bashrc`. If you are using
     WINDOWS, the path should be a windows path as it will be
     interpreted by the Visual C++ compiler `cl`, and enciront
     variables are best set using `setx` in a Windows cmd window.
To do so, open a Windows cmd window byt typing `cmd` in the search
     field of the start menu, followed by the `enter` key.
In the `cmd` window type
\code
setx GENN_PATH "C:\Users\me\GeNN"
\endcode
where `C:\Users\me\GeNN` is the path to your GeNN directory.

(iii) Add $GENN_PATH/lib/bin to your PATH variable, e.g.
\code
      export PATH=$PATH:$GENN_PATH/lib/bin
\endcode
in your login script, or in windows,
\code
	setx PATH=%PATH%;%GENN_PATH%/lib/bin
\endcode 

(iv) If you haven't installed CUDA on your machine, obtain a fresh installation of the NVIDIA CUDA toolkit from
    \a https://developer.nvidia.com/cuda-downloads

(v) Set the `CUDA_PATH` variable if it is not already
    set by the system, by putting
\code
export CUDA_PATH=/usr/local/cuda
\endcode
in your login script (or, if CUDA is installed in a non-standard
    location, the appropriate path to the main CUDA directory). 
    For most people, this will be done by the CUDA install script and
    the default value of /usr/local/cuda is fine. In Windows, use
    `setx` to set this variable,
\code
setx CUDA_PATH 
\endcode

This normally completes the installation.

Depending on the needs of your own projects, e.g., depencies on other
     libraries or non-standard installation paths of libraries used by
     GeNN, you may want to modify Makefile examples under
     `$GENN_PATH/userproject/xxx_project` and
     `$GENN_PATH/userproject/xxx_project/model` 
     to add extra linker-, include- and compiler-flags on a per-project basis, or
     modify global default flags in $GENN_PATH/lib/include/makefile_common.mk.

     For all makefiles there are separate makefiles for Unix-style
     operating systems (GNUmakefile) such as Linux or MacOS and for
     Windows (WINmakefile). 

If you are using GeNN in Windows, you can use make.bat to build
examples which will attempt to setup your
development environment by executing `vcvarsall.bat` which is part of
every Visual Studio distribution. For this to work properly, GeNN must
be able to locate the Visual Studio install directory, which should be
contained in the `VS_PATH` environment variable. 

GeNN also has experimental CYGWIN support. However, with the
introduction of native Windows support in GeNN 1.1.3, this is not
being developed further and should be considered as deprecated.

\section quick_sec Quickstart

\subsection Unix Quickstart
In order to get a quick start and run a provided model, go to GeNN/tools

type "make". 

This will compile additional tools for creating and running example projects.

For a first complete test, the system is best used with a full driver program such as in the 
\ref ex_mbody example:
\code{.cc} 
tools/generate_run [CPU/GPU] [#AL] [#KC] [#LH] [#DN] [gscale] [DIR] [EXE] [MODEL] [DEBUG OFF/ON]. 
\endcode
To use it, navigate to the "userproject/MBody1_project" directory and type
\code{.cc} 
../../tools/generate_run 1 100 1000 20 100 0.00117 test1 classol_sim MBody1 0 
\endcode
which would generate and simulate a model of the locust olfactory
system with 100 projection neurons, 1000 Kenyon cells, 20 lateral horn
interneurons and 100 output neurons n the mushroom body lobes.  

The tool generate_run will generate connectivity matrices for the model
MBody1 and store them into files, compile and run the model on the GPU
using these files as inputs and output the resulting spiking
activity. All output files will be prefixed with `test1` and will be
created in a sub-directory with the name `test1_output`. 

The MBody1 example is already a highly integrated example that
showcases many of the features of GeNN and how to program the
user-side code for a GeNN application.

\link Manual More details in the User Manual \endlink

\subsection Windows Quickstart

All interaction with GeNN programs are command-line based and hence
are executed within a `cmd` window. Open a `cmd` window and navigate
to the `userprojects\MBody1` directory.


\section how_to How to use GeNN

The conventional way to use GeNN is to use a program such as tools/generate_run.

In more details, what tools/generate_run and similar programs do is: 
a) use some other tools to generate the appropriate connectivity
matrices and store them in files.

b) build the source code for the model by writing neuron numbers into
userproject/include/sizes.h, and executing "buildmodel MBody1 [DEBUG OFF/ON]".  

c) compile the generated code by invoking "make clean && make" 
running the code, e.g. "linux/release/classol_sim r1 1".

- the simulation code is then produced in two steps:
"buildmodel Model1 [DEBUG OFF/ON]" and
"make clean && make"

\section exs Example projects
GeNN comes with several example projects which show how to use some basic features. 
These can be found in \link Examples Example projects\endlink.

\section ownmodel Defining your own model
If one was to use the library for GPU code generation only, the following would be done:

a) The model in question is defined in a file, say "Model1.cc".  

b) this file needs to 
	<ol type='i'>
  <li> define "DT" 
  <li> include "modelSpec.h" and "modelSpec.cc"
  <li> define the values for initial variables and parameters for neuron and synapse populations
  <li> contain the model's definition in the form of a function 
\code{.cc}
  void modelDefinition(NNmodel &model); 
\endcode  
	"MBody1.cc" shows a typical example.
	</ol>
c) The programmer defines his/her own modeling code along similar lines as
"map_classol.*" together with "classol_sim.*". In this code, 

- she defines the connectivity matrices between neuron groups. (In the
example here those are read from files).  

- she defines input patterns (e.g. for Poisson neurons like in the
example) 

- she uses "stepTimeGPU(x, y, z);" to run one time step on the GPU or
"stepTimeCPU(x, y, z);" to run one on the CPU. (both versions are
always compiled). However, mixing the two does not make too much
sense. The host version uses the same memory whereto results from the
GPU version are copied (see next point) 

- she uses functions like "copyStateFromDevice();" etc to obtain
results from GPU calculations.

*/
//----------------------------------------------------------------------------
