# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.12
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    def swig_import_helper():
        import importlib
        pkg = __name__.rpartition('.')[0]
        mname = '.'.join((pkg, '_NeuronModels')).lstrip('.')
        try:
            return importlib.import_module(mname)
        except ImportError:
            return importlib.import_module('_NeuronModels')
    _NeuronModels = swig_import_helper()
    del swig_import_helper
elif _swig_python_version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_NeuronModels', [dirname(__file__)])
        except ImportError:
            import _NeuronModels
            return _NeuronModels
        try:
            _mod = imp.load_module('_NeuronModels', fp, pathname, description)
        finally:
            if fp is not None:
                fp.close()
        return _mod
    _NeuronModels = swig_import_helper()
    del swig_import_helper
else:
    import _NeuronModels
del _swig_python_version_info

try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        if _newclass:
            object.__setattr__(self, name, value)
        else:
            self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr(self, class_type, name):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    raise AttributeError("'%s' object has no attribute '%s'" % (class_type.__name__, name))


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except __builtin__.Exception:
    class _object:
        pass
    _newclass = 0

try:
    import weakref
    weakref_proxy = weakref.proxy
except __builtin__.Exception:
    weakref_proxy = lambda x: x


from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import NewModels
else:
    import NewModels
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import Snippet
else:
    import Snippet
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import StlContainers
else:
    import StlContainers
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import InitVarSnippet
else:
    import InitVarSnippet
del _swig_python_version_info
class Base(NewModels.Base):
    __swig_setmethods__ = {}
    for _s in [NewModels.Base]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Base, name, value)
    __swig_getmethods__ = {}
    for _s in [NewModels.Base]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, Base, name)
    __repr__ = _swig_repr

    def get_sim_code(self) -> "std::string":
        return _NeuronModels.Base_get_sim_code(self)

    def get_threshold_condition_code(self) -> "std::string":
        return _NeuronModels.Base_get_threshold_condition_code(self)

    def get_reset_code(self) -> "std::string":
        return _NeuronModels.Base_get_reset_code(self)

    def get_support_code(self) -> "std::string":
        return _NeuronModels.Base_get_support_code(self)

    def get_extra_global_params(self) -> "NewModels::Base::StringPairVec":
        return _NeuronModels.Base_get_extra_global_params(self)

    def get_additional_input_vars(self) -> "NewModels::Base::NameTypeValVec":
        return _NeuronModels.Base_get_additional_input_vars(self)

    def is_poisson(self) -> "bool":
        return _NeuronModels.Base_is_poisson(self)

    def __init__(self):
        if self.__class__ == Base:
            _self = None
        else:
            _self = self
        this = _NeuronModels.new_Base(_self, )
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _NeuronModels.delete_Base
    __del__ = lambda self: None
    def __disown__(self):
        self.this.disown()
        _NeuronModels.disown_Base(self)
        return weakref_proxy(self)
Base_swigregister = _NeuronModels.Base_swigregister
Base_swigregister(Base)

class RulkovMap(Base):
    __swig_setmethods__ = {}
    for _s in [Base]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, RulkovMap, name, value)
    __swig_getmethods__ = {}
    for _s in [Base]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, RulkovMap, name)
    __repr__ = _swig_repr
    if _newclass:
        get_instance = staticmethod(_NeuronModels.RulkovMap_get_instance)
    else:
        get_instance = _NeuronModels.RulkovMap_get_instance

    def get_sim_code(self) -> "std::string":
        return _NeuronModels.RulkovMap_get_sim_code(self)

    def get_threshold_condition_code(self) -> "std::string":
        return _NeuronModels.RulkovMap_get_threshold_condition_code(self)

    def get_param_names(self) -> "Snippet::Base::StringVec":
        return _NeuronModels.RulkovMap_get_param_names(self)

    def get_vars(self) -> "Snippet::Base::StringPairVec":
        return _NeuronModels.RulkovMap_get_vars(self)

    def get_derived_params(self) -> "Snippet::Base::DerivedParamVec":
        return _NeuronModels.RulkovMap_get_derived_params(self)
    if _newclass:
        make_param_values = staticmethod(_NeuronModels.RulkovMap_make_param_values)
    else:
        make_param_values = _NeuronModels.RulkovMap_make_param_values
    if _newclass:
        make_var_values = staticmethod(_NeuronModels.RulkovMap_make_var_values)
    else:
        make_var_values = _NeuronModels.RulkovMap_make_var_values

    def __init__(self):
        this = _NeuronModels.new_RulkovMap()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _NeuronModels.delete_RulkovMap
    __del__ = lambda self: None
RulkovMap_swigregister = _NeuronModels.RulkovMap_swigregister
RulkovMap_swigregister(RulkovMap)

def RulkovMap_get_instance() -> "NeuronModels::RulkovMap const *":
    return _NeuronModels.RulkovMap_get_instance()
RulkovMap_get_instance = _NeuronModels.RulkovMap_get_instance

def RulkovMap_make_param_values(vals: 'DoubleVector') -> "NeuronModels::RulkovMap::ParamValues *":
    return _NeuronModels.RulkovMap_make_param_values(vals)
RulkovMap_make_param_values = _NeuronModels.RulkovMap_make_param_values

def RulkovMap_make_var_values(vals: 'VarInitVector') -> "NeuronModels::RulkovMap::VarValues *":
    return _NeuronModels.RulkovMap_make_var_values(vals)
RulkovMap_make_var_values = _NeuronModels.RulkovMap_make_var_values

class Izhikevich(Base):
    __swig_setmethods__ = {}
    for _s in [Base]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Izhikevich, name, value)
    __swig_getmethods__ = {}
    for _s in [Base]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, Izhikevich, name)
    __repr__ = _swig_repr
    if _newclass:
        get_instance = staticmethod(_NeuronModels.Izhikevich_get_instance)
    else:
        get_instance = _NeuronModels.Izhikevich_get_instance

    def get_sim_code(self) -> "std::string":
        return _NeuronModels.Izhikevich_get_sim_code(self)

    def get_threshold_condition_code(self) -> "std::string":
        return _NeuronModels.Izhikevich_get_threshold_condition_code(self)

    def get_param_names(self) -> "Snippet::Base::StringVec":
        return _NeuronModels.Izhikevich_get_param_names(self)

    def get_vars(self) -> "Snippet::Base::StringPairVec":
        return _NeuronModels.Izhikevich_get_vars(self)
    if _newclass:
        make_param_values = staticmethod(_NeuronModels.Izhikevich_make_param_values)
    else:
        make_param_values = _NeuronModels.Izhikevich_make_param_values
    if _newclass:
        make_var_values = staticmethod(_NeuronModels.Izhikevich_make_var_values)
    else:
        make_var_values = _NeuronModels.Izhikevich_make_var_values

    def __init__(self):
        this = _NeuronModels.new_Izhikevich()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _NeuronModels.delete_Izhikevich
    __del__ = lambda self: None
Izhikevich_swigregister = _NeuronModels.Izhikevich_swigregister
Izhikevich_swigregister(Izhikevich)

def Izhikevich_get_instance() -> "NeuronModels::Izhikevich const *":
    return _NeuronModels.Izhikevich_get_instance()
Izhikevich_get_instance = _NeuronModels.Izhikevich_get_instance

def Izhikevich_make_param_values(vals: 'DoubleVector') -> "NeuronModels::Izhikevich::ParamValues *":
    return _NeuronModels.Izhikevich_make_param_values(vals)
Izhikevich_make_param_values = _NeuronModels.Izhikevich_make_param_values

def Izhikevich_make_var_values(vals: 'VarInitVector') -> "NeuronModels::Izhikevich::VarValues *":
    return _NeuronModels.Izhikevich_make_var_values(vals)
Izhikevich_make_var_values = _NeuronModels.Izhikevich_make_var_values

class IzhikevichVariable(Izhikevich):
    __swig_setmethods__ = {}
    for _s in [Izhikevich]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, IzhikevichVariable, name, value)
    __swig_getmethods__ = {}
    for _s in [Izhikevich]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, IzhikevichVariable, name)
    __repr__ = _swig_repr
    if _newclass:
        get_instance = staticmethod(_NeuronModels.IzhikevichVariable_get_instance)
    else:
        get_instance = _NeuronModels.IzhikevichVariable_get_instance

    def get_param_names(self) -> "Snippet::Base::StringVec":
        return _NeuronModels.IzhikevichVariable_get_param_names(self)

    def get_vars(self) -> "Snippet::Base::StringPairVec":
        return _NeuronModels.IzhikevichVariable_get_vars(self)
    if _newclass:
        make_param_values = staticmethod(_NeuronModels.IzhikevichVariable_make_param_values)
    else:
        make_param_values = _NeuronModels.IzhikevichVariable_make_param_values
    if _newclass:
        make_var_values = staticmethod(_NeuronModels.IzhikevichVariable_make_var_values)
    else:
        make_var_values = _NeuronModels.IzhikevichVariable_make_var_values

    def __init__(self):
        this = _NeuronModels.new_IzhikevichVariable()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _NeuronModels.delete_IzhikevichVariable
    __del__ = lambda self: None
IzhikevichVariable_swigregister = _NeuronModels.IzhikevichVariable_swigregister
IzhikevichVariable_swigregister(IzhikevichVariable)

def IzhikevichVariable_get_instance() -> "NeuronModels::IzhikevichVariable const *":
    return _NeuronModels.IzhikevichVariable_get_instance()
IzhikevichVariable_get_instance = _NeuronModels.IzhikevichVariable_get_instance

def IzhikevichVariable_make_param_values(arg2: 'DoubleVector') -> "NeuronModels::IzhikevichVariable::ParamValues *":
    return _NeuronModels.IzhikevichVariable_make_param_values(arg2)
IzhikevichVariable_make_param_values = _NeuronModels.IzhikevichVariable_make_param_values

def IzhikevichVariable_make_var_values(vals: 'VarInitVector') -> "NeuronModels::IzhikevichVariable::VarValues *":
    return _NeuronModels.IzhikevichVariable_make_var_values(vals)
IzhikevichVariable_make_var_values = _NeuronModels.IzhikevichVariable_make_var_values

class SpikeSource(Base):
    __swig_setmethods__ = {}
    for _s in [Base]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, SpikeSource, name, value)
    __swig_getmethods__ = {}
    for _s in [Base]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, SpikeSource, name)
    __repr__ = _swig_repr
    if _newclass:
        get_instance = staticmethod(_NeuronModels.SpikeSource_get_instance)
    else:
        get_instance = _NeuronModels.SpikeSource_get_instance

    def get_threshold_condition_code(self) -> "std::string":
        return _NeuronModels.SpikeSource_get_threshold_condition_code(self)
    if _newclass:
        make_param_values = staticmethod(_NeuronModels.SpikeSource_make_param_values)
    else:
        make_param_values = _NeuronModels.SpikeSource_make_param_values
    if _newclass:
        make_var_values = staticmethod(_NeuronModels.SpikeSource_make_var_values)
    else:
        make_var_values = _NeuronModels.SpikeSource_make_var_values

    def __init__(self):
        this = _NeuronModels.new_SpikeSource()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _NeuronModels.delete_SpikeSource
    __del__ = lambda self: None
SpikeSource_swigregister = _NeuronModels.SpikeSource_swigregister
SpikeSource_swigregister(SpikeSource)

def SpikeSource_get_instance() -> "NeuronModels::SpikeSource const *":
    return _NeuronModels.SpikeSource_get_instance()
SpikeSource_get_instance = _NeuronModels.SpikeSource_get_instance

def SpikeSource_make_param_values(arg2: 'DoubleVector') -> "NeuronModels::SpikeSource::ParamValues *":
    return _NeuronModels.SpikeSource_make_param_values(arg2)
SpikeSource_make_param_values = _NeuronModels.SpikeSource_make_param_values

def SpikeSource_make_var_values(arg2: 'VarInitVector') -> "NeuronModels::SpikeSource::VarValues *":
    return _NeuronModels.SpikeSource_make_var_values(arg2)
SpikeSource_make_var_values = _NeuronModels.SpikeSource_make_var_values

class SpikeSourceArray(Base):
    __swig_setmethods__ = {}
    for _s in [Base]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, SpikeSourceArray, name, value)
    __swig_getmethods__ = {}
    for _s in [Base]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, SpikeSourceArray, name)
    __repr__ = _swig_repr
    if _newclass:
        get_instance = staticmethod(_NeuronModels.SpikeSourceArray_get_instance)
    else:
        get_instance = _NeuronModels.SpikeSourceArray_get_instance

    def get_sim_code(self) -> "std::string":
        return _NeuronModels.SpikeSourceArray_get_sim_code(self)

    def get_threshold_condition_code(self) -> "std::string":
        return _NeuronModels.SpikeSourceArray_get_threshold_condition_code(self)

    def get_reset_code(self) -> "std::string":
        return _NeuronModels.SpikeSourceArray_get_reset_code(self)

    def get_vars(self) -> "Snippet::Base::StringPairVec":
        return _NeuronModels.SpikeSourceArray_get_vars(self)

    def get_extra_global_params(self) -> "Snippet::Base::StringPairVec":
        return _NeuronModels.SpikeSourceArray_get_extra_global_params(self)
    if _newclass:
        make_param_values = staticmethod(_NeuronModels.SpikeSourceArray_make_param_values)
    else:
        make_param_values = _NeuronModels.SpikeSourceArray_make_param_values
    if _newclass:
        make_var_values = staticmethod(_NeuronModels.SpikeSourceArray_make_var_values)
    else:
        make_var_values = _NeuronModels.SpikeSourceArray_make_var_values

    def __init__(self):
        this = _NeuronModels.new_SpikeSourceArray()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _NeuronModels.delete_SpikeSourceArray
    __del__ = lambda self: None
SpikeSourceArray_swigregister = _NeuronModels.SpikeSourceArray_swigregister
SpikeSourceArray_swigregister(SpikeSourceArray)

def SpikeSourceArray_get_instance() -> "NeuronModels::SpikeSourceArray const *":
    return _NeuronModels.SpikeSourceArray_get_instance()
SpikeSourceArray_get_instance = _NeuronModels.SpikeSourceArray_get_instance

def SpikeSourceArray_make_param_values(arg2: 'DoubleVector') -> "NeuronModels::SpikeSourceArray::ParamValues *":
    return _NeuronModels.SpikeSourceArray_make_param_values(arg2)
SpikeSourceArray_make_param_values = _NeuronModels.SpikeSourceArray_make_param_values

def SpikeSourceArray_make_var_values(vals: 'VarInitVector') -> "NeuronModels::SpikeSourceArray::VarValues *":
    return _NeuronModels.SpikeSourceArray_make_var_values(vals)
SpikeSourceArray_make_var_values = _NeuronModels.SpikeSourceArray_make_var_values

class Poisson(Base):
    __swig_setmethods__ = {}
    for _s in [Base]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Poisson, name, value)
    __swig_getmethods__ = {}
    for _s in [Base]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, Poisson, name)
    __repr__ = _swig_repr
    if _newclass:
        get_instance = staticmethod(_NeuronModels.Poisson_get_instance)
    else:
        get_instance = _NeuronModels.Poisson_get_instance

    def get_sim_code(self) -> "std::string":
        return _NeuronModels.Poisson_get_sim_code(self)

    def get_threshold_condition_code(self) -> "std::string":
        return _NeuronModels.Poisson_get_threshold_condition_code(self)

    def get_param_names(self) -> "Snippet::Base::StringVec":
        return _NeuronModels.Poisson_get_param_names(self)

    def get_vars(self) -> "Snippet::Base::StringPairVec":
        return _NeuronModels.Poisson_get_vars(self)

    def get_extra_global_params(self) -> "Snippet::Base::StringPairVec":
        return _NeuronModels.Poisson_get_extra_global_params(self)

    def is_poisson(self) -> "bool":
        return _NeuronModels.Poisson_is_poisson(self)
    if _newclass:
        make_param_values = staticmethod(_NeuronModels.Poisson_make_param_values)
    else:
        make_param_values = _NeuronModels.Poisson_make_param_values
    if _newclass:
        make_var_values = staticmethod(_NeuronModels.Poisson_make_var_values)
    else:
        make_var_values = _NeuronModels.Poisson_make_var_values

    def __init__(self):
        this = _NeuronModels.new_Poisson()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _NeuronModels.delete_Poisson
    __del__ = lambda self: None
Poisson_swigregister = _NeuronModels.Poisson_swigregister
Poisson_swigregister(Poisson)

def Poisson_get_instance() -> "NeuronModels::Poisson const *":
    return _NeuronModels.Poisson_get_instance()
Poisson_get_instance = _NeuronModels.Poisson_get_instance

def Poisson_make_param_values(vals: 'DoubleVector') -> "NeuronModels::Poisson::ParamValues *":
    return _NeuronModels.Poisson_make_param_values(vals)
Poisson_make_param_values = _NeuronModels.Poisson_make_param_values

def Poisson_make_var_values(vals: 'VarInitVector') -> "NeuronModels::Poisson::VarValues *":
    return _NeuronModels.Poisson_make_var_values(vals)
Poisson_make_var_values = _NeuronModels.Poisson_make_var_values

class PoissonNew(Base):
    __swig_setmethods__ = {}
    for _s in [Base]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, PoissonNew, name, value)
    __swig_getmethods__ = {}
    for _s in [Base]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, PoissonNew, name)
    __repr__ = _swig_repr
    if _newclass:
        get_instance = staticmethod(_NeuronModels.PoissonNew_get_instance)
    else:
        get_instance = _NeuronModels.PoissonNew_get_instance

    def get_sim_code(self) -> "std::string":
        return _NeuronModels.PoissonNew_get_sim_code(self)

    def get_threshold_condition_code(self) -> "std::string":
        return _NeuronModels.PoissonNew_get_threshold_condition_code(self)

    def get_param_names(self) -> "Snippet::Base::StringVec":
        return _NeuronModels.PoissonNew_get_param_names(self)

    def get_vars(self) -> "Snippet::Base::StringPairVec":
        return _NeuronModels.PoissonNew_get_vars(self)

    def get_derived_params(self) -> "Snippet::Base::DerivedParamVec":
        return _NeuronModels.PoissonNew_get_derived_params(self)
    if _newclass:
        make_param_values = staticmethod(_NeuronModels.PoissonNew_make_param_values)
    else:
        make_param_values = _NeuronModels.PoissonNew_make_param_values
    if _newclass:
        make_var_values = staticmethod(_NeuronModels.PoissonNew_make_var_values)
    else:
        make_var_values = _NeuronModels.PoissonNew_make_var_values

    def __init__(self):
        this = _NeuronModels.new_PoissonNew()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _NeuronModels.delete_PoissonNew
    __del__ = lambda self: None
PoissonNew_swigregister = _NeuronModels.PoissonNew_swigregister
PoissonNew_swigregister(PoissonNew)

def PoissonNew_get_instance() -> "NeuronModels::PoissonNew const *":
    return _NeuronModels.PoissonNew_get_instance()
PoissonNew_get_instance = _NeuronModels.PoissonNew_get_instance

def PoissonNew_make_param_values(vals: 'DoubleVector') -> "NeuronModels::PoissonNew::ParamValues *":
    return _NeuronModels.PoissonNew_make_param_values(vals)
PoissonNew_make_param_values = _NeuronModels.PoissonNew_make_param_values

def PoissonNew_make_var_values(vals: 'VarInitVector') -> "NeuronModels::PoissonNew::VarValues *":
    return _NeuronModels.PoissonNew_make_var_values(vals)
PoissonNew_make_var_values = _NeuronModels.PoissonNew_make_var_values

class TraubMiles(Base):
    __swig_setmethods__ = {}
    for _s in [Base]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, TraubMiles, name, value)
    __swig_getmethods__ = {}
    for _s in [Base]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, TraubMiles, name)
    __repr__ = _swig_repr
    if _newclass:
        get_instance = staticmethod(_NeuronModels.TraubMiles_get_instance)
    else:
        get_instance = _NeuronModels.TraubMiles_get_instance

    def get_sim_code(self) -> "std::string":
        return _NeuronModels.TraubMiles_get_sim_code(self)

    def get_threshold_condition_code(self) -> "std::string":
        return _NeuronModels.TraubMiles_get_threshold_condition_code(self)

    def get_param_names(self) -> "Snippet::Base::StringVec":
        return _NeuronModels.TraubMiles_get_param_names(self)

    def get_vars(self) -> "Snippet::Base::StringPairVec":
        return _NeuronModels.TraubMiles_get_vars(self)
    if _newclass:
        make_param_values = staticmethod(_NeuronModels.TraubMiles_make_param_values)
    else:
        make_param_values = _NeuronModels.TraubMiles_make_param_values
    if _newclass:
        make_var_values = staticmethod(_NeuronModels.TraubMiles_make_var_values)
    else:
        make_var_values = _NeuronModels.TraubMiles_make_var_values

    def __init__(self):
        this = _NeuronModels.new_TraubMiles()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _NeuronModels.delete_TraubMiles
    __del__ = lambda self: None
TraubMiles_swigregister = _NeuronModels.TraubMiles_swigregister
TraubMiles_swigregister(TraubMiles)

def TraubMiles_get_instance() -> "NeuronModels::TraubMiles const *":
    return _NeuronModels.TraubMiles_get_instance()
TraubMiles_get_instance = _NeuronModels.TraubMiles_get_instance

def TraubMiles_make_param_values(vals: 'DoubleVector') -> "NeuronModels::TraubMiles::ParamValues *":
    return _NeuronModels.TraubMiles_make_param_values(vals)
TraubMiles_make_param_values = _NeuronModels.TraubMiles_make_param_values

def TraubMiles_make_var_values(vals: 'VarInitVector') -> "NeuronModels::TraubMiles::VarValues *":
    return _NeuronModels.TraubMiles_make_var_values(vals)
TraubMiles_make_var_values = _NeuronModels.TraubMiles_make_var_values

class TraubMilesFast(TraubMiles):
    __swig_setmethods__ = {}
    for _s in [TraubMiles]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, TraubMilesFast, name, value)
    __swig_getmethods__ = {}
    for _s in [TraubMiles]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, TraubMilesFast, name)
    __repr__ = _swig_repr
    if _newclass:
        get_instance = staticmethod(_NeuronModels.TraubMilesFast_get_instance)
    else:
        get_instance = _NeuronModels.TraubMilesFast_get_instance

    def get_sim_code(self) -> "std::string":
        return _NeuronModels.TraubMilesFast_get_sim_code(self)
    if _newclass:
        make_param_values = staticmethod(_NeuronModels.TraubMilesFast_make_param_values)
    else:
        make_param_values = _NeuronModels.TraubMilesFast_make_param_values
    if _newclass:
        make_var_values = staticmethod(_NeuronModels.TraubMilesFast_make_var_values)
    else:
        make_var_values = _NeuronModels.TraubMilesFast_make_var_values

    def __init__(self):
        this = _NeuronModels.new_TraubMilesFast()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _NeuronModels.delete_TraubMilesFast
    __del__ = lambda self: None
TraubMilesFast_swigregister = _NeuronModels.TraubMilesFast_swigregister
TraubMilesFast_swigregister(TraubMilesFast)

def TraubMilesFast_get_instance() -> "NeuronModels::TraubMilesFast const *":
    return _NeuronModels.TraubMilesFast_get_instance()
TraubMilesFast_get_instance = _NeuronModels.TraubMilesFast_get_instance

def TraubMilesFast_make_param_values(vals: 'DoubleVector') -> "NeuronModels::TraubMilesFast::ParamValues *":
    return _NeuronModels.TraubMilesFast_make_param_values(vals)
TraubMilesFast_make_param_values = _NeuronModels.TraubMilesFast_make_param_values

def TraubMilesFast_make_var_values(vals: 'VarInitVector') -> "NeuronModels::TraubMilesFast::VarValues *":
    return _NeuronModels.TraubMilesFast_make_var_values(vals)
TraubMilesFast_make_var_values = _NeuronModels.TraubMilesFast_make_var_values

class TraubMilesAlt(TraubMiles):
    __swig_setmethods__ = {}
    for _s in [TraubMiles]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, TraubMilesAlt, name, value)
    __swig_getmethods__ = {}
    for _s in [TraubMiles]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, TraubMilesAlt, name)
    __repr__ = _swig_repr
    if _newclass:
        get_instance = staticmethod(_NeuronModels.TraubMilesAlt_get_instance)
    else:
        get_instance = _NeuronModels.TraubMilesAlt_get_instance

    def get_sim_code(self) -> "std::string":
        return _NeuronModels.TraubMilesAlt_get_sim_code(self)
    if _newclass:
        make_param_values = staticmethod(_NeuronModels.TraubMilesAlt_make_param_values)
    else:
        make_param_values = _NeuronModels.TraubMilesAlt_make_param_values
    if _newclass:
        make_var_values = staticmethod(_NeuronModels.TraubMilesAlt_make_var_values)
    else:
        make_var_values = _NeuronModels.TraubMilesAlt_make_var_values

    def __init__(self):
        this = _NeuronModels.new_TraubMilesAlt()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _NeuronModels.delete_TraubMilesAlt
    __del__ = lambda self: None
TraubMilesAlt_swigregister = _NeuronModels.TraubMilesAlt_swigregister
TraubMilesAlt_swigregister(TraubMilesAlt)

def TraubMilesAlt_get_instance() -> "NeuronModels::TraubMilesAlt const *":
    return _NeuronModels.TraubMilesAlt_get_instance()
TraubMilesAlt_get_instance = _NeuronModels.TraubMilesAlt_get_instance

def TraubMilesAlt_make_param_values(vals: 'DoubleVector') -> "NeuronModels::TraubMilesAlt::ParamValues *":
    return _NeuronModels.TraubMilesAlt_make_param_values(vals)
TraubMilesAlt_make_param_values = _NeuronModels.TraubMilesAlt_make_param_values

def TraubMilesAlt_make_var_values(vals: 'VarInitVector') -> "NeuronModels::TraubMilesAlt::VarValues *":
    return _NeuronModels.TraubMilesAlt_make_var_values(vals)
TraubMilesAlt_make_var_values = _NeuronModels.TraubMilesAlt_make_var_values

class TraubMilesNStep(TraubMiles):
    __swig_setmethods__ = {}
    for _s in [TraubMiles]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, TraubMilesNStep, name, value)
    __swig_getmethods__ = {}
    for _s in [TraubMiles]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, TraubMilesNStep, name)
    __repr__ = _swig_repr
    if _newclass:
        get_instance = staticmethod(_NeuronModels.TraubMilesNStep_get_instance)
    else:
        get_instance = _NeuronModels.TraubMilesNStep_get_instance

    def get_sim_code(self) -> "std::string":
        return _NeuronModels.TraubMilesNStep_get_sim_code(self)

    def get_param_names(self) -> "Snippet::Base::StringVec":
        return _NeuronModels.TraubMilesNStep_get_param_names(self)
    if _newclass:
        make_param_values = staticmethod(_NeuronModels.TraubMilesNStep_make_param_values)
    else:
        make_param_values = _NeuronModels.TraubMilesNStep_make_param_values
    if _newclass:
        make_var_values = staticmethod(_NeuronModels.TraubMilesNStep_make_var_values)
    else:
        make_var_values = _NeuronModels.TraubMilesNStep_make_var_values

    def __init__(self):
        this = _NeuronModels.new_TraubMilesNStep()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _NeuronModels.delete_TraubMilesNStep
    __del__ = lambda self: None
TraubMilesNStep_swigregister = _NeuronModels.TraubMilesNStep_swigregister
TraubMilesNStep_swigregister(TraubMilesNStep)

def TraubMilesNStep_get_instance() -> "NeuronModels::TraubMilesNStep const *":
    return _NeuronModels.TraubMilesNStep_get_instance()
TraubMilesNStep_get_instance = _NeuronModels.TraubMilesNStep_get_instance

def TraubMilesNStep_make_param_values(vals: 'DoubleVector') -> "NeuronModels::TraubMilesNStep::ParamValues *":
    return _NeuronModels.TraubMilesNStep_make_param_values(vals)
TraubMilesNStep_make_param_values = _NeuronModels.TraubMilesNStep_make_param_values

def TraubMilesNStep_make_var_values(vals: 'VarInitVector') -> "NeuronModels::TraubMilesNStep::VarValues *":
    return _NeuronModels.TraubMilesNStep_make_var_values(vals)
TraubMilesNStep_make_var_values = _NeuronModels.TraubMilesNStep_make_var_values

class Custom(Base):
    __swig_setmethods__ = {}
    for _s in [Base]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Custom, name, value)
    __swig_getmethods__ = {}
    for _s in [Base]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, Custom, name)
    __repr__ = _swig_repr
    if _newclass:
        get_instance = staticmethod(_NeuronModels.Custom_get_instance)
    else:
        get_instance = _NeuronModels.Custom_get_instance
    if _newclass:
        make_param_values = staticmethod(_NeuronModels.Custom_make_param_values)
    else:
        make_param_values = _NeuronModels.Custom_make_param_values
    if _newclass:
        make_var_values = staticmethod(_NeuronModels.Custom_make_var_values)
    else:
        make_var_values = _NeuronModels.Custom_make_var_values

    def __init__(self):
        if self.__class__ == Custom:
            _self = None
        else:
            _self = self
        this = _NeuronModels.new_Custom(_self, )
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _NeuronModels.delete_Custom
    __del__ = lambda self: None
    def __disown__(self):
        self.this.disown()
        _NeuronModels.disown_Custom(self)
        return weakref_proxy(self)
Custom_swigregister = _NeuronModels.Custom_swigregister
Custom_swigregister(Custom)

def Custom_get_instance() -> "NeuronModels::Custom const *":
    return _NeuronModels.Custom_get_instance()
Custom_get_instance = _NeuronModels.Custom_get_instance

def Custom_make_param_values(vals: 'DoubleVector') -> "CustomValues::ParamValues *":
    return _NeuronModels.Custom_make_param_values(vals)
Custom_make_param_values = _NeuronModels.Custom_make_param_values

def Custom_make_var_values(vals: 'VarInitVector') -> "CustomValues::VarValues *":
    return _NeuronModels.Custom_make_var_values(vals)
Custom_make_var_values = _NeuronModels.Custom_make_var_values

# This file is compatible with both classic and new-style classes.


