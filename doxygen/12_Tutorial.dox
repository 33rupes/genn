//----------------------------------------------------------------------------
/*! \page Tutorial2 Tutorial 2

In this tutorial we will learn to add synapsePopulations to connect neurons in neuron groups to each other with synaptic models. As an example we will connect the ten Hodgkin-Huxley neurons from tutorial 1 in a ring of excitatory synapses.

First, copy the files from Tutorial 1 into a new directory and rename the ``tenHHModel.cc`` to ``tenHHRingModel.cc`` and ``tenHHSimulation.cc`` to ``tenHHRingSimulation.cc``, e.g. on Linux or Mac:
\code
>> cp -r tenHH_project tenHHRing_project
>> cd tenHHRing_project
>> mv tenHHModel.cc tenHHRingModel.cc
>> mv tenHHSimulation.cc tenHHRingSimulation.cc
\endcode
Now, we need to add a synapse group to the model that allows to connect neurons from the Pop1 group to connect to other neurons of this group. Open `tenHHRingModel.cc`, change the model name inside,
\code
  model.setName("tenHHRing");
\endcode

\section addSynapse Adding Synaptic connections
Now we need additional initial values and parameters for the synapse and post-synaptic models. We will use the standard WeightUpdateModels::StaticPulse weight update model and PostsynapticModels::ExpCond post-synaptic model. They need the following initial variables and parameters:
\code
WeightUpdateModels::StaticPulse::VarValues s_ini(
    0.0 // 0 - g: the synaptic conductance value
);

PostsynapticModels::ExpCond::ParamValues ps_p(
    1.0,      // 0 - tau_S: decay time constant for S [ms]
    -80.0     // 1 - Erev: Reversal potential
);
\endcode
\note the WeightUpdateModels::StaticPulse weight update model has no parameters and the PostsynapticModels::ExpCond post-synaptic model has no state variables.

We can then add a synapse population at the end of the `modelDefinition(...)` function,
\code
model.addSynapsePopulation<WeightUpdateModels::StaticPulse, PostsynapticModels::ExpCond>(
    "Pop1self", SynapseMatrixType::DENSE_INDIVIDUALG, 10,
    "Pop1", "Pop1",
    {}, s_ini,
    ps_p, {});
\endcode
The addSynapsePopulation parameters are
\arg WeightUpdateModel: template parameter specifying the type of weight update model (derived from WeightUpdateModels::Base).
\arg PostsynapticModel: template parameter specifying the  type of postsynaptic model (derived from PostsynapticModels::Base).
\arg name string containing unique name of synapse population.
\arg mtype how the synaptic matrix associated with this synapse population should be represented. Here SynapseMatrixType::DENSE_INDIVIDUALG means that there will be a dense connectivity matrix with seperate values for each entry.
\arg delayStep integer specifying number of timesteps of propagation delay that spikes travelling through this synapses population should incur (or NO_DELAY for none)
\arg src string specifying name of presynaptic (source) population
\arg trg string specifying name of postsynaptic (target) population
\arg weightParamValues parameters for weight update model wrapped in WeightUpdateModel::ParamValues object.
\arg weightVarInitialisers initial values or initialisation snippets for the weight update model's state variables wrapped in a WeightUpdateModel::VarValues object.
\arg postsynapticParamValues parameters for postsynaptic model wrapped in PostsynapticModel::ParamValues object.
\arg postsynapticVarInitialisers initial values or initialisation snippets for the postsynaptic model wrapped in PostsynapticModel::VarValues object.

Adding the addSynapsePopulation command to the model definition informs GeNN that there will be synapses between the named neuron populations, here between population `Pop1` and itself. 
In the case of SynapseMatrixType::DENSE_INDIVIDUALG connectivity, where individual connections are present is determined by the weight update model's `g` variable which will need to be initialised in our user code. 
As always, the `modelDefinition` function ends on 
\code
  model.finalize();
\endcode 
At this point our model definition file `tenHHRingModel.cc` should look like this
\code
// Model definition file tenHHRing.cc
#include "modelSpec.h"

void modelDefinition(NNmodel &model)
{
    // Settings
    GENN_PREFERENCES::defaultVarMode = VarMode::LOC_HOST_DEVICE_INIT_DEVICE;

    // definition of tenHHRing
    initGeNN();
    model.setDT(0.1);
    model.setName("tenHHRing");

    NeuronModels::TraubMiles::ParamValues p(
        7.15,       // 0 - gNa: Na conductance in muS
        50.0,       // 1 - ENa: Na equi potential in mV
        1.43,       // 2 - gK: K conductance in muS
        -95.0,      // 3 - EK: K equi potential in mV
        0.02672,    // 4 - gl: leak conductance in muS
        -63.563,    // 5 - El: leak equi potential in mV
        0.143       // 6 - Cmem: membr. capacity density in nF
    );

    NeuronModels::TraubMiles::VarValues ini(
        -60.0,         // 0 - membrane potential V
        0.0529324,     // 1 - prob. for Na channel activation m
        0.3176767,     // 2 - prob. for not Na channel blocking h
        0.5961207      // 3 - prob. for K channel activation n
    );
    model.addNeuronPopulation<NeuronModels::TraubMiles>("Pop1", 10, p, ini);

    WeightUpdateModels::StaticPulse::VarValues s_ini(
        0.0 // 0 - g: the synaptic conductance value
    );

    PostsynapticModels::ExpCond::ParamValues ps_p(
        1.0,    // 0 - tau_S: decay time constant for S [ms]
        -80.0   // 1 - Erev: Reversal potential
    );

    model.addSynapsePopulation<WeightUpdateModels::StaticPulse, PostsynapticModels::ExpCond>(
        "Pop1self", SynapseMatrixType::DENSE_INDIVIDUALG, NO_DELAY,
        "Pop1", "Pop1",
        {}, s_ini,
        ps_p, {});
        model.finalize();
}
\endcode

\section SynapseMatrix Defining the Detailed Synaptic Connections
Open the `tenHHRingSimulation.cc` file and update the file names of includes:
\code
// tenHHRingModel simulation code
#include "tenHHRingModel_CODE/definitions.h"
\endcode
Because, after memory allocation and initialization, `gPop1self` will contain only zeros (as specified by ``s_ini``), we generate the desired ring connectivity by assigning a non-zero conductivity of -0.2 \f$\mu\f$S to all synapses from neuron `i` to `i+1` (and `9` to `0` to close the ring).
\code
allocateMem();
initialize();
// define the connectivity
for (int i= 0; i < 10; i++) {
    const int pre= i;
    const int post= (i+1)%10;
    gPop1self[pre*10+post]= -0.2;
}
#ifndef CPU_ONLY
pushPop1selfStateToDevice();
#endif
\endcode

We can now build our new model:
\code
>> genn-buildmodel.sh tenHHRingModel.cc
\endcode
\note
Again, if you don't have an NVIDIA GPU and are running GeNN in CPU_ONLY mode, you can instead build with the `-c` option as described in \ref Tutorial1.

and, after adjusting the GNUmakefile or MSBuild script to point to ``tenHHRingSimulation.cc`` rather than ``tenHHSimulation.cc``,  we can build and run our new simulator in the same way described in \ref Tutorial1.
However if we plot the content of columns one against the subsequent 10 columns of `tenHHexample.V.dat` it looks very similar as in \ref Tutorial1
\image html tenHHRingexample1.png
\image latex tenHHRingexample1.png width=10cm

This is because none of the neurons are spiking so there are no spikes to propagate around the ring.

\section initialConditions Providing initial stimuli
We can use a NeuronModels::SpikeSource to inject an initial spike during the first timestep to start spikes propagating around the ring. Firstly we need to add it to the network by adding the following to the end of the `modelDefinition(...)` function:
\code
model.addNeuronPopulation<NeuronModels::SpikeSource>("Stim", 1, {}, {});
model.addSynapsePopulation<WeightUpdateModels::StaticPulse, PostsynapticModels::ExpCond>(
    "StimPop1", SynapseMatrixType::DENSE_INDIVIDUALG, NO_DELAY,
    "Stim", "Pop1",
    {}, s_ini,
    ps_p, {});
\endcode
we can then initialise this connection's connectivity matrix in `tenHHRingSimulation.cc` file 
\note
all other synapses will be initialised to zero because the synapse population used the previously-defined ``s_ini`` weight update initial values.

\code
// define stimuli connectivity
gStimPop1[0]= -0.2;
#ifndef CPU_ONLY
pushStimPop1StateToDevice();
#endif
\endcode
and finally inject a spike in the first timestep
\code
if(i == 0) {
    spikeCount_Stim = 1;
    spike_Stim[0] = 0;
#ifndef CPU_ONLY
    pushStimSpikesToDevice();
#endif
}
\endcode
\note
``spike_Stim[n]`` is used to specify the indices of the neurons in population ``Stim`` spikes which should emit spikes where \f$n \in [0, \mbox{spikeCount\_Stim} )\f$.

At this point our user code `tenHHRingSimulation.cc` should look like this
\code
// tenHHRing simulation code
#include "tenHHRing_CODE/definitions.h"

#include <fstream>

int main()
{
    allocateMem();
    initialize();

    // define the connectivity
    for (int i= 0; i < 10; i++) {
        const int pre= i;
        const int post= (i+1)%10;
        gPop1self[pre*10+post]= -0.2;
    }
#ifndef CPU_ONLY
    pushPop1selfStateToDevice();
#endif

    // define stimuli connectivity
    gStimPop1[0]= -0.2;
#ifndef CPU_ONLY
    pushStimPop1StateToDevice();
#endif

    ofstream os("tenHHRing_output.V.dat");
    for (int i= 0; i < 10000; i++) {
        if(i == 0) {
            spikeCount_Stim = 1;
            spike_Stim[0] = 0;
#ifndef CPU_ONLY
            pushStimSpikesToDevice();
#endif
        }
#ifdef CPU_ONLY
        stepTimeCPU();
#else
        stepTimeGPU();
        
        pullPop1StateFromDevice();
#endif

        os << t << " ";
        for (int j= 0; j < 10; j++) {
            os << VPop1[j] << " ";
        }
        s << endl;
    }
    os.close();
    return 0;
}
\endcode
Finally if we build, make and run this model; and plot the first 200 ms of the ten neurons' membrane voltages - they now looks like this:
\image html tenHHRingexample2.png
\image latex tenHHRingexample2.png width=10cm

\link Tutorial1 Previous\endlink | \link Tutorial2 Top\endlink | \link UserGuide Next\endlink

*/
