##--------------------------------------------------------------------------
##   Author: Thomas Nowotny
##
##   Institute: Center for Computational Neuroscience and Robotics
##              University of Sussex
##              Falmer, Brighton BN1 9QJ, UK
##
##   email to:  T.Nowotny@sussex.ac.uk
##
##   initial version: 2010-02-07
##
##--------------------------------------------------------------------------


# Makefile for the GeNN "generateALL.exe" and "genn.lib" binaries
# This is a Windows Makefile, to be used by the MS nmake build system
#--------------------------------------------------------------------

# Source, Include, Object and Library directories
SRC_PATH                =$(GENN_PATH)\lib\src
INC_PATH                =$(GENN_PATH)\lib\include
OBJ_PATH                =$(GENN_PATH)\lib\obj
LIB_PATH                =$(GENN_PATH)\lib\lib
OUT_PATH                =$(MAKEDIR)

# Global CUDA compiler settings
!IFNDEF CPU_ONLY
    NVCC                ="$(CUDA_PATH)\bin\nvcc.exe"
!ENDIF

# Global C++ compiler settings
!IFNDEF CPU_ONLY
    CXXFLAGS            =/nologo /EHsc /DNVCC=\"$(NVCC:\=/)\"
!ELSE
    CXXFLAGS            =/nologo /EHsc /DCPU_ONLY
!ENDIF
!IFDEF DEBUG
    CXXFLAGS            =$(CXXFLAGS) /debug /Zi /Od /DDEBUG
!ENDIF

# Global include and link flags
!IFNDEF CPU_ONLY
    INCLUDE_FLAGS       =/I"$(INC_PATH)" /I"$(CUDA_PATH)\include"
!   IF "$(PROCESSOR_ARCHITECTURE)" == "AMD64" || "$(PROCESSOR_ARCHITEW6432)" == "AMD64"
        LINK_FLAGS      ="$(LIB_PATH)\genn.lib" "$(CUDA_PATH)\lib\x64\cudart.lib" "$(CUDA_PATH)\lib\x64\cuda.lib"
!   ELSE
        LINK_FLAGS      ="$(LIB_PATH)\genn.lib" "$(CUDA_PATH)\lib\Win32\cudart.lib" "$(CUDA_PATH)\lib\Win32\cuda.lib"
!   ENDIF
!ELSE
    INCLUDE_FLAGS       =/I"$(INC_PATH)"
    LINK_FLAGS          ="$(LIB_PATH)\genn.lib"
!ENDIF

# generateALL and libgenn.a object targets
GENERATEALL_OBJ         =$(OUT_PATH)\generateALL.obj $(OUT_PATH)\generateRunner.obj $(OUT_PATH)\generateCPU.obj $(OUT_PATH)\generateKernels.obj
LIBGENN_OBJ             =$(OBJ_PATH)\global.obj $(OBJ_PATH)\modelSpec.obj $(OBJ_PATH)\neuronModels.obj $(OBJ_PATH)\synapseModels.obj $(OBJ_PATH)\postSynapseModels.obj $(OBJ_PATH)\utils.obj $(OBJ_PATH)\stringUtils.obj $(OBJ_PATH)\sparseUtils.obj $(OBJ_PATH)\hr_time.obj


# Target rules
all: $(OUT_PATH)\generateALL.exe

{$(SRC_PATH)}.cc{$(OBJ_PATH)}.obj:
	$(CXX) $(CXXFLAGS) /c /Fo$@ %s $(INCLUDE_FLAGS)

{$(SRC_PATH)}.cc{$(OUT_PATH)}.obj:
	$(CXX) $(CXXFLAGS) /c /Fo$@ %s $(INCLUDE_FLAGS)

$(LIB_PATH)\genn.lib: $(OBJ_PATH) $(LIB_PATH) $(LIBGENN_OBJ)
	lib /nologo /out:$@ $(LIBGENN_OBJ)

$(OUT_PATH)\generateALL.exe: $(GENERATEALL_OBJ) $(LIB_PATH)\genn.lib
	$(CXX) $(CXXFLAGS) /Fe$@ $(GENERATEALL_OBJ) $(LINK_FLAGS)

$(OUT_PATH)\generateALL.obj:
	$(CXX) $(CXXFLAGS) /c /Fo$@ $(SRC_PATH)\generateALL.cc $(INCLUDE_FLAGS) /FI"$(MODEL)"

$(OBJ_PATH):
	mkdir $@ 2>nul

$(LIB_PATH):
	mkdir $@ 2>nul

clean: clean_generateall clean_libgenn

clean_generateall:
	-del $(OUT_PATH)\generateALL.exe $(GENERATEALL_OBJ) 2>nul

clean_libgenn:
	-rd /s /q $(OBJ_PATH) $(LIB_PATH) 2>nul
