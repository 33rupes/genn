# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.12
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    def swig_import_helper():
        import importlib
        pkg = __name__.rpartition('.')[0]
        mname = '.'.join((pkg, '_SharedLibraryModel')).lstrip('.')
        try:
            return importlib.import_module(mname)
        except ImportError:
            return importlib.import_module('_SharedLibraryModel')
    _SharedLibraryModel = swig_import_helper()
    del swig_import_helper
elif _swig_python_version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_SharedLibraryModel', [dirname(__file__)])
        except ImportError:
            import _SharedLibraryModel
            return _SharedLibraryModel
        try:
            _mod = imp.load_module('_SharedLibraryModel', fp, pathname, description)
        finally:
            if fp is not None:
                fp.close()
        return _mod
    _SharedLibraryModel = swig_import_helper()
    del swig_import_helper
else:
    import _SharedLibraryModel
del _swig_python_version_info

try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        if _newclass:
            object.__setattr__(self, name, value)
        else:
            self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr(self, class_type, name):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    raise AttributeError("'%s' object has no attribute '%s'" % (class_type.__name__, name))


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except __builtin__.Exception:
    class _object:
        pass
    _newclass = 0

class SharedLibraryModel_f(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SharedLibraryModel_f, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SharedLibraryModel_f, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _SharedLibraryModel.new_SharedLibraryModel_f(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _SharedLibraryModel.delete_SharedLibraryModel_f
    __del__ = lambda self: None

    def open(self, pathToModel: 'std::string const &', modelName: 'std::string const &') -> "bool":
        return _SharedLibraryModel.SharedLibraryModel_f_open(self, pathToModel, modelName)

    def init_io(self, popName: 'std::string const &', availableDTypes: 'std::bitset< 5 > const &') -> "void":
        return _SharedLibraryModel.SharedLibraryModel_f_init_io(self, popName, availableDTypes)

    def init_neuron_pop_io(self, popName: 'std::string const &') -> "void":
        return _SharedLibraryModel.SharedLibraryModel_f_init_neuron_pop_io(self, popName)

    def init_synapse_pop_io(self, popName: 'std::string const &') -> "void":
        return _SharedLibraryModel.SharedLibraryModel_f_init_synapse_pop_io(self, popName)

    def init_current_source_io(self, csName: 'std::string const &') -> "void":
        return _SharedLibraryModel.SharedLibraryModel_f_init_current_source_io(self, csName)

    def pull_state_from_device(self, popName: 'std::string const &') -> "void":
        return _SharedLibraryModel.SharedLibraryModel_f_pull_state_from_device(self, popName)

    def pull_spikes_from_device(self, popName: 'std::string const &') -> "void":
        return _SharedLibraryModel.SharedLibraryModel_f_pull_spikes_from_device(self, popName)

    def pull_current_spikes_from_device(self, popName: 'std::string const &') -> "void":
        return _SharedLibraryModel.SharedLibraryModel_f_pull_current_spikes_from_device(self, popName)

    def push_state_to_device(self, popName: 'std::string const &') -> "void":
        return _SharedLibraryModel.SharedLibraryModel_f_push_state_to_device(self, popName)

    def push_spikes_to_device(self, popName: 'std::string const &') -> "void":
        return _SharedLibraryModel.SharedLibraryModel_f_push_spikes_to_device(self, popName)

    def assign_external_yale_ind(self, popName: 'std::string const &', nConn: 'int const') -> "void":
        return _SharedLibraryModel.SharedLibraryModel_f_assign_external_yale_ind(self, popName, nConn)

    def assign_external_yale_ind_in_g(self, popName: 'std::string const &', nPre: 'int const') -> "void":
        return _SharedLibraryModel.SharedLibraryModel_f_assign_external_yale_ind_in_g(self, popName, nPre)

    def assign_external_ragged_ind(self, popName: 'std::string const &', nPaddedConn: 'int const') -> "void":
        return _SharedLibraryModel.SharedLibraryModel_f_assign_external_ragged_ind(self, popName, nPaddedConn)

    def assign_external_ragged_row_length(self, popName: 'std::string const &', nPre: 'int const') -> "void":
        return _SharedLibraryModel.SharedLibraryModel_f_assign_external_ragged_row_length(self, popName, nPre)

    def get_symbol(self, symbolName: 'std::string const &', allowMissing: 'bool'=False) -> "void *":
        return _SharedLibraryModel.SharedLibraryModel_f_get_symbol(self, symbolName, allowMissing)

    def allocate_mem(self) -> "void":
        return _SharedLibraryModel.SharedLibraryModel_f_allocate_mem(self)

    def allocate_yale_proj(self, popName: 'std::string const &', nConn: 'unsigned int') -> "void":
        return _SharedLibraryModel.SharedLibraryModel_f_allocate_yale_proj(self, popName, nConn)

    def allocate_extra_global_param(self, popName: 'std::string const &', paramName: 'std::string const &', size: 'int const') -> "void":
        return _SharedLibraryModel.SharedLibraryModel_f_allocate_extra_global_param(self, popName, paramName, size)

    def free_extra_global_param(self, popName: 'std::string const &', paramName: 'std::string const &') -> "void":
        return _SharedLibraryModel.SharedLibraryModel_f_free_extra_global_param(self, popName, paramName)

    def initialize(self) -> "void":
        return _SharedLibraryModel.SharedLibraryModel_f_initialize(self)

    def initialize_model(self) -> "void":
        return _SharedLibraryModel.SharedLibraryModel_f_initialize_model(self)

    def step_time_gpu(self) -> "void":
        return _SharedLibraryModel.SharedLibraryModel_f_step_time_gpu(self)

    def step_time_cpu(self) -> "void":
        return _SharedLibraryModel.SharedLibraryModel_f_step_time_cpu(self)

    def exit_ge_nn(self) -> "void":
        return _SharedLibraryModel.SharedLibraryModel_f_exit_ge_nn(self)

    def assign_external_pointer_array_sc(self, varName: 'std::string const &', varSize: 'int const') -> "void":
        return _SharedLibraryModel.SharedLibraryModel_f_assign_external_pointer_array_sc(self, varName, varSize)

    def assign_external_pointer_single_sc(self, varName: 'std::string const &') -> "void":
        return _SharedLibraryModel.SharedLibraryModel_f_assign_external_pointer_single_sc(self, varName)

    def assign_external_pointer_array_uc(self, varName: 'std::string const &', varSize: 'int const') -> "void":
        return _SharedLibraryModel.SharedLibraryModel_f_assign_external_pointer_array_uc(self, varName, varSize)

    def assign_external_pointer_single_uc(self, varName: 'std::string const &') -> "void":
        return _SharedLibraryModel.SharedLibraryModel_f_assign_external_pointer_single_uc(self, varName)

    def assign_external_pointer_array_s(self, varName: 'std::string const &', varSize: 'int const') -> "void":
        return _SharedLibraryModel.SharedLibraryModel_f_assign_external_pointer_array_s(self, varName, varSize)

    def assign_external_pointer_single_s(self, varName: 'std::string const &') -> "void":
        return _SharedLibraryModel.SharedLibraryModel_f_assign_external_pointer_single_s(self, varName)

    def assign_external_pointer_array_us(self, varName: 'std::string const &', varSize: 'int const') -> "void":
        return _SharedLibraryModel.SharedLibraryModel_f_assign_external_pointer_array_us(self, varName, varSize)

    def assign_external_pointer_single_us(self, varName: 'std::string const &') -> "void":
        return _SharedLibraryModel.SharedLibraryModel_f_assign_external_pointer_single_us(self, varName)

    def assign_external_pointer_array_i(self, varName: 'std::string const &', varSize: 'int const') -> "void":
        return _SharedLibraryModel.SharedLibraryModel_f_assign_external_pointer_array_i(self, varName, varSize)

    def assign_external_pointer_single_i(self, varName: 'std::string const &') -> "void":
        return _SharedLibraryModel.SharedLibraryModel_f_assign_external_pointer_single_i(self, varName)

    def assign_external_pointer_array_ui(self, varName: 'std::string const &', varSize: 'int const') -> "void":
        return _SharedLibraryModel.SharedLibraryModel_f_assign_external_pointer_array_ui(self, varName, varSize)

    def assign_external_pointer_single_ui(self, varName: 'std::string const &') -> "void":
        return _SharedLibraryModel.SharedLibraryModel_f_assign_external_pointer_single_ui(self, varName)

    def assign_external_pointer_array_l(self, varName: 'std::string const &', varSize: 'int const') -> "void":
        return _SharedLibraryModel.SharedLibraryModel_f_assign_external_pointer_array_l(self, varName, varSize)

    def assign_external_pointer_single_l(self, varName: 'std::string const &') -> "void":
        return _SharedLibraryModel.SharedLibraryModel_f_assign_external_pointer_single_l(self, varName)

    def assign_external_pointer_array_ul(self, varName: 'std::string const &', varSize: 'int const') -> "void":
        return _SharedLibraryModel.SharedLibraryModel_f_assign_external_pointer_array_ul(self, varName, varSize)

    def assign_external_pointer_single_ul(self, varName: 'std::string const &') -> "void":
        return _SharedLibraryModel.SharedLibraryModel_f_assign_external_pointer_single_ul(self, varName)

    def assign_external_pointer_array_ll(self, varName: 'std::string const &', varSize: 'int const') -> "void":
        return _SharedLibraryModel.SharedLibraryModel_f_assign_external_pointer_array_ll(self, varName, varSize)

    def assign_external_pointer_single_ll(self, varName: 'std::string const &') -> "void":
        return _SharedLibraryModel.SharedLibraryModel_f_assign_external_pointer_single_ll(self, varName)

    def assign_external_pointer_array_ull(self, varName: 'std::string const &', varSize: 'int const') -> "void":
        return _SharedLibraryModel.SharedLibraryModel_f_assign_external_pointer_array_ull(self, varName, varSize)

    def assign_external_pointer_single_ull(self, varName: 'std::string const &') -> "void":
        return _SharedLibraryModel.SharedLibraryModel_f_assign_external_pointer_single_ull(self, varName)

    def assign_external_pointer_array_f(self, varName: 'std::string const &', varSize: 'int const') -> "void":
        return _SharedLibraryModel.SharedLibraryModel_f_assign_external_pointer_array_f(self, varName, varSize)

    def assign_external_pointer_single_f(self, varName: 'std::string const &') -> "void":
        return _SharedLibraryModel.SharedLibraryModel_f_assign_external_pointer_single_f(self, varName)

    def assign_external_pointer_array_d(self, varName: 'std::string const &', varSize: 'int const') -> "void":
        return _SharedLibraryModel.SharedLibraryModel_f_assign_external_pointer_array_d(self, varName, varSize)

    def assign_external_pointer_single_d(self, varName: 'std::string const &') -> "void":
        return _SharedLibraryModel.SharedLibraryModel_f_assign_external_pointer_single_d(self, varName)

    def assign_external_pointer_array_ld(self, varName: 'std::string const &', varSize: 'int const') -> "void":
        return _SharedLibraryModel.SharedLibraryModel_f_assign_external_pointer_array_ld(self, varName, varSize)

    def assign_external_pointer_single_ld(self, varName: 'std::string const &') -> "void":
        return _SharedLibraryModel.SharedLibraryModel_f_assign_external_pointer_single_ld(self, varName)
SharedLibraryModel_f_swigregister = _SharedLibraryModel.SharedLibraryModel_f_swigregister
SharedLibraryModel_f_swigregister(SharedLibraryModel_f)

class SharedLibraryModel_d(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SharedLibraryModel_d, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SharedLibraryModel_d, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _SharedLibraryModel.new_SharedLibraryModel_d(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _SharedLibraryModel.delete_SharedLibraryModel_d
    __del__ = lambda self: None

    def open(self, pathToModel: 'std::string const &', modelName: 'std::string const &') -> "bool":
        return _SharedLibraryModel.SharedLibraryModel_d_open(self, pathToModel, modelName)

    def init_io(self, popName: 'std::string const &', availableDTypes: 'std::bitset< 5 > const &') -> "void":
        return _SharedLibraryModel.SharedLibraryModel_d_init_io(self, popName, availableDTypes)

    def init_neuron_pop_io(self, popName: 'std::string const &') -> "void":
        return _SharedLibraryModel.SharedLibraryModel_d_init_neuron_pop_io(self, popName)

    def init_synapse_pop_io(self, popName: 'std::string const &') -> "void":
        return _SharedLibraryModel.SharedLibraryModel_d_init_synapse_pop_io(self, popName)

    def init_current_source_io(self, csName: 'std::string const &') -> "void":
        return _SharedLibraryModel.SharedLibraryModel_d_init_current_source_io(self, csName)

    def pull_state_from_device(self, popName: 'std::string const &') -> "void":
        return _SharedLibraryModel.SharedLibraryModel_d_pull_state_from_device(self, popName)

    def pull_spikes_from_device(self, popName: 'std::string const &') -> "void":
        return _SharedLibraryModel.SharedLibraryModel_d_pull_spikes_from_device(self, popName)

    def pull_current_spikes_from_device(self, popName: 'std::string const &') -> "void":
        return _SharedLibraryModel.SharedLibraryModel_d_pull_current_spikes_from_device(self, popName)

    def push_state_to_device(self, popName: 'std::string const &') -> "void":
        return _SharedLibraryModel.SharedLibraryModel_d_push_state_to_device(self, popName)

    def push_spikes_to_device(self, popName: 'std::string const &') -> "void":
        return _SharedLibraryModel.SharedLibraryModel_d_push_spikes_to_device(self, popName)

    def assign_external_yale_ind(self, popName: 'std::string const &', nConn: 'int const') -> "void":
        return _SharedLibraryModel.SharedLibraryModel_d_assign_external_yale_ind(self, popName, nConn)

    def assign_external_yale_ind_in_g(self, popName: 'std::string const &', nPre: 'int const') -> "void":
        return _SharedLibraryModel.SharedLibraryModel_d_assign_external_yale_ind_in_g(self, popName, nPre)

    def assign_external_ragged_ind(self, popName: 'std::string const &', nPaddedConn: 'int const') -> "void":
        return _SharedLibraryModel.SharedLibraryModel_d_assign_external_ragged_ind(self, popName, nPaddedConn)

    def assign_external_ragged_row_length(self, popName: 'std::string const &', nPre: 'int const') -> "void":
        return _SharedLibraryModel.SharedLibraryModel_d_assign_external_ragged_row_length(self, popName, nPre)

    def get_symbol(self, symbolName: 'std::string const &', allowMissing: 'bool'=False) -> "void *":
        return _SharedLibraryModel.SharedLibraryModel_d_get_symbol(self, symbolName, allowMissing)

    def allocate_mem(self) -> "void":
        return _SharedLibraryModel.SharedLibraryModel_d_allocate_mem(self)

    def allocate_yale_proj(self, popName: 'std::string const &', nConn: 'unsigned int') -> "void":
        return _SharedLibraryModel.SharedLibraryModel_d_allocate_yale_proj(self, popName, nConn)

    def allocate_extra_global_param(self, popName: 'std::string const &', paramName: 'std::string const &', size: 'int const') -> "void":
        return _SharedLibraryModel.SharedLibraryModel_d_allocate_extra_global_param(self, popName, paramName, size)

    def free_extra_global_param(self, popName: 'std::string const &', paramName: 'std::string const &') -> "void":
        return _SharedLibraryModel.SharedLibraryModel_d_free_extra_global_param(self, popName, paramName)

    def initialize(self) -> "void":
        return _SharedLibraryModel.SharedLibraryModel_d_initialize(self)

    def initialize_model(self) -> "void":
        return _SharedLibraryModel.SharedLibraryModel_d_initialize_model(self)

    def step_time_gpu(self) -> "void":
        return _SharedLibraryModel.SharedLibraryModel_d_step_time_gpu(self)

    def step_time_cpu(self) -> "void":
        return _SharedLibraryModel.SharedLibraryModel_d_step_time_cpu(self)

    def exit_ge_nn(self) -> "void":
        return _SharedLibraryModel.SharedLibraryModel_d_exit_ge_nn(self)

    def assign_external_pointer_array_sc(self, varName: 'std::string const &', varSize: 'int const') -> "void":
        return _SharedLibraryModel.SharedLibraryModel_d_assign_external_pointer_array_sc(self, varName, varSize)

    def assign_external_pointer_single_sc(self, varName: 'std::string const &') -> "void":
        return _SharedLibraryModel.SharedLibraryModel_d_assign_external_pointer_single_sc(self, varName)

    def assign_external_pointer_array_uc(self, varName: 'std::string const &', varSize: 'int const') -> "void":
        return _SharedLibraryModel.SharedLibraryModel_d_assign_external_pointer_array_uc(self, varName, varSize)

    def assign_external_pointer_single_uc(self, varName: 'std::string const &') -> "void":
        return _SharedLibraryModel.SharedLibraryModel_d_assign_external_pointer_single_uc(self, varName)

    def assign_external_pointer_array_s(self, varName: 'std::string const &', varSize: 'int const') -> "void":
        return _SharedLibraryModel.SharedLibraryModel_d_assign_external_pointer_array_s(self, varName, varSize)

    def assign_external_pointer_single_s(self, varName: 'std::string const &') -> "void":
        return _SharedLibraryModel.SharedLibraryModel_d_assign_external_pointer_single_s(self, varName)

    def assign_external_pointer_array_us(self, varName: 'std::string const &', varSize: 'int const') -> "void":
        return _SharedLibraryModel.SharedLibraryModel_d_assign_external_pointer_array_us(self, varName, varSize)

    def assign_external_pointer_single_us(self, varName: 'std::string const &') -> "void":
        return _SharedLibraryModel.SharedLibraryModel_d_assign_external_pointer_single_us(self, varName)

    def assign_external_pointer_array_i(self, varName: 'std::string const &', varSize: 'int const') -> "void":
        return _SharedLibraryModel.SharedLibraryModel_d_assign_external_pointer_array_i(self, varName, varSize)

    def assign_external_pointer_single_i(self, varName: 'std::string const &') -> "void":
        return _SharedLibraryModel.SharedLibraryModel_d_assign_external_pointer_single_i(self, varName)

    def assign_external_pointer_array_ui(self, varName: 'std::string const &', varSize: 'int const') -> "void":
        return _SharedLibraryModel.SharedLibraryModel_d_assign_external_pointer_array_ui(self, varName, varSize)

    def assign_external_pointer_single_ui(self, varName: 'std::string const &') -> "void":
        return _SharedLibraryModel.SharedLibraryModel_d_assign_external_pointer_single_ui(self, varName)

    def assign_external_pointer_array_l(self, varName: 'std::string const &', varSize: 'int const') -> "void":
        return _SharedLibraryModel.SharedLibraryModel_d_assign_external_pointer_array_l(self, varName, varSize)

    def assign_external_pointer_single_l(self, varName: 'std::string const &') -> "void":
        return _SharedLibraryModel.SharedLibraryModel_d_assign_external_pointer_single_l(self, varName)

    def assign_external_pointer_array_ul(self, varName: 'std::string const &', varSize: 'int const') -> "void":
        return _SharedLibraryModel.SharedLibraryModel_d_assign_external_pointer_array_ul(self, varName, varSize)

    def assign_external_pointer_single_ul(self, varName: 'std::string const &') -> "void":
        return _SharedLibraryModel.SharedLibraryModel_d_assign_external_pointer_single_ul(self, varName)

    def assign_external_pointer_array_ll(self, varName: 'std::string const &', varSize: 'int const') -> "void":
        return _SharedLibraryModel.SharedLibraryModel_d_assign_external_pointer_array_ll(self, varName, varSize)

    def assign_external_pointer_single_ll(self, varName: 'std::string const &') -> "void":
        return _SharedLibraryModel.SharedLibraryModel_d_assign_external_pointer_single_ll(self, varName)

    def assign_external_pointer_array_ull(self, varName: 'std::string const &', varSize: 'int const') -> "void":
        return _SharedLibraryModel.SharedLibraryModel_d_assign_external_pointer_array_ull(self, varName, varSize)

    def assign_external_pointer_single_ull(self, varName: 'std::string const &') -> "void":
        return _SharedLibraryModel.SharedLibraryModel_d_assign_external_pointer_single_ull(self, varName)

    def assign_external_pointer_array_f(self, varName: 'std::string const &', varSize: 'int const') -> "void":
        return _SharedLibraryModel.SharedLibraryModel_d_assign_external_pointer_array_f(self, varName, varSize)

    def assign_external_pointer_single_f(self, varName: 'std::string const &') -> "void":
        return _SharedLibraryModel.SharedLibraryModel_d_assign_external_pointer_single_f(self, varName)

    def assign_external_pointer_array_d(self, varName: 'std::string const &', varSize: 'int const') -> "void":
        return _SharedLibraryModel.SharedLibraryModel_d_assign_external_pointer_array_d(self, varName, varSize)

    def assign_external_pointer_single_d(self, varName: 'std::string const &') -> "void":
        return _SharedLibraryModel.SharedLibraryModel_d_assign_external_pointer_single_d(self, varName)

    def assign_external_pointer_array_ld(self, varName: 'std::string const &', varSize: 'int const') -> "void":
        return _SharedLibraryModel.SharedLibraryModel_d_assign_external_pointer_array_ld(self, varName, varSize)

    def assign_external_pointer_single_ld(self, varName: 'std::string const &') -> "void":
        return _SharedLibraryModel.SharedLibraryModel_d_assign_external_pointer_single_ld(self, varName)
SharedLibraryModel_d_swigregister = _SharedLibraryModel.SharedLibraryModel_d_swigregister
SharedLibraryModel_d_swigregister(SharedLibraryModel_d)

class SharedLibraryModel_ld(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SharedLibraryModel_ld, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SharedLibraryModel_ld, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _SharedLibraryModel.new_SharedLibraryModel_ld(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _SharedLibraryModel.delete_SharedLibraryModel_ld
    __del__ = lambda self: None

    def open(self, pathToModel: 'std::string const &', modelName: 'std::string const &') -> "bool":
        return _SharedLibraryModel.SharedLibraryModel_ld_open(self, pathToModel, modelName)

    def init_io(self, popName: 'std::string const &', availableDTypes: 'std::bitset< 5 > const &') -> "void":
        return _SharedLibraryModel.SharedLibraryModel_ld_init_io(self, popName, availableDTypes)

    def init_neuron_pop_io(self, popName: 'std::string const &') -> "void":
        return _SharedLibraryModel.SharedLibraryModel_ld_init_neuron_pop_io(self, popName)

    def init_synapse_pop_io(self, popName: 'std::string const &') -> "void":
        return _SharedLibraryModel.SharedLibraryModel_ld_init_synapse_pop_io(self, popName)

    def init_current_source_io(self, csName: 'std::string const &') -> "void":
        return _SharedLibraryModel.SharedLibraryModel_ld_init_current_source_io(self, csName)

    def pull_state_from_device(self, popName: 'std::string const &') -> "void":
        return _SharedLibraryModel.SharedLibraryModel_ld_pull_state_from_device(self, popName)

    def pull_spikes_from_device(self, popName: 'std::string const &') -> "void":
        return _SharedLibraryModel.SharedLibraryModel_ld_pull_spikes_from_device(self, popName)

    def pull_current_spikes_from_device(self, popName: 'std::string const &') -> "void":
        return _SharedLibraryModel.SharedLibraryModel_ld_pull_current_spikes_from_device(self, popName)

    def push_state_to_device(self, popName: 'std::string const &') -> "void":
        return _SharedLibraryModel.SharedLibraryModel_ld_push_state_to_device(self, popName)

    def push_spikes_to_device(self, popName: 'std::string const &') -> "void":
        return _SharedLibraryModel.SharedLibraryModel_ld_push_spikes_to_device(self, popName)

    def assign_external_yale_ind(self, popName: 'std::string const &', nConn: 'int const') -> "void":
        return _SharedLibraryModel.SharedLibraryModel_ld_assign_external_yale_ind(self, popName, nConn)

    def assign_external_yale_ind_in_g(self, popName: 'std::string const &', nPre: 'int const') -> "void":
        return _SharedLibraryModel.SharedLibraryModel_ld_assign_external_yale_ind_in_g(self, popName, nPre)

    def assign_external_ragged_ind(self, popName: 'std::string const &', nPaddedConn: 'int const') -> "void":
        return _SharedLibraryModel.SharedLibraryModel_ld_assign_external_ragged_ind(self, popName, nPaddedConn)

    def assign_external_ragged_row_length(self, popName: 'std::string const &', nPre: 'int const') -> "void":
        return _SharedLibraryModel.SharedLibraryModel_ld_assign_external_ragged_row_length(self, popName, nPre)

    def get_symbol(self, symbolName: 'std::string const &', allowMissing: 'bool'=False) -> "void *":
        return _SharedLibraryModel.SharedLibraryModel_ld_get_symbol(self, symbolName, allowMissing)

    def allocate_mem(self) -> "void":
        return _SharedLibraryModel.SharedLibraryModel_ld_allocate_mem(self)

    def allocate_yale_proj(self, popName: 'std::string const &', nConn: 'unsigned int') -> "void":
        return _SharedLibraryModel.SharedLibraryModel_ld_allocate_yale_proj(self, popName, nConn)

    def allocate_extra_global_param(self, popName: 'std::string const &', paramName: 'std::string const &', size: 'int const') -> "void":
        return _SharedLibraryModel.SharedLibraryModel_ld_allocate_extra_global_param(self, popName, paramName, size)

    def free_extra_global_param(self, popName: 'std::string const &', paramName: 'std::string const &') -> "void":
        return _SharedLibraryModel.SharedLibraryModel_ld_free_extra_global_param(self, popName, paramName)

    def initialize(self) -> "void":
        return _SharedLibraryModel.SharedLibraryModel_ld_initialize(self)

    def initialize_model(self) -> "void":
        return _SharedLibraryModel.SharedLibraryModel_ld_initialize_model(self)

    def step_time_gpu(self) -> "void":
        return _SharedLibraryModel.SharedLibraryModel_ld_step_time_gpu(self)

    def step_time_cpu(self) -> "void":
        return _SharedLibraryModel.SharedLibraryModel_ld_step_time_cpu(self)

    def exit_ge_nn(self) -> "void":
        return _SharedLibraryModel.SharedLibraryModel_ld_exit_ge_nn(self)

    def assign_external_pointer_array_sc(self, varName: 'std::string const &', varSize: 'int const') -> "void":
        return _SharedLibraryModel.SharedLibraryModel_ld_assign_external_pointer_array_sc(self, varName, varSize)

    def assign_external_pointer_single_sc(self, varName: 'std::string const &') -> "void":
        return _SharedLibraryModel.SharedLibraryModel_ld_assign_external_pointer_single_sc(self, varName)

    def assign_external_pointer_array_uc(self, varName: 'std::string const &', varSize: 'int const') -> "void":
        return _SharedLibraryModel.SharedLibraryModel_ld_assign_external_pointer_array_uc(self, varName, varSize)

    def assign_external_pointer_single_uc(self, varName: 'std::string const &') -> "void":
        return _SharedLibraryModel.SharedLibraryModel_ld_assign_external_pointer_single_uc(self, varName)

    def assign_external_pointer_array_s(self, varName: 'std::string const &', varSize: 'int const') -> "void":
        return _SharedLibraryModel.SharedLibraryModel_ld_assign_external_pointer_array_s(self, varName, varSize)

    def assign_external_pointer_single_s(self, varName: 'std::string const &') -> "void":
        return _SharedLibraryModel.SharedLibraryModel_ld_assign_external_pointer_single_s(self, varName)

    def assign_external_pointer_array_us(self, varName: 'std::string const &', varSize: 'int const') -> "void":
        return _SharedLibraryModel.SharedLibraryModel_ld_assign_external_pointer_array_us(self, varName, varSize)

    def assign_external_pointer_single_us(self, varName: 'std::string const &') -> "void":
        return _SharedLibraryModel.SharedLibraryModel_ld_assign_external_pointer_single_us(self, varName)

    def assign_external_pointer_array_i(self, varName: 'std::string const &', varSize: 'int const') -> "void":
        return _SharedLibraryModel.SharedLibraryModel_ld_assign_external_pointer_array_i(self, varName, varSize)

    def assign_external_pointer_single_i(self, varName: 'std::string const &') -> "void":
        return _SharedLibraryModel.SharedLibraryModel_ld_assign_external_pointer_single_i(self, varName)

    def assign_external_pointer_array_ui(self, varName: 'std::string const &', varSize: 'int const') -> "void":
        return _SharedLibraryModel.SharedLibraryModel_ld_assign_external_pointer_array_ui(self, varName, varSize)

    def assign_external_pointer_single_ui(self, varName: 'std::string const &') -> "void":
        return _SharedLibraryModel.SharedLibraryModel_ld_assign_external_pointer_single_ui(self, varName)

    def assign_external_pointer_array_l(self, varName: 'std::string const &', varSize: 'int const') -> "void":
        return _SharedLibraryModel.SharedLibraryModel_ld_assign_external_pointer_array_l(self, varName, varSize)

    def assign_external_pointer_single_l(self, varName: 'std::string const &') -> "void":
        return _SharedLibraryModel.SharedLibraryModel_ld_assign_external_pointer_single_l(self, varName)

    def assign_external_pointer_array_ul(self, varName: 'std::string const &', varSize: 'int const') -> "void":
        return _SharedLibraryModel.SharedLibraryModel_ld_assign_external_pointer_array_ul(self, varName, varSize)

    def assign_external_pointer_single_ul(self, varName: 'std::string const &') -> "void":
        return _SharedLibraryModel.SharedLibraryModel_ld_assign_external_pointer_single_ul(self, varName)

    def assign_external_pointer_array_ll(self, varName: 'std::string const &', varSize: 'int const') -> "void":
        return _SharedLibraryModel.SharedLibraryModel_ld_assign_external_pointer_array_ll(self, varName, varSize)

    def assign_external_pointer_single_ll(self, varName: 'std::string const &') -> "void":
        return _SharedLibraryModel.SharedLibraryModel_ld_assign_external_pointer_single_ll(self, varName)

    def assign_external_pointer_array_ull(self, varName: 'std::string const &', varSize: 'int const') -> "void":
        return _SharedLibraryModel.SharedLibraryModel_ld_assign_external_pointer_array_ull(self, varName, varSize)

    def assign_external_pointer_single_ull(self, varName: 'std::string const &') -> "void":
        return _SharedLibraryModel.SharedLibraryModel_ld_assign_external_pointer_single_ull(self, varName)

    def assign_external_pointer_array_f(self, varName: 'std::string const &', varSize: 'int const') -> "void":
        return _SharedLibraryModel.SharedLibraryModel_ld_assign_external_pointer_array_f(self, varName, varSize)

    def assign_external_pointer_single_f(self, varName: 'std::string const &') -> "void":
        return _SharedLibraryModel.SharedLibraryModel_ld_assign_external_pointer_single_f(self, varName)

    def assign_external_pointer_array_d(self, varName: 'std::string const &', varSize: 'int const') -> "void":
        return _SharedLibraryModel.SharedLibraryModel_ld_assign_external_pointer_array_d(self, varName, varSize)

    def assign_external_pointer_single_d(self, varName: 'std::string const &') -> "void":
        return _SharedLibraryModel.SharedLibraryModel_ld_assign_external_pointer_single_d(self, varName)

    def assign_external_pointer_array_ld(self, varName: 'std::string const &', varSize: 'int const') -> "void":
        return _SharedLibraryModel.SharedLibraryModel_ld_assign_external_pointer_array_ld(self, varName, varSize)

    def assign_external_pointer_single_ld(self, varName: 'std::string const &') -> "void":
        return _SharedLibraryModel.SharedLibraryModel_ld_assign_external_pointer_single_ld(self, varName)
SharedLibraryModel_ld_swigregister = _SharedLibraryModel.SharedLibraryModel_ld_swigregister
SharedLibraryModel_ld_swigregister(SharedLibraryModel_ld)

# This file is compatible with both classic and new-style classes.


