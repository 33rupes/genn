# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.12
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    def swig_import_helper():
        import importlib
        pkg = __name__.rpartition('.')[0]
        mname = '.'.join((pkg, '_InitVarSnippet')).lstrip('.')
        try:
            return importlib.import_module(mname)
        except ImportError:
            return importlib.import_module('_InitVarSnippet')
    _InitVarSnippet = swig_import_helper()
    del swig_import_helper
elif _swig_python_version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_InitVarSnippet', [dirname(__file__)])
        except ImportError:
            import _InitVarSnippet
            return _InitVarSnippet
        try:
            _mod = imp.load_module('_InitVarSnippet', fp, pathname, description)
        finally:
            if fp is not None:
                fp.close()
        return _mod
    _InitVarSnippet = swig_import_helper()
    del swig_import_helper
else:
    import _InitVarSnippet
del _swig_python_version_info

try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        if _newclass:
            object.__setattr__(self, name, value)
        else:
            self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr(self, class_type, name):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    raise AttributeError("'%s' object has no attribute '%s'" % (class_type.__name__, name))


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except __builtin__.Exception:
    class _object:
        pass
    _newclass = 0

try:
    import weakref
    weakref_proxy = weakref.proxy
except __builtin__.Exception:
    weakref_proxy = lambda x: x


from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import Snippet
else:
    import Snippet
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import StlContainers
else:
    import StlContainers
del _swig_python_version_info
class Base(Snippet.Base):
    __swig_setmethods__ = {}
    for _s in [Snippet.Base]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Base, name, value)
    __swig_getmethods__ = {}
    for _s in [Snippet.Base]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, Base, name)
    __repr__ = _swig_repr

    def get_code(self) -> "std::string":
        return _InitVarSnippet.Base_get_code(self)

    def __init__(self):
        if self.__class__ == Base:
            _self = None
        else:
            _self = self
        this = _InitVarSnippet.new_Base(_self, )
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _InitVarSnippet.delete_Base
    __del__ = lambda self: None
    def __disown__(self):
        self.this.disown()
        _InitVarSnippet.disown_Base(self)
        return weakref_proxy(self)
Base_swigregister = _InitVarSnippet.Base_swigregister
Base_swigregister(Base)

class Uninitialised(Base):
    __swig_setmethods__ = {}
    for _s in [Base]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Uninitialised, name, value)
    __swig_getmethods__ = {}
    for _s in [Base]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, Uninitialised, name)
    __repr__ = _swig_repr
    if _newclass:
        get_instance = staticmethod(_InitVarSnippet.Uninitialised_get_instance)
    else:
        get_instance = _InitVarSnippet.Uninitialised_get_instance
    if _newclass:
        make_param_values = staticmethod(_InitVarSnippet.Uninitialised_make_param_values)
    else:
        make_param_values = _InitVarSnippet.Uninitialised_make_param_values

    def __init__(self):
        this = _InitVarSnippet.new_Uninitialised()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _InitVarSnippet.delete_Uninitialised
    __del__ = lambda self: None
Uninitialised_swigregister = _InitVarSnippet.Uninitialised_swigregister
Uninitialised_swigregister(Uninitialised)

def Uninitialised_get_instance() -> "InitVarSnippet::Uninitialised const *":
    return _InitVarSnippet.Uninitialised_get_instance()
Uninitialised_get_instance = _InitVarSnippet.Uninitialised_get_instance

def Uninitialised_make_param_values(arg2: 'DoubleVector') -> "InitVarSnippet::Uninitialised::ParamValues *":
    return _InitVarSnippet.Uninitialised_make_param_values(arg2)
Uninitialised_make_param_values = _InitVarSnippet.Uninitialised_make_param_values

class Constant(Base):
    __swig_setmethods__ = {}
    for _s in [Base]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Constant, name, value)
    __swig_getmethods__ = {}
    for _s in [Base]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, Constant, name)
    __repr__ = _swig_repr
    if _newclass:
        get_instance = staticmethod(_InitVarSnippet.Constant_get_instance)
    else:
        get_instance = _InitVarSnippet.Constant_get_instance

    def get_code(self) -> "std::string":
        return _InitVarSnippet.Constant_get_code(self)

    def get_param_names(self) -> "Snippet::Base::StringVec":
        return _InitVarSnippet.Constant_get_param_names(self)
    if _newclass:
        make_param_values = staticmethod(_InitVarSnippet.Constant_make_param_values)
    else:
        make_param_values = _InitVarSnippet.Constant_make_param_values

    def __init__(self):
        this = _InitVarSnippet.new_Constant()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _InitVarSnippet.delete_Constant
    __del__ = lambda self: None
Constant_swigregister = _InitVarSnippet.Constant_swigregister
Constant_swigregister(Constant)

def Constant_get_instance() -> "InitVarSnippet::Constant const *":
    return _InitVarSnippet.Constant_get_instance()
Constant_get_instance = _InitVarSnippet.Constant_get_instance

def Constant_make_param_values(vals: 'DoubleVector') -> "InitVarSnippet::Constant::ParamValues *":
    return _InitVarSnippet.Constant_make_param_values(vals)
Constant_make_param_values = _InitVarSnippet.Constant_make_param_values

class Uniform(Base):
    __swig_setmethods__ = {}
    for _s in [Base]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Uniform, name, value)
    __swig_getmethods__ = {}
    for _s in [Base]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, Uniform, name)
    __repr__ = _swig_repr
    if _newclass:
        get_instance = staticmethod(_InitVarSnippet.Uniform_get_instance)
    else:
        get_instance = _InitVarSnippet.Uniform_get_instance

    def get_code(self) -> "std::string":
        return _InitVarSnippet.Uniform_get_code(self)

    def get_param_names(self) -> "Snippet::Base::StringVec":
        return _InitVarSnippet.Uniform_get_param_names(self)
    if _newclass:
        make_param_values = staticmethod(_InitVarSnippet.Uniform_make_param_values)
    else:
        make_param_values = _InitVarSnippet.Uniform_make_param_values

    def __init__(self):
        this = _InitVarSnippet.new_Uniform()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _InitVarSnippet.delete_Uniform
    __del__ = lambda self: None
Uniform_swigregister = _InitVarSnippet.Uniform_swigregister
Uniform_swigregister(Uniform)

def Uniform_get_instance() -> "InitVarSnippet::Uniform const *":
    return _InitVarSnippet.Uniform_get_instance()
Uniform_get_instance = _InitVarSnippet.Uniform_get_instance

def Uniform_make_param_values(vals: 'DoubleVector') -> "InitVarSnippet::Uniform::ParamValues *":
    return _InitVarSnippet.Uniform_make_param_values(vals)
Uniform_make_param_values = _InitVarSnippet.Uniform_make_param_values

class Normal(Base):
    __swig_setmethods__ = {}
    for _s in [Base]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Normal, name, value)
    __swig_getmethods__ = {}
    for _s in [Base]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, Normal, name)
    __repr__ = _swig_repr
    if _newclass:
        get_instance = staticmethod(_InitVarSnippet.Normal_get_instance)
    else:
        get_instance = _InitVarSnippet.Normal_get_instance

    def get_code(self) -> "std::string":
        return _InitVarSnippet.Normal_get_code(self)

    def get_param_names(self) -> "Snippet::Base::StringVec":
        return _InitVarSnippet.Normal_get_param_names(self)
    if _newclass:
        make_param_values = staticmethod(_InitVarSnippet.Normal_make_param_values)
    else:
        make_param_values = _InitVarSnippet.Normal_make_param_values

    def __init__(self):
        this = _InitVarSnippet.new_Normal()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _InitVarSnippet.delete_Normal
    __del__ = lambda self: None
Normal_swigregister = _InitVarSnippet.Normal_swigregister
Normal_swigregister(Normal)

def Normal_get_instance() -> "InitVarSnippet::Normal const *":
    return _InitVarSnippet.Normal_get_instance()
Normal_get_instance = _InitVarSnippet.Normal_get_instance

def Normal_make_param_values(vals: 'DoubleVector') -> "InitVarSnippet::Normal::ParamValues *":
    return _InitVarSnippet.Normal_make_param_values(vals)
Normal_make_param_values = _InitVarSnippet.Normal_make_param_values

class Exponential(Base):
    __swig_setmethods__ = {}
    for _s in [Base]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Exponential, name, value)
    __swig_getmethods__ = {}
    for _s in [Base]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, Exponential, name)
    __repr__ = _swig_repr
    if _newclass:
        get_instance = staticmethod(_InitVarSnippet.Exponential_get_instance)
    else:
        get_instance = _InitVarSnippet.Exponential_get_instance

    def get_code(self) -> "std::string":
        return _InitVarSnippet.Exponential_get_code(self)

    def get_param_names(self) -> "Snippet::Base::StringVec":
        return _InitVarSnippet.Exponential_get_param_names(self)
    if _newclass:
        make_param_values = staticmethod(_InitVarSnippet.Exponential_make_param_values)
    else:
        make_param_values = _InitVarSnippet.Exponential_make_param_values

    def __init__(self):
        this = _InitVarSnippet.new_Exponential()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _InitVarSnippet.delete_Exponential
    __del__ = lambda self: None
Exponential_swigregister = _InitVarSnippet.Exponential_swigregister
Exponential_swigregister(Exponential)

def Exponential_get_instance() -> "InitVarSnippet::Exponential const *":
    return _InitVarSnippet.Exponential_get_instance()
Exponential_get_instance = _InitVarSnippet.Exponential_get_instance

def Exponential_make_param_values(vals: 'DoubleVector') -> "InitVarSnippet::Exponential::ParamValues *":
    return _InitVarSnippet.Exponential_make_param_values(vals)
Exponential_make_param_values = _InitVarSnippet.Exponential_make_param_values

class Gamma(Base):
    __swig_setmethods__ = {}
    for _s in [Base]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Gamma, name, value)
    __swig_getmethods__ = {}
    for _s in [Base]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, Gamma, name)
    __repr__ = _swig_repr
    if _newclass:
        get_instance = staticmethod(_InitVarSnippet.Gamma_get_instance)
    else:
        get_instance = _InitVarSnippet.Gamma_get_instance

    def get_code(self) -> "std::string":
        return _InitVarSnippet.Gamma_get_code(self)

    def get_param_names(self) -> "Snippet::Base::StringVec":
        return _InitVarSnippet.Gamma_get_param_names(self)
    if _newclass:
        make_param_values = staticmethod(_InitVarSnippet.Gamma_make_param_values)
    else:
        make_param_values = _InitVarSnippet.Gamma_make_param_values

    def __init__(self):
        this = _InitVarSnippet.new_Gamma()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _InitVarSnippet.delete_Gamma
    __del__ = lambda self: None
Gamma_swigregister = _InitVarSnippet.Gamma_swigregister
Gamma_swigregister(Gamma)

def Gamma_get_instance() -> "InitVarSnippet::Gamma const *":
    return _InitVarSnippet.Gamma_get_instance()
Gamma_get_instance = _InitVarSnippet.Gamma_get_instance

def Gamma_make_param_values(vals: 'DoubleVector') -> "InitVarSnippet::Gamma::ParamValues *":
    return _InitVarSnippet.Gamma_make_param_values(vals)
Gamma_make_param_values = _InitVarSnippet.Gamma_make_param_values

class Custom(Base):
    __swig_setmethods__ = {}
    for _s in [Base]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Custom, name, value)
    __swig_getmethods__ = {}
    for _s in [Base]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, Custom, name)
    __repr__ = _swig_repr
    if _newclass:
        get_instance = staticmethod(_InitVarSnippet.Custom_get_instance)
    else:
        get_instance = _InitVarSnippet.Custom_get_instance
    if _newclass:
        make_param_values = staticmethod(_InitVarSnippet.Custom_make_param_values)
    else:
        make_param_values = _InitVarSnippet.Custom_make_param_values

    def __init__(self):
        if self.__class__ == Custom:
            _self = None
        else:
            _self = self
        this = _InitVarSnippet.new_Custom(_self, )
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _InitVarSnippet.delete_Custom
    __del__ = lambda self: None
    def __disown__(self):
        self.this.disown()
        _InitVarSnippet.disown_Custom(self)
        return weakref_proxy(self)
Custom_swigregister = _InitVarSnippet.Custom_swigregister
Custom_swigregister(Custom)

def Custom_get_instance() -> "InitVarSnippet::Custom const *":
    return _InitVarSnippet.Custom_get_instance()
Custom_get_instance = _InitVarSnippet.Custom_get_instance

def Custom_make_param_values(vals: 'DoubleVector') -> "CustomValues::ParamValues *":
    return _InitVarSnippet.Custom_make_param_values(vals)
Custom_make_param_values = _InitVarSnippet.Custom_make_param_values

# This file is compatible with both classic and new-style classes.


