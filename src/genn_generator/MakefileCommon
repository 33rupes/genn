# Include common makefile
include ../genn/MakefileCommon

# Check required environment variable names are set
ifndef BACKEND_NAME
	$(error Environment variable BACKEND_NAME must be defined)
endif
ifndef BACKEND_NAMESPACE
	$(error Environment variable BACKEND_NAMESPACE must be defined)
endif
ifndef MODEL
	$(error Environment variable MODEL must be defined)
endif
ifndef GENERATOR_PATH
	$(error Environment variable GENERATOR_PATH must be defined)
endif

# BUILD_MODEL_INCLUDE contains a colon-seperated list of additional include paths.
# substitute :s for spaces and then prepend each path with -I so it gets turned into an include directory
CXXFLAGS		+=$(patsubst %,-I%,$(subst :, ,$(BUILD_MODEL_INCLUDE)))

# Add compiler and linker flags to link libGeNN and correct backend; and to configure generator to use backend
LDFLAGS			+= -L$(GENN_DIR)/lib -lgenn$(GENN_PREFIX) -lgenn_$(BACKEND_NAME)_backend$(GENN_PREFIX) 
CXXFLAGS		+= -I$(GENN_DIR)/include/genn_$(BACKEND_NAME)_backend -DMODEL=\"$(MODEL)\" -DBACKEND_NAMESPACE=$(BACKEND_NAMESPACE)

# Determine full path to generator and backend
GENERATOR		:=$(GENERATOR_PATH)/generator$(GENN_PREFIX)
BACKEND			:=$(GENN_DIR)/lib/libgenn_$(BACKEND_NAME)_backend$(GENN_PREFIX).a

.PHONY: all clean

all: $(GENERATOR)

$(GENERATOR): generator.cc $(LIBGENN) $(BACKEND)
	mkdir -p $(@D)
	$(CXX) $(CXXFLAGS) generator.cc -o $@ $(LDFLAGS)

# **NOTE** if GeNN is installed, libGeNN should be installed and thus rule won't run
$(LIBGENN):
	$(MAKE) -C $(GENN_DIR)/src/genn

# **NOTE** if GeNN is installed, backend should be installed and thus rule won't run
$(BACKEND):
	$(MAKE) -C $(GENN_DIR)/src/genn_$(BACKEND_NAME)_backend

clean:
	rm -f generator.o $(GENERATOR)
